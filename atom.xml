<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>6 + 7</title>
  
  <subtitle>无</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-09T12:28:22.097Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>愚人丶不愚</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>笔记-中软学习篇</title>
    <link href="http://example.com/2021/07/19/%E7%AC%94%E8%AE%B0-%E4%B8%AD%E8%BD%AF%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    <id>http://example.com/2021/07/19/%E7%AC%94%E8%AE%B0-%E4%B8%AD%E8%BD%AF%E5%AD%A6%E4%B9%A0%E7%AF%87/</id>
    <published>2021-07-18T23:47:23.000Z</published>
    <updated>2021-08-09T12:28:22.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记-中软学习篇"><a href="#笔记-中软学习篇" class="headerlink" title="笔记-中软学习篇"></a>笔记-中软学习篇</h1><span id="more"></span><h2 id="一周web基础学习-大课（简单，学过点，随便写写笔记）"><a href="#一周web基础学习-大课（简单，学过点，随便写写笔记）" class="headerlink" title="一周web基础学习-大课（简单，学过点，随便写写笔记）"></a>一周web基础学习-大课（简单，学过点，随便写写笔记）</h2><h3 id="标签-作业巨多！！！"><a href="#标签-作业巨多！！！" class="headerlink" title="标签(作业巨多！！！)"></a>标签(作业巨多！！！)</h3><ul><li><p>单标签：不操作文本内容，没有明确的结束标签；</p></li><li><p>双标签：操作文本内容，成对出现，有结束标签。</p></li><li><p>center-居中（不用）</p></li><li><p>a href-超链接</p></li><li><p>img src-插入图片</p></li><li><p>p-段落标签</p></li><li><p>br-换行</p></li><li><p>图片<br><img src="https://i.loli.net/2021/07/22/B7xlg384t5IAOCS.png"></p></li><li><p>a id=”txt”(锚点，a href)</p></li><li><p><img src="https://i.loli.net/2021/07/22/uLJNwPUp3dAcG4h.png"><br><img src="https://i.loli.net/2021/07/22/n6VMYcDNqrWsjIS.png"><br><img src="https://i.loli.net/2021/07/22/RLu45pKWQZfUmIq.png"></p></li><li><p>i 斜体</p></li><li><p>em 强调</p></li><li><p>b 加粗</p></li><li><p>strong 加粗，强调</p></li><li><p>hr 分割线</p></li><li><p>font 字体（不提倡）</p></li><li><p>&amp;nbsp 空格</p></li><li><p>特殊字符（网上一堆）</p></li><li><p>alt 解释文字（加载失败）</p></li><li><p>title 提示文本（鼠标放上去）</p></li><li><p>li 排</p></li><li><p>ul 无序列表</p></li><li><p>ol 有序列表</p></li><li><p>dl 自定义</p><h3 id="做了一个界面（html-css-）"><a href="#做了一个界面（html-css-）" class="headerlink" title="做了一个界面（html+css,）"></a>做了一个界面（html+css,）</h3><h3 id="表格（简单）"><a href="#表格（简单）" class="headerlink" title="表格（简单）"></a>表格（简单）</h3><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>form actuon=”(这里是链接的网站)” method=”POST”<br><img src="https://mapp.alicdn.com/1626924170254jkVRPzKM46OKKSp.png"><br><img src="https://i.loli.net/2021/07/22/E6uL1s4v3MOadqU.png"><br><img src="https://i.loli.net/2021/07/22/3U7glEqNsGdurSc.png"></p><h3 id="做了个网址"><a href="#做了个网址" class="headerlink" title="做了个网址"></a>做了个网址</h3><h2 id="正式上课（大数据方向）（赵老师）（没全纪录，自学那还有好多笔记，很熟的pass）"><a href="#正式上课（大数据方向）（赵老师）（没全纪录，自学那还有好多笔记，很熟的pass）" class="headerlink" title="正式上课（大数据方向）（赵老师）（没全纪录，自学那还有好多笔记，很熟的pass）"></a>正式上课（大数据方向）（赵老师）（没全纪录，自学那还有好多笔记，很熟的pass）</h2><h3 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h3></li><li><p>安装软件，配置环境</p></li><li><p>工作台： eclipse（之前用过sublime，ider，挺好，这个没用过）</p><h3 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h3><h4 id="注释（不参与编译和运行）"><a href="#注释（不参与编译和运行）" class="headerlink" title="注释（不参与编译和运行）"></a>注释（不参与编译和运行）</h4></li><li><p>//  -单行注释</p></li><li><p>/*  */ -多行</p></li><li><p>/** */ -文档注释</p><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4></li><li><p>命名规则（记过笔记）</p></li></ul><ol><li>字母，数字，_,$;</li><li>不能以数字开头</li><li>不能使用关键字，保留字</li><li>见名知意</li><li>驼峰命名法</li></ol><ul><li>代码格式<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4></li><li>基本数据类型</li></ul><ol><li>byte ，1，8 </li><li>short，2，16</li><li>int, 4,32</li><li>long,8,64</li><li>float,4,32</li><li>double,8,64</li><li>char,2</li><li>boolean,1</li><li>String<h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4></li></ol><ul><li>变量</li><li>常量（final）</li><li>字符分类 ：可见，不可见</li><li>编码类型<h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4></li><li>前提:数据类型要兼容</li><li>自动类型转换:转换后的类型 》 转换前的类型 转换后的空间比转换前的大，不会有精度损失，所以自动完成</li><li>强制转换：转换后的类型 《 转换前的类型（强转）</li><li>如果是常量，则编译器会自动判断是否在变量的取值范围内。如果在，则自动转换，如果不在，强转</li><li>一个运算表达式，每个操作数都是小于int类型，运算结果为int类型，如果有long类型，则运算结果为long类型。<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4></li><li>算术运算符</li><li>关系运算（&lt;,&gt;,&lt;=,&gt;=,==,!=）<h4 id="逻辑运算符（注意短路与不短路）"><a href="#逻辑运算符（注意短路与不短路）" class="headerlink" title="逻辑运算符（注意短路与不短路）"></a>逻辑运算符（注意短路与不短路）</h4><h4 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h4><h4 id="条件运算符（三元运算）"><a href="#条件运算符（三元运算）" class="headerlink" title="条件运算符（三元运算）"></a>条件运算符（三元运算）</h4><h3 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h3><h4 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h4></li><li>if-else if-else（if后面只有一条语句属于if结构）（注意大括号的省略）</li><li>switch (支持：byte，short，int，char，String，enum)（穿透）<h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4></li><li>while</li><li>do while</li><li>for<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4></li><li>break</li><li>continue<h3 id="day04"><a href="#day04" class="headerlink" title="day04"></a>day04</h3><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4></li><li>方式一： new 数据类型【长度】</li><li>方式二： new 数据类型【】{元素一，。。。。。元素n}</li><li>方式三： 在一条语句内（数据类型【】 变量名 = {元素一，。。。。。元素n}）</li><li>整型默认：0</li><li>浮点型默认：0.0</li><li>char默认： 空字符</li><li>boolean默认： false</li><li>引用类型： null<h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4></li><li>数组类型【】【】 变量名；<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4></li><li>选择排序</li><li>冒泡排序</li><li>插入排序（没写过）</li><li>二分法查找（复习要好好看）<h3 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h4 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h4><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h4 id="作业（day0802）"><a href="#作业（day0802）" class="headerlink" title="作业（day0802）"></a>作业（day0802）</h4><h3 id="day06"><a href="#day06" class="headerlink" title="day06"></a>day06</h3><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><h4 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h4><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><h4 id="作业（day0803）"><a href="#作业（day0803）" class="headerlink" title="作业（day0803）"></a>作业（day0803）</h4><h3 id="day07"><a href="#day07" class="headerlink" title="day07"></a>day07</h3><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><h3 id="day08"><a href="#day08" class="headerlink" title="day08"></a>day08</h3><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><h3 id="因为疫情被遣散回家，转战线上（对我影响不大，毕竟之前是自学过来的，强大的自制力（狗头））"><a href="#因为疫情被遣散回家，转战线上（对我影响不大，毕竟之前是自学过来的，强大的自制力（狗头））" class="headerlink" title="因为疫情被遣散回家，转战线上（对我影响不大，毕竟之前是自学过来的，强大的自制力（狗头））"></a>因为疫情被遣散回家，转战线上（对我影响不大，毕竟之前是自学过来的，强大的自制力（狗头））</h3></li></ul><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=434902428&auto=1&height=66"></iframe>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;笔记-中软学习篇&quot;&gt;&lt;a href=&quot;#笔记-中软学习篇&quot; class=&quot;headerlink&quot; title=&quot;笔记-中软学习篇&quot;&gt;&lt;/a&gt;笔记-中软学习篇&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>linux-root密码找回</title>
    <link href="http://example.com/2021/07/02/linux-root%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/"/>
    <id>http://example.com/2021/07/02/linux-root%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/</id>
    <published>2021-07-02T11:38:56.000Z</published>
    <updated>2021-07-02T11:39:34.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-root密码找回"><a href="#linux-root密码找回" class="headerlink" title="linux-root密码找回"></a>linux-root密码找回</h1><span id="more"></span><h2 id="这呢：来自韩顺平老师"><a href="#这呢：来自韩顺平老师" class="headerlink" title="这呢：来自韩顺平老师"></a>这呢：来自韩顺平老师</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/07/81cf69144f4e43d1.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;linux-root密码找回&quot;&gt;&lt;a href=&quot;#linux-root密码找回&quot; class=&quot;headerlink&quot; title=&quot;linux-root密码找回&quot;&gt;&lt;/a&gt;linux-root密码找回&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vi和vim快捷键</title>
    <link href="http://example.com/2021/07/02/linux-vi%E5%92%8Cvim%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/2021/07/02/linux-vi%E5%92%8Cvim%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2021-07-02T05:08:27.000Z</published>
    <updated>2021-07-02T05:08:33.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vi和vim快捷键"><a href="#vi和vim快捷键" class="headerlink" title="vi和vim快捷键"></a>vi和vim快捷键</h1><span id="more"></span><h2 id="这呢：来自韩顺平老师"><a href="#这呢：来自韩顺平老师" class="headerlink" title="这呢：来自韩顺平老师"></a>这呢：来自韩顺平老师</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/07/83cbc71d3c6d2fa8.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/518d024f777fd436.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;vi和vim快捷键&quot;&gt;&lt;a href=&quot;#vi和vim快捷键&quot; class=&quot;headerlink&quot; title=&quot;vi和vim快捷键&quot;&gt;&lt;/a&gt;vi和vim快捷键&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>linux自学笔记</title>
    <link href="http://example.com/2021/06/25/linux/"/>
    <id>http://example.com/2021/06/25/linux/</id>
    <published>2021-06-25T09:34:10.000Z</published>
    <updated>2021-07-20T05:49:02.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux入门"><a href="#linux入门" class="headerlink" title="linux入门"></a>linux入门</h1><span id="more"></span><h1 id="《《文章很长，目录在右下角》》"><a href="#《《文章很长，目录在右下角》》" class="headerlink" title="《《文章很长，目录在右下角》》"></a>《《文章很长，目录在右下角》》</h1><p>自学资源：<a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=6&spm_id_from=pageDriver">linux自学所用视频</a></p><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="概述（了解就行，不整理了）"><a href="#概述（了解就行，不整理了）" class="headerlink" title="概述（了解就行，不整理了）"></a>概述（了解就行，不整理了）</h3><h3 id="linux和Unix的关系-了解"><a href="#linux和Unix的关系-了解" class="headerlink" title="linux和Unix的关系(了解)"></a>linux和Unix的关系(了解)</h3><ul><li>linux的由来<br><img src="https://ftp.bmp.ovh/imgs/2021/06/d49241fc3513afd2.png"></li><li>unix的由来<br><img src="https://ftp.bmp.ovh/imgs/2021/06/d7f45db1abef6cfd.png"></li><li>二者之间的关系<br><img src="https://ftp.bmp.ovh/imgs/2021/06/3c79e7901fa8ed86.png"><h2 id="VM-和-Linux-的安装"><a href="#VM-和-Linux-的安装" class="headerlink" title="VM 和 Linux 的安装"></a>VM 和 Linux 的安装</h2><h3 id="安装-vm-和-Centos"><a href="#安装-vm-和-Centos" class="headerlink" title="安装 vm 和 Centos"></a>安装 vm 和 Centos</h3></li><li>基本说明 学习 Linux 需要一个环境，我们需要创建一个虚拟机，然后在虚拟机上安装一个 Centos 系统来学习 </li></ul><ol><li>先安装 virtual machine 15.5 </li><li>再安装 Linux (CentOS 7.6/centOS8.1) </li><li>原理示意图<br><img src="https://ftp.bmp.ovh/imgs/2021/06/24e320af1ab78bf3.png"><h3 id="vmware15-5-下载"><a href="#vmware15-5-下载" class="headerlink" title="vmware15.5 下载"></a>vmware15.5 下载</h3></li><li>官方地址：<a href="https://www.vmware.com/cn.html">https://www.vmware.com/cn.html</a> </li><li>其它地址：<a href="https://www.nocmd.com/windows/740.html">https://www.nocmd.com/windows/740.html</a><h3 id="VM-安装的步骤"><a href="#VM-安装的步骤" class="headerlink" title="VM 安装的步骤"></a>VM 安装的步骤</h3></li><li>去 BIOS 里修改设置开启虚拟化设备支持（f2, f10）</li><li>安装虚拟机软件（vm15.5）, 演示一把， 在 BIOS 开启 CPU 虚拟化支持 </li><li><a href="https://jingyan.baidu.com/article/ab0b56305f2882c15afa7dda.html">https://jingyan.baidu.com/article/ab0b56305f2882c15afa7dda.html</a> <h3 id="Centos-下载地址"><a href="#Centos-下载地址" class="headerlink" title="Centos 下载地址"></a>Centos 下载地址</h3></li><li>CentOS-7-x86_64-DVD-1810.iso CentOS 7.6 DVD 版 4G (目前主流的生产环境) <a href="http://mirrors.163.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso">http://mirrors.163.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso</a> </li><li>CentOS-8.1.1911-x86_64-dvd1.iso CentOS 8.1 DVD 版 8G (未来的主流.) <a href="https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso">https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso</a><h3 id="CentOS-安装的步骤"><a href="#CentOS-安装的步骤" class="headerlink" title="CentOS 安装的步骤"></a>CentOS 安装的步骤</h3></li><li>创建虚拟机 [演示] </li><li>开始安装系统(CentOS7.6)的步骤 [演示]<br>提示:生成复杂密码:<a href="https://suijimimashengcheng.51240.com/">https://suijimimashengcheng.51240.com/</a> </li><li>CentOS 安装难点-网络连接方式理解 [示意图]<br><img src="https://ftp.bmp.ovh/imgs/2021/06/3c512e1847500bea.png"><h3 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h3></li><li>方式 1，直接拷贝一份安装好的虚拟机文件 2) 方式 </li><li>使用 vmware 的克隆操作，注意， 克隆时，需要先关闭 linux 系统<h3 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h3></li></ol><ul><li>如果你在使用虚拟机系统的时候(比如 linux)，你想回到原先的某一个状态，也就是说你担心可能有些误操作造成系 统异常，需要回到原先某个正常运行的状态，vmware 也提供了这样的功能，就叫快照管理 。<br><img src="https://ftp.bmp.ovh/imgs/2021/06/218890f4a88328a7.png"><h3 id="虚拟机迁移和删除"><a href="#虚拟机迁移和删除" class="headerlink" title="虚拟机迁移和删除"></a>虚拟机迁移和删除</h3></li><li>我在前面讲过，虚拟系统安装好了，它的本质就是文件(放在文件夹的)。因此虚拟系统的迁移很方便，你可以把安 装好的虚拟系统这个文件夹整体拷贝或者剪切到另外位置使用。删除也很简单，用 vmware 进行移除，再点击菜单-&gt;从磁盘删除即可，或者直接手动删除虚拟系统对应的文件夹即可。<h3 id="安装-vmtools"><a href="#安装-vmtools" class="headerlink" title="安装 vmtools"></a>安装 vmtools</h3></li><li>介绍 </li></ul><ol><li>vmtools 安装后，可以让我们在 windows 下更好的管理 vm 虚拟机 </li><li>可以设置 windows 和 centos 的共享文件夹 </li></ol><ul><li>安装 vmtools 的步骤 </li></ul><ol><li>进入 centos </li><li>点击 vm 菜单的-&gt;install vmware tools </li><li>centos 会出现一个 vm 的安装包, xx.tar.gz </li><li>拷贝到 /opt </li><li>使用解压命令 tar, 得到一个安装文件 cd /opt [进入到 opt 目录] </li></ol><p>tar -zxvf xx.tar.gz </p><ol start="6"><li>进入该 vm 解压的目录 , /opt 目录下 </li></ol><p>cd vmware…</p><ol start="7"><li>安装 ./vmware-install.pl </li><li>全部使用默认设置即可, 就可以安装成功 </li><li>注意：安装 vmtools 需要有 gcc . gcc -v <h3 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h3></li></ol><ul><li>步骤</li></ul><ol><li>菜单-&gt;vm-&gt;setting,<br><img src="https://ftp.bmp.ovh/imgs/2021/06/e3a56717d76ebe8b.png"></li></ol><ul><li>注意事项和细节说明 </li></ul><ol><li>windows 和 contos 就可以共享文件了，但是在实际开发中，文件的上传下载是需要使用 远程方式完成的 </li><li>远程方式登录，后面<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3></li></ol><ul><li>基本介绍</li></ul><ol><li>linux 的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的 目录。 </li><li>深刻理解 linux 树状文件目录是非常重要的</li><li>记住一句经典的话：在 Linux 世界里，一切皆文件(!!)</li><li>示意图<br><img src></li></ol><ul><li>具体的目录结构(不用背,知道即可)</li></ul><ol><li>/bin [常用] (/usr/bin 、 /usr/local/bin) 是 Binary 的缩写, 这个目录存放着最经常使用的命令 </li><li>/sbin (/usr/sbin 、 /usr/local/sbin) s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。 </li><li>/home [常用] 存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</li><li>/root [常用] 该目录为系统管理员，也称作超级权限者的用户主目录 </li><li>/lib 系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要 用到这些共享库 </li><li>/lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件 </li><li>/etc [常用] 所有的系统管理所需要的配置文件和子目录, 比如安装 mysql 数据库 my.conf </li><li>/usr [常用] 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 program files 目录。 </li><li>/boot [常用] 存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件 </li><li>/proc [不能动] 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息 </li><li>/srv [不能动] service 缩写，该目录存放一些服务启动之后需要提取的数据 </li><li>/sys [不能动]这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs =》【别 动】 </li><li>/tmp 这个目录是用来存放一些临时文件的 </li><li>/dev 类似于 windows 的设备管理器，把所有的硬件用文件的形式存储 </li><li>/media [常用] linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个 目录下</li><li>/mnt [常用] 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了。</li><li>/opt 这是给主机额外安装软件所存放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空 </li><li>/usr/local [常用] 这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序 </li><li>/var [常用] 这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件 </li><li>/selinux [security-enhanced linux] SELinux 是一种安全子系统,它能控制程序只能访问特定文件, 有三种工作模式，可以自行设置.<h2 id="实操篇"><a href="#实操篇" class="headerlink" title="实操篇"></a>实操篇</h2><h3 id="远程登录到-Linux-服务器"><a href="#远程登录到-Linux-服务器" class="headerlink" title="远程登录到 Linux 服务器"></a>远程登录到 Linux 服务器</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4></li><li>linux 服务器是开发小组共享 </li><li>正式上线的项目是运行在公网 </li><li>因此程序员需要远程登录到 Linux 进行项目管理或者开发 </li><li>画出简单的网络拓扑示意图(帮助理解) </li><li>远程登录客户端有 Xshell6， Xftp6 , 我们学习使用 Xshell 和 Xftp6 , 其它的远程工具大同小异<br><img src="https://ftp.bmp.ovh/imgs/2021/07/80931decd2694952.png"><h4 id="远程登录-Linux-Xshell6"><a href="#远程登录-Linux-Xshell6" class="headerlink" title="远程登录 Linux-Xshell6"></a>远程登录 Linux-Xshell6</h4></li><li>说明: Xshell 是目前最好的远程登录到 Linux 操作的软件，流畅的速度并且完美解决了中文乱码的问题， 是目前程序员首选的软件。</li><li>Xshell 是一个强大的安全终端模拟软件，它支持 SSH1, SSH2, 以及 Microsoft Windows 平台的 TELNET 协议。 </li><li>Xshell 可以在 Windows 界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的<h4 id="Xshell-下载-安装-配置和使用"><a href="#Xshell-下载-安装-配置和使用" class="headerlink" title="Xshell-下载-安装-配置和使用:"></a>Xshell-下载-安装-配置和使用:</h4></li><li>下载 free-for-home-school 版本 </li><li>地址: <a href="https://www.netsarang.com/en/free-for-home-school/">https://www.netsarang.com/en/free-for-home-school/</a><h4 id="远程上传下载文件-Xftp6"><a href="#远程上传下载文件-Xftp6" class="headerlink" title="远程上传下载文件-Xftp6"></a>远程上传下载文件-Xftp6</h4></li><li>是一个基于 windows 平台的功能强大的 SFTP、FTP 文件传输软件。使用了 Xftp 以后，windows 用户能安全地 在 UNIX/Linux 和 Windows PC 之间传输文件。<br><img src="https://ftp.bmp.ovh/imgs/2021/07/a32b1dfd807bd85b.png"><h3 id="Vi-和-Vim-编辑器"><a href="#Vi-和-Vim-编辑器" class="headerlink" title="Vi 和 Vim 编辑器"></a>Vi 和 Vim 编辑器</h3><h4 id="vi-和-vim-的基本介绍"><a href="#vi-和-vim-的基本介绍" class="headerlink" title="vi 和 vim 的基本介绍"></a>vi 和 vim 的基本介绍</h4></li><li>Linux 系统会内置 vi </li><li>文本编辑器 Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。 代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。<h4 id="vi-和-vim-常用的三种模式"><a href="#vi-和-vim-常用的三种模式" class="headerlink" title="vi 和 vim 常用的三种模式"></a>vi 和 vim 常用的三种模式</h4></li><li>正常模式 以 vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中， 你可以使用『上下左右』按键来 移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、粘贴』来处理你的文件数 据</li><li>插入模式 按下 i, I, o, O, a, A, r, R 等任何一个字母之后才会进入编辑模式, 一般来说按 i 即可.</li><li>命令行模式 输入 esc 再输入：在这个模式当中， 可以提供你相关指令，完成读取、存盘、替换、离开 vim 、显 示行号等的动作则是在此模式中达成的！<h4 id="vi-和-vim-基本使用"><a href="#vi-和-vim-基本使用" class="headerlink" title="vi 和 vim 基本使用"></a>vi 和 vim 基本使用</h4><img src="https://ftp.bmp.ovh/imgs/2021/07/a85982cfa09fe0ad.png"><h4 id="vi-和-vim-快捷键"><a href="#vi-和-vim-快捷键" class="headerlink" title="vi 和 vim 快捷键"></a>vi 和 vim 快捷键</h4></li><li>拷贝当前行 yy , 拷贝当前行向下的 5 行 5yy，并粘贴（输入 p）。 </li><li>删除当前行 dd , 删除当前行向下的 5 行 5dd </li><li>在文件中查找某个单词 [命令行下 /关键字 ， 回车 查找 , 输入 n 就是查找下一个 ] </li><li>设置文件的行号，取消文件的行号.[命令行下 : set nu 和 :set nonu] </li><li>编辑 /etc/profile 文件，在一般模式下, 使用快捷键到该文档的最末行[G]和最首行[gg] </li><li>在一个文件中输入 “hello” ,在一般模式下, 然后又撤销这个动作 u 7) 编辑 /etc/profile 文件，在一般模式下, 并将光标移动到 , 输入 20,再输入 shift+g </li><li>更多的看整理的文档 </li><li>快捷键的键盘对应图<br><img src="https://ftp.bmp.ovh/imgs/2021/07/518d024f777fd436.png"><h3 id="开机、重启和用户登录注销"><a href="#开机、重启和用户登录注销" class="headerlink" title="开机、重启和用户登录注销"></a>开机、重启和用户登录注销</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4></li><li>shutdown –h now 立该进行关机 </li><li>shudown -h 1 “hello, 1 分钟后会关机了” </li><li>shutdown –r now 现在重新启动计算机 </li><li>halt 关机，作用和上面一样. </li><li>reboot 现在重新启动计算机 </li><li>sync 把内存的数据同步到磁盘.<h4 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h4></li><li>不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中 </li><li>目前的 shutdown/reboot/halt 等命令均已经在关机前进行了 sync ， 老韩提醒: 小心驶得万年船<h4 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h4></li><li>登录时尽量少用 root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录 后再用”su - 用户名’命令来切换成系统管理员身份. </li><li>在提示符下输入 logout 即可注销用户</li><li>logout 注销指令在图形运行级别无效，在运行级别 3 下有效<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个 账号，然后以这个账号的身份进入系统<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4></li></ol><ul><li>基本语法</li></ul><ol><li>useradd 用户名，</li></ol><ul><li>细节说明 </li></ul><ol><li>当创建用户成功后，会自动的创建和用户同名的家目录</li><li>也可以通过 useradd -d 指定目录 新的用户名，给新创建的用户指定家目录<h4 id="指定-修改密码"><a href="#指定-修改密码" class="headerlink" title="指定/修改密码"></a>指定/修改密码</h4></li></ol><ul><li>基本语法</li></ul><ol><li>passwd 用户名</li></ol><ul><li>应用案例</li></ul><ol><li>passwd milan </li><li>补充，显示当前用户所在的目录 pwd<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4></li></ol><ul><li>基本语法</li></ul><ol><li>userdel 用户名</li></ol><ul><li>应用案例</li></ul><ol><li>删除用户 milan，但是要保留家目录, userdel milan </li><li>删除用户以及用户主目录, 比如 tom, userdel -r tom</li></ol><ul><li>细节说明</li></ul><ol><li>一般情况下保留家目录<h4 id="查询用户信息指令"><a href="#查询用户信息指令" class="headerlink" title="查询用户信息指令"></a>查询用户信息指令</h4></li></ol><ul><li>基本语法</li></ul><ol><li>id 用户名</li></ol><ul><li>细节</li></ul><ol><li>当用户不存在时，返回无此用户<h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4></li></ol><ul><li>介绍 </li></ul><ol><li>在操作 Linux 中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如 root </li></ol><ul><li>基本语法 </li></ul><ol><li>su - 切换用户名 </li></ol><ul><li>应用实例 </li></ul><ol><li>创建一个用户 jack, ，指定密码，然后切换到 jack </li></ol><ul><li>细节说明 </li></ul><ol><li> 从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。 </li><li>当需要返回到原来用户时，使用 exit/logout 指令<h4 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h4>who am i/whoami<h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4></li></ol><ul><li>介绍</li></ul><ol><li>类似于角色，系统可以对有共性/权限的多个用户进行统一的管理</li></ol><ul><li>新增组 指令 : groupadd 组名</li><li>删除组 指令(基本语法)： groupdel 组名 </li><li>案例演示 </li></ul><ol><li>增加用户时直接加上组 </li><li>指令(基本语法) : useradd –g 用户组 用户名 </li><li>增加一个用户 zwj, 直接将他指定到 wudang </li><li>groupadd wudang </li><li>useradd -g wudang zwj</li></ol><ul><li>修改用户的组 </li></ul><ol><li>指令(基本语法)：usermod –g 用户组 用户名 </li><li>案例演示 创建一个组 mojiao 把 zwj 放入到 mojiao 指令: usermod -g mojiao zw<h4 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h4></li></ol><ul><li>/etc/passwd 文件 </li></ul><ol><li>用户（user）的配置文件，记录用户的各种信息 </li><li>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录 Shell </li></ol><ul><li>/etc/shadow 文件 </li></ul><ol><li>口令的配置文件 </li><li>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志 </li></ol><ul><li>/etc/group 文件 </li></ul><ol><li>组(group)的配置文件，记录 Linux 包含的组的信息 </li><li>每行含义：组名:口令:组标识号:组内用户列表</li></ol><h3 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h3><h4 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h4><ul><li>基本介绍 运行级别说明： </li></ul><p>0 ：关机 </p><p>1 ：单用户【找回丢失密码】 </p><p>2：多用户状态没有网络服务 </p><p>3：多用户状态有网络服务 </p><p>4：系统未使用保留给用户 </p><p>5：图形界面 </p><p>6：系统重启 </p><p>常用运行级别是 3 和 5 ，也可以指定默认运行级别， 后面演示 </p><ul><li>应用实例 </li></ul><ol><li>命令：init [0123456] </li><li>应用案例： 通过 init 来切换不同的运行级别，比如动 5-3 ， 然后关机。 </li></ol><ul><li>CentOS7 后运行级别说明<br>在 centos7 以前， /etc/inittab 文件中 . 进行了简化 ，如下: </li></ul><ol><li>multi-user.target: analogous to runlevel 3 </li><li>graphical.target: analogous to runlevel 5 </li><li>‘#’(注意没有‘’) To view current default target, run: </li><li>systemctl get-default </li><li>‘#’(注意没有‘’) To set a default target, run: </li><li>systemctl set-default TARGET.target<h4 id="找回-root-密码（看另一篇博文）"><a href="#找回-root-密码（看另一篇博文）" class="headerlink" title="找回 root 密码（看另一篇博文）"></a>找回 root 密码（看另一篇博文）</h4><h4 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h4></li></ol><ul><li>man 获得帮助信息 </li></ul><ol><li>基本语法：man [命令或配置文件]（功能描述：获得帮助信息） </li><li>案例：查看 ls 命令的帮助信息 man ls </li><li>在 linux 下，隐藏文件是以 .开头 , 选项可以组合使用 比如 ls -al, 比如 ls -al /root </li></ol><ul><li>help 指令 </li></ul><ol><li>基本语法：help 命令 （功能描述：获得 shell 内置命令的帮助信息） </li></ol><ul><li>百度帮助更直接 如果英语不太好的，也可以直接百度靠谱。<h3 id="实用指令-文件目录类"><a href="#实用指令-文件目录类" class="headerlink" title="实用指令-文件目录类"></a>实用指令-文件目录类</h3><h4 id="pwd-指令"><a href="#pwd-指令" class="headerlink" title="pwd 指令"></a>pwd 指令</h4></li><li>基本语法 ：pwd (功能描述：显示当前工作目录的绝对路径)<h4 id="ls-指令"><a href="#ls-指令" class="headerlink" title="ls 指令"></a>ls 指令</h4></li><li>基本语法：ls [选项] [目录或是文件] </li><li>常用选项 </li></ul><ol><li>-a ：显示当前目录所有的文件和目录，包括隐藏的。 </li><li>-l ：以列表的方式显示信息<h4 id="cd-指令"><a href="#cd-指令" class="headerlink" title="cd 指令"></a>cd 指令</h4></li></ol><ul><li>基本语法：cd [参数] (功能描述：切换到指定目录) </li><li>理解：绝对路径和相对路径</li><li>cd ~ 或者 cd ：回到自己的家目录, 比如 你是 root ， </li><li>cd ~ 到 /root cd .. 回到当前目录的上一级目录</li><li>应用实例</li></ul><ol><li>1：使用绝对路径切换到 root 目录 ， cd /root </li><li>2: 使用相对路径到/root 目录, 比如在 /home/tom , cd ../../root 案例 </li><li>3：表示回到当前目录的上一级目录 , cd .. 案例 </li><li>4：回到家目录 , cd ~<h4 id="mkdir-指令"><a href="#mkdir-指令" class="headerlink" title="mkdir 指令"></a>mkdir 指令</h4></li></ol><ul><li>mkdir 指令用于创建目录 </li><li>基本语法：mkdir [选项] 要创建的目录 </li><li>常用选项 -p ：创建多级目录 </li><li>应用实例 </li></ul><p>案例 1:创建一个目录 /home/dog mkdir /home/dog </p><p>案例 2:创建多级目录 /home/animal/tiger </p><p>mkdir -p /home/animal/tiger </p><h4 id="rmdir-指令删除空目录"><a href="#rmdir-指令删除空目录" class="headerlink" title="rmdir 指令删除空目录"></a>rmdir 指令删除空目录</h4><ul><li> 基本语法rmdir [选项] 要删除的空目录 </li><li>应用实例案例:删除一个目录 /home/dog </li><li>使用细节rmdir 删除的是空目录，如果目录下有内容时无法删除的。 提示：如果需要删除非空目录，需要使用 rm -rf 要删除的目录 比如： rm -rf /home/animal<h4 id="touch-指令"><a href="#touch-指令" class="headerlink" title="touch 指令 \"></a>touch 指令 \</h4></li><li>touch 指令创建空文件 </li><li>基本语法</li></ul><p>touch 文件名称 </p><ul><li>应用实例 案例: 在/home 目录下 ， 创建一个空文件 hello.txt<h4 id="cp-指令"><a href="#cp-指令" class="headerlink" title="cp 指令"></a>cp 指令</h4></li><li>cp 指令拷贝文件到指定目录 </li><li>基本语法 cp [选项] source dest </li><li>常用选项 -r ：递归复制整个文件夹 </li><li>应用实例 </li></ul><p>案例 1: 将 /home/hello.txt 拷贝到 /home/bbb 目录下 cp hello.txt /home/bbb </p><p>案例 2: 递归复制整个文件夹，举例, 比如将 /home/bbb 整个目录， 拷贝到 /opt cp -r /home/bbb /opt </p><ul><li>使用细节 强制覆盖不提示的方法：\cp , \cp -r /home/bbb /opt<h4 id="rm-指令"><a href="#rm-指令" class="headerlink" title="rm 指令"></a>rm 指令</h4></li><li>说明：rm 指令移除文件或目录 </li><li>基本语法</li></ul><ol><li>rm [选项] 要删除的文件或目录 </li></ol><ul><li>常用选项 </li></ul><ol><li>-r ：递归删除整个文件夹 </li><li>-f ： 强制删除不提示 </li></ol><ul><li>应用实例 </li></ul><p>案例 1: 将 /home/hello.txt 删除 , rm /home/hello.txt </p><p>案例 2: 递归删除整个文件夹 /home/bbb , rm -rf /home/bbb [删除整个文件夹，不提示] </p><ul><li>使用细节 强制删除不提示的方法：带上 -f 参数即可<h4 id="mv-指令"><a href="#mv-指令" class="headerlink" title="mv 指令"></a>mv 指令</h4></li><li>mv 移动文件与目录或重命名 </li><li>基本语法 </li></ul><ol><li>mv oldNameFile newNameFile (功能描述：重命名) </li><li>mv /temp/movefile /targetFolder (功能描述：移动文件) </li></ol><ul><li>应用实例</li></ul><p>案例 1: 将 /home/cat.txt 文件 重新命名为 pig.txt </p><p>案例 2:将 /home/pig.txt 文件 移动到 /root 目录下 </p><p>案例 3: 移动整个目录 , 比如将 /opt/bbb 移动到 /home 下 mv /opt/bbb /home/ </p><h4 id="cat-指令"><a href="#cat-指令" class="headerlink" title="cat 指令"></a>cat 指令</h4><ul><li>cat 查看文件内容 </li><li>基本语法</li></ul><ol><li>cat [选项] 要查看的文件 </li></ol><ul><li>常用选项 -n ：显示行号 </li><li>应用实例 </li></ul><p>案例 1: /etc/profile 文件内容，并显示行号 </p><ul><li>使用细节 </li></ul><ol><li>cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令 | more </li><li>cat -n /etc/profile | more [进行交互]<h4 id="more-指令"><a href="#more-指令" class="headerlink" title="more 指令"></a>more 指令</h4></li></ol><ul><li>more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more 指令中内置了若 干快捷键(交互的指令)，详见操作说明 </li><li>基本语法 </li></ul><ol><li>more 要查看的文件 </li><li>操作说明，如图<br><img src="https://ftp.bmp.ovh/imgs/2021/07/4a4cedfead7e5b01.png"><h4 id="less-指令"><a href="#less-指令" class="headerlink" title="less 指令"></a>less 指令</h4></li></ol><ul><li>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有 较高的效率。 </li><li> 基本语法 </li></ul><ol><li>less 要查看的文件 </li><li>操作说明<br><img src="https://ftp.bmp.ovh/imgs/2021/07/7fba1a3a1630c75d.png"><h4 id="echo-指令"><a href="#echo-指令" class="headerlink" title="echo 指令"></a>echo 指令</h4></li></ol><ul><li>echo 输出内容到控制台 </li><li>基本语法 echo [选项] [输出内容] </li><li>应用实例 </li></ul><p>案例: 使用 echo 指令输出环境变量, 比如输出 $PATH $HOSTNAME, echo $HOSTNAME</p><h4 id="head-指令"><a href="#head-指令" class="headerlink" title="head 指令"></a>head 指令</h4><ul><li>head 用于显示文件的开头部分内容，默认情况下 head 指令显示文件的前 10 行内容 </li><li>基本语法 </li></ul><ol><li>head 文件 (功能描述：查看文件头 10 行内容) </li><li>head -n 5 文件 (功能描述：查看文件头 5 行内容，5 可以是任意行数) </li></ol><ul><li>应用实例 </li></ul><p>案例: 查看/etc/profile 的前面 5 行代码 head -n 5 /etc/profile</p><h4 id="tail-指令"><a href="#tail-指令" class="headerlink" title="tail 指令"></a>tail 指令</h4><ul><li>tail 用于输出文件中尾部的内容，默认情况下 tail 指令显示文件的前 10 行内容。 </li><li> 基本语法 </li></ul><ol><li>tail 文件 （功能描述：查看文件尾 10 行内容） </li><li>tail -n 5 文件 （功能描述：查看文件尾 5 行内容，5 可以是任意行数） </li><li>tail -f 文件 （功能描述：实时追踪该文档的所有更新） </li></ol><ul><li>应用实例 </li></ul><p>案例 1: 查看/etc/profile 最后 5 行的代码 tail -n 5 /etc/profile </p><p>案例 2: 实时监控 mydate.txt , 看看到文件有变化时，是否看到， 实时的追加 hello,world tail -f /home/mydate.txt</p><h4 id="gt-指令-和-gt-gt-指令"><a href="#gt-指令-和-gt-gt-指令" class="headerlink" title="&gt; 指令 和 &gt;&gt; 指令"></a>&gt; 指令 和 &gt;&gt; 指令</h4><ul><li><blockquote><p>输出重定向和 &gt;&gt; 追加</p></blockquote></li><li>基本语法 </li></ul><ol><li>ls -l &gt;文件 （功能描述：列表的内容写入文件 a.txt 中（覆盖写）） </li><li>ls -al &gt;&gt;文件 （功能描述：列表的内容追加到文件 aa.txt 的末尾） </li><li>cat 文件 1 &gt; 文件 2 （功能描述：将文件 1 的内容覆盖到文件 2） </li><li>echo “内容”&gt;&gt; 文件 (追加) </li></ol><ul><li>应用实例 </li></ul><p>案例 1: 将 /home 目录下的文件列表 写入到 /home/info.txt 中, 覆盖写入 ls -l /home &gt; /home/info.txt [如果 info.txt 没有，则会创建] </p><p>案例 2: 将当前日历信息 追加到 /home/mycal 文件中 </p><p>指令为： cal &gt;&gt; /home/mycal</p><h4 id="ln-指令"><a href="#ln-指令" class="headerlink" title="ln 指令"></a>ln 指令</h4><ul><li>软链接也称为符号链接，类似于 windows 里的快捷方式，主要存放了链接其他文件的路径 </li><li>基本语法 ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接） </li><li>应用实例 </li></ul><p>案例 1: 在/home 目录下创建一个软连接 myroot，连接到 /root 目录 ln -s /root /home/myroot </p><p>案例 2: 删除软连接 myroot rm /home/myroot </p><ul><li>细节说明 当我们使用 pwd 指令查看目录时，仍然看到的是软链接所在目录<h4 id="history-指令"><a href="#history-指令" class="headerlink" title="history 指令"></a>history 指令</h4></li><li>查看已经执行过历史命令,也可以执行历史指令 </li><li>基本语法 history （功能描述：查看已经执行过历史命令） </li><li>应用实例 </li></ul><p>案例 1: 显示所有的历史命令 history </p><p>案例 2: 显示最近使用过的 10 个指令。 history 10 </p><p>案例 3：执行历史编号为 5 的指令 </p><p>!5</p><h3 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h3><h4 id="date-指令-显示当前日期"><a href="#date-指令-显示当前日期" class="headerlink" title="date 指令-显示当前日期"></a>date 指令-显示当前日期</h4><ul><li>基本语法 </li></ul><ol><li>date （功能描述：显示当前时间） </li><li>date +%Y（功能描述：显示当前年份） </li><li>date +%m（功能描述：显示当前月份） </li><li>date +%d （功能描述：显示当前是哪一天） </li><li>date “+%Y-%m-%d %H:%M:%S”（功能描述：显示年月日时分秒） </li></ol><ul><li>应用实例 </li></ul><p>案例 1: 显示当前时间信息 date </p><p>案例 2: 显示当前时间年月日 date “+%Y-%m-%d</p><p>案例 3: 显示当前时间年月日时分秒 date “+%Y-%m-%d %H:%M:%S”(特殊格式，可不能乱写)</p><h4 id="date-指令-设置日期"><a href="#date-指令-设置日期" class="headerlink" title="date 指令-设置日期"></a>date 指令-设置日期</h4><ul><li>基本语法 date -s 字符串时间 </li><li>应用实例<br>案例 1: 设置系统当前时间 ， 比如设置成 2020-11-03 20:02:10 date -s “2020-11-03 20:02:10” <h4 id="cal-指令"><a href="#cal-指令" class="headerlink" title="cal 指令"></a>cal 指令</h4></li><li>查看日历指令 cal </li><li>基本语法 cal [选项] （功能描述：不加选项，显示本月日历） </li><li>应用实例 </li></ul><p>案例 1: 显示当前日历 cal </p><p>案例 2: 显示 2020 年日历 : cal 2020</p><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><h4 id="find-指令"><a href="#find-指令" class="headerlink" title="find 指令"></a>find 指令</h4><ul><li>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。 </li><li>基本语法 find [搜索范围] [选项] </li><li>选项说明<br><img src="https://ftp.bmp.ovh/imgs/2021/07/c65238e78ea090f1.png"></li><li>应用实例 </li></ul><p>案例 1: 按文件名：根据名称查找/home 目录下的 hello.txt 文件 </p><p>find /home -name hello.txt </p><p>案例 2：按拥有者：查找/opt 目录下，用户名称为 nobody 的文件 </p><p>find /opt -user nobody </p><p>案例 3：查找整个 linux 系统下大于 200M 的文件（+n 大于 -n 小于 n 等于, 单位有 k,M,G） </p><p>find / -size +200M</p><h4 id="locate-指令"><a href="#locate-指令" class="headerlink" title="locate 指令"></a>locate 指令</h4><ul><li>locate 指令可以快速定位文件路径。locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速 定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更 新 locate 时刻 </li><li>基本语法 locate 搜索文件 </li><li>特别说明 由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库。 </li><li>应用实例 </li></ul><p>案例 1: 请使用 locate 指令快速定位 hello.txt 文件所在目录 </p><p>which 指令，可以查看某个指令在哪个目录下，比如 ls 指令在哪个目录 </p><p>which ls</p><h4 id="grep-指令和-管道符号"><a href="#grep-指令和-管道符号" class="headerlink" title="grep 指令和 管道符号 |"></a>grep 指令和 管道符号 |</h4><p><img src="https://ftp.bmp.ovh/imgs/2021/07/60958e235720e4e1.png"></p><h3 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h3><h4 id="gzip-gunzip-指令"><a href="#gzip-gunzip-指令" class="headerlink" title="gzip/gunzip 指令"></a>gzip/gunzip 指令</h4><ul><li>gzip 用于压缩文件， gunzip 用于解压的 </li><li>基本语法 </li><li>gzip 文件 （功能描述：压缩文件，只能将文件压缩为*.gz 文件） </li><li>gunzip 文件.gz （功能描述：解压缩文件命令） </li><li>应用实例 </li></ul><p>案例 1: gzip 压缩， 将 /home 下的 hello.txt 文件进行压缩</p><p>gzip /home/hello.txt </p><p>案例 2: gunzip 压缩， 将 /home 下的 hello.txt.gz 文件进行解压缩 </p><p>gunzip /home/hello.txt.gz</p><h4 id="zip-unzip"><a href="#zip-unzip" class="headerlink" title="zip/unzip"></a>zip/unzip</h4><ul><li>指令 zip 用于压缩文件， unzip 用于解压的，这个在项目打包发布中很有用的 </li><li> 基本语法 zip [选项] XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令） </li><li>unzip [选项] XXX.zip （功能描述：解压缩文件） </li><li>zip 常用选项 -r：递归压缩，即压缩目录 </li><li>unzip 的常用选项 -d&lt;目录&gt; ：指定解压后文件的存放目录 </li><li>应用实例 </li></ul><p>案例 1: 将 /home 下的 所有文件/文件夹进行压缩成 myhome.zip </p><p>zip -r myhome.zip /home/ [将 home 目录及其包含的文件和子文件夹都压缩] </p><p>案例 2: 将 myhome.zip 解压到 /opt/tmp 目录下 </p><p>mkdir /opt/tmp </p><p>unzip -d /opt/tmp /home/myhome.zip</p><h4 id="tar-指令"><a href="#tar-指令" class="headerlink" title="tar 指令"></a>tar 指令</h4><ul><li>tar 指令 是打包指令，最后打包后的文件是 .tar.gz 的文件。</li><li>基本语法 tar [选项] XXX.tar.gz 打包的内容 (功能描述：打包目录，压缩后的文件格式.tar.gz) </li><li>选项说明<br><img src="https://ftp.bmp.ovh/imgs/2021/07/6a0b5c342f8cd803.png"></li><li> 应用实例 </li></ul><p>案例 1: 压缩多个文件，将 /home/pig.txt 和 /home/cat.txt 压缩成 pc.tar.gz </p><p>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt </p><p>案例 2: 将/home 的文件夹 压缩成 myhome.tar.gz </p><p>tar -zcvf myhome.tar.gz /home/ </p><p>案例 3: 将 pc.tar.gz 解压到当前目录 </p><p>tar -zxvf pc.tar.gz </p><p>案例4: 将myhome.tar.gz 解压到 /opt/tmp2目录下 </p><p>(1) mkdir /opt/tmp2 </p><p>(2) tar -zxvf /home/myhome.tar.gz -C /opt/tmp2</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=434902428&auto=1&height=66"></iframe>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;linux入门&quot;&gt;&lt;a href=&quot;#linux入门&quot; class=&quot;headerlink&quot; title=&quot;linux入门&quot;&gt;&lt;/a&gt;linux入门&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>StringBuffer 类常见方法</title>
    <link href="http://example.com/2021/06/22/StringBuffer%20%E7%B1%BB%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/06/22/StringBuffer%20%E7%B1%BB%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</id>
    <published>2021-06-22T08:17:16.000Z</published>
    <updated>2021-06-22T08:21:29.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StringBuffer-类常见方法"><a href="#StringBuffer-类常见方法" class="headerlink" title="StringBuffer 类常见方法"></a>StringBuffer 类常见方法</h1><span id="more"></span><p><img src="https://i.loli.net/2021/06/22/ewMhVdbDGu7AJkU.png"><br><img src="https://i.loli.net/2021/06/22/usijIvDAZxyXa2W.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;StringBuffer-类常见方法&quot;&gt;&lt;a href=&quot;#StringBuffer-类常见方法&quot; class=&quot;headerlink&quot; title=&quot;StringBuffer 类常见方法&quot;&gt;&lt;/a&gt;StringBuffer 类常见方法&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>String常用方法</title>
    <link href="http://example.com/2021/06/22/String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/06/22/String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-06-22T07:02:32.000Z</published>
    <updated>2021-06-22T07:18:54.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h1><span id="more"></span><p><img src="https://i.loli.net/2021/06/22/2gLhzsjVBSoOiM5.png"><br><img src="https://i.loli.net/2021/06/22/wNl8B5oUe63tXYK.png"><br><img src="https://i.loli.net/2021/06/22/2sz9FlVcRLOEZbo.png"><br><img src="https://i.loli.net/2021/06/22/qwlI1Gm7zVckPC8.png"><br><img src="https://i.loli.net/2021/06/22/hzCraFUS9ZoLMqj.png"><br><img src="https://i.loli.net/2021/06/22/ahQewN3fS7Tvq4j.png"><br><img src="https://i.loli.net/2021/06/22/xsiTwz7QBPUWRe4.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;String常用方法&quot;&gt;&lt;a href=&quot;#String常用方法&quot; class=&quot;headerlink&quot; title=&quot;String常用方法&quot;&gt;&lt;/a&gt;String常用方法&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SuppressWarning 中的属性介绍以及属性说明</title>
    <link href="http://example.com/2021/06/17/@SuppressWarning%20%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2021/06/17/@SuppressWarning%20%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E/</id>
    <published>2021-06-17T07:12:30.000Z</published>
    <updated>2021-06-20T09:51:17.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SuppressWarning-中的属性介绍以及属性说明"><a href="#SuppressWarning-中的属性介绍以及属性说明" class="headerlink" title="@SuppressWarning 中的属性介绍以及属性说明"></a>@SuppressWarning 中的属性介绍以及属性说明</h1><span id="more"></span><ul><li>all，抑制所有警告</li><li>boxing，抑制与封装/拆装作业相关的警告</li><li>cast，抑制与强制转型作业相关的警告</li><li>dep-ann，抑制与淘汰注释相关的警告</li><li>deprecation，抑制与淘汰的相关警告</li><li>fallthrough，抑制与switch陈述式中遗漏break相关的警告</li><li>finally，抑制与未传回finally区块相关的警告</li><li>hiding，抑制与隐藏变数的区域变数相关的警告</li><li>incomplete-switch，抑制与switch陈述式(enum case)中遗漏项目相关的警告</li><li>javadoc，抑制与javadoc相关的警告</li><li>nls，抑制与非nls字串文字相关的警告</li><li>null，抑制与空值分析相关的警告</li><li>rawtypes，抑制与使用raw类型相关的警告</li><li>resource，抑制与使用Closeable类型的资源相关的警告</li><li>restriction，抑制与使用不建议或禁止参照相关的警告</li><li>serial，抑制与可序列化的类别遗漏serialVersionUID栏位相关的警告</li><li>static-access，抑制与静态存取不正确相关的警告</li><li>static-method，抑制与可能宣告为static的方法相关的警告</li><li>super，抑制与置换方法相关但不含super呼叫的警告</li><li>synthetic-access，抑制与内部类别的存取未最佳化相关的警告</li><li>sync-override，抑制因为置换同步方法而遗漏同步化的警告</li><li>unchecked，抑制与未检查的作业相关的警告</li><li>unqualified-field-access，抑制与栏位存取不合格相关的警告</li><li>unused，抑制与未用的程式码及停用的程式码相关的警告</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SuppressWarning-中的属性介绍以及属性说明&quot;&gt;&lt;a href=&quot;#SuppressWarning-中的属性介绍以及属性说明&quot; class=&quot;headerlink&quot; title=&quot;@SuppressWarning 中的属性介绍以及属性说明&quot;&gt;&lt;/a&gt;@SuppressWarning 中的属性介绍以及属性说明&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java自学完成项目</title>
    <link href="http://example.com/2021/06/05/java%E8%87%AA%E5%AD%A6%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2021/06/05/java%E8%87%AA%E5%AD%A6%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-06-05T01:57:52.000Z</published>
    <updated>2021-08-04T14:17:53.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java自学完成项目"><a href="#Java自学完成项目" class="headerlink" title="Java自学完成项目"></a>Java自学完成项目</h1><span id="more"></span><h1 id="《《文章很长，目录在右下角》》"><a href="#《《文章很长，目录在右下角》》" class="headerlink" title="《《文章很长，目录在右下角》》"></a>《《文章很长，目录在右下角》》</h1><h2 id="零钱通（oop版）"><a href="#零钱通（oop版）" class="headerlink" title="零钱通（oop版）"></a>零钱通（oop版）</h2><ul><li>package com.javacode.smallchangesys.OOP;</li></ul><p>public class SmallChangeSysAPP {</p><pre><code>public static void main(String[] args) &#123;    new SmallChangeSysOOP().mainMenu();&#125;</code></pre><p>}</p><ul><li>package com.javacode.smallchangesys.OOP;</li></ul><p>import java.text.SimpleDateFormat;</p><p>import java.util.Date;</p><p>import java.util.Scanner;</p><p>public class SmallChangeSysOOP {</p><pre><code>Scanner scanner = new Scanner(System.in);//根据功能需求，定义变量String key = &quot;&quot;;//明细变量String details = (&quot;\n -----------------零钱通明细----------------&quot;);//收益变量double money;double balance = 0;Date date = null;SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);//消费变量String note = &quot;&quot;;boolean loop = true;public void mainMenu() &#123;    do&#123;        System.out.println(&quot;---------零钱通菜单---------&quot;);        System.out.println(&quot;\t\t1.零钱通明细&quot;);        System.out.println(&quot;\t\t2.收益入账&quot; );        System.out.println(&quot;\t\t3.消费&quot;);        System.out.println(&quot;\t\t4.退出&quot;);        System.out.println(&quot;---------------------------&quot;);        System.out.print(&quot;请选择你要执行的操作1-4: &quot;);        key = scanner.next();        //利用分支结构，做出功能选择        switch(key)&#123;            case &quot;1&quot;:                this.details();                break;            case &quot;2&quot;:                this.income();                break;            case &quot;3&quot;:                this.pey();                break;            case &quot;4&quot;:                this.exit();                break;            default:                System.out.println(&quot;你输入的有误，请重新输入&quot;);        &#125;    &#125;while(loop);    System.out.println(&quot;你已经退出&quot;);&#125;public void details() &#123;    System.out.println(details);&#125;public void income() &#123;    System.out.println(&quot;收益入账金额:&quot;);    money = scanner.nextDouble();    //应该有金钱校验    if (money &lt;= 0) &#123;        System.out.println(&quot;你需要输入大于零的金额&quot;);        return;    &#125;    date = new Date();    balance += money;    details += &quot;\n收益入账\t&quot; + money + &quot;\t&quot; + sdf.format(date) + &quot;\t&quot; + &quot;余额：&quot; + balance;&#125;public void pey() &#123;    System.out.println(&quot;消费金额&quot;);    money = scanner.nextDouble();    //金钱校验    if (money &lt;= 0 || money &gt; balance) &#123;        System.out.println(&quot;你消费的金额需在0-&quot; + balance);        return;    &#125;    System.out.println(&quot;消费原因&quot;);    note = scanner.next();    date = new Date();    balance -= money;    details += &quot;\n&quot; + note + &quot;\t-&quot; + money + &quot;\t&quot; + sdf.format(date) + &quot;\t&quot; + &quot;余额：&quot; + balance;&#125;public void exit() &#123;    //提示是否退出    //1)判断输入是否有误    String choice = &quot;&quot;;    while (true) &#123;        System.out.println(&quot;确定退出？ y/n&quot;);        choice = scanner.next();        if (&quot;y&quot;.equals(choice) || &quot;n&quot;.equals(choice)) &#123;            break;        &#125;    &#125;    //  2）判断输入y/n    if (&quot;y&quot;.equals(choice)) &#123;        loop = false;    &#125;&#125;</code></pre><p>}</p><h2 id="房屋出租系统（工具类Utility）"><a href="#房屋出租系统（工具类Utility）" class="headerlink" title="房屋出租系统（工具类Utility）"></a>房屋出租系统（工具类Utility）</h2><p>package com.ljq.house;</p><p>import com.ljq.house.view.HouseView;</p><p>public class HouseApp {</p><pre><code>public static void main(String[] args) &#123;    new HouseView().mainMenu();    System.out.println(&quot;你退出了~&quot;);&#125;</code></pre><p>}</p><p>package com.ljq.house.view;</p><p>import com.ljq.house.domain.House;<br>import com.ljq.house.service.HouseService;<br>import com.ljq.house.utils.Utility;</p><p>/**</p><ul><li>1.显示主菜单</li><li>2.提供用户输入</li><li>3.调用HouseService实现各种操作</li></ul><p>*/</p><p>public class HouseView {</p><pre><code>//显示主菜单的变量private boolean loop = true;//控制主菜单循环private char key = &#39; &#39;;//用户输入//房屋列表变量private HouseService houseService = new HouseService(10);//设置数组大小//根据id查找对象，并进行修改public void updateHouse() &#123;    System.out.println(&quot;============修改房屋信息============&quot;);    System.out.print(&quot;请输入你要修改的房屋id（-1表示退出）&quot;);    int updateId = Utility.readInt();    if (updateId == -1) &#123;        System.out.println(&quot;===========放弃修改房屋信息===========&quot;);        return;    &#125;    House house = houseService.lookup(updateId);    if (house != null) &#123;        System.out.print(&quot;姓名（&quot; + house.getName() + &quot;）：&quot;);        //如果用户不修改，直接回车，默认&quot;&quot;，下面同理        String name = Utility.readString(6, &quot;&quot;);        if (!&quot;&quot;.equals(name)) &#123;//name不是默认，进行修改,下面同理            house.setName(name);        &#125;        System.out.print(&quot;电话（&quot; + house.getPhone() + &quot;）：&quot;);        String phone = Utility.readString(16, &quot;&quot;);        if (!&quot;&quot;.equals(phone)) &#123;            house.setPhone(phone);        &#125;        System.out.print(&quot;地址（&quot; + house.getAddress() + &quot;）：&quot;);        String address = Utility.readString(24, &quot;&quot;);        if (!&quot;&quot;.equals(address)) &#123;            house.setAddress(address);        &#125;        System.out.print(&quot;租金（&quot; + house.getMonthly() + &quot;）：&quot;);        String monthly = Utility.readString(10, &quot;&quot;);        if (!&quot;&quot;.equals(monthly)) &#123;            house.setMonthly(monthly);        &#125;        System.out.print(&quot;状态（未出租/已出租）（&quot; + house.getState() + &quot;）：&quot;);        String state = Utility.readString(5, &quot;&quot;);        if (!&quot;&quot;.equals(state)) &#123;            house.setState(state);        &#125;        System.out.println(&quot;==============修改成功=============&quot;);    &#125; else &#123;        System.out.println(&quot;===========修改的房屋不存在===========&quot;);    &#125;&#125;//编写lookupId方法，接收输入id，调用lookup方法查找public void lookupId() &#123;    System.out.println(&quot;=============查找房屋=============&quot;);    System.out.print(&quot;请输入你要查找的id&quot;);    int lookupId = Utility.readInt();    if (houseService.lookup(lookupId) != null) &#123;        System.out.println(&quot;=============查找成功=============&quot;);    &#125; else &#123;        System.out.println(&quot;=============查找失败=============&quot;);    &#125;&#125;//实现退出确认public void exit() &#123;    //利用工具类    char c = Utility.readConfirmSelection();    if (c == &#39;Y&#39;) &#123;        loop = false;    &#125;&#125;//编写delHouse方法，接受要输入的id，调用Service中的del方法public void delHouse() &#123;    System.out.println(&quot;=============删除房屋=============&quot;);    System.out.print(&quot;请输入需要删除房屋的编号（-1退出）：&quot;);    int delId = Utility.readInt();    if (delId == -1) &#123;        System.out.println(&quot;==========你退出了房屋删除==========&quot;);        return;    &#125;    //该方法有循环判断的逻辑，不输入Y或N出不来    char choice = Utility.readConfirmSelection();    if (choice == &#39;Y&#39;) &#123;//真的删除，调用del方法        if (houseService.del(delId)) &#123;            System.out.println(&quot;==========删除房屋成功==========&quot;);        &#125; else &#123;            System.out.println(&quot;=======删除失败，房屋不存在=======&quot;);        &#125;    &#125; else &#123;        System.out.println(&quot;==========你退出了房屋删除==========&quot;);    &#125;&#125;//编写addHouse，接收输入，创建新对象，调用add方法public void addHouse() &#123;    System.out.println(&quot;\n=============添加房屋=============&quot;);    System.out.print(&quot;姓名：&quot;);    String name = Utility.readString(8);    System.out.print(&quot;电话：&quot;);    String phone = Utility.readString(16);    System.out.print(&quot;地址：&quot;);    String address = Utility.readString(24);    System.out.print(&quot;月租：&quot;);    String monthly = Utility.readString(10);    System.out.print(&quot;状态(未出租/已出租)：&quot;);    String state = Utility.readString(5);    House house = new House(0, name, phone, address, monthly, state);    if (houseService.add(house)) &#123;        System.out.println(&quot;=============添加房屋成功=============&quot;);    &#125; else &#123;        System.out.println(&quot;=============添加房屋失败=============&quot;);    &#125;&#125;//显示主菜单的方法public void mainMenu() &#123;    do &#123;        System.out.println(&quot;===========房屋出租系统============&quot;);        System.out.println(&quot;\t\t\t1.新增房源&quot;);        System.out.println(&quot;\t\t\t2.查找房屋&quot;);        System.out.println(&quot;\t\t\t3.删除房屋&quot;);        System.out.println(&quot;\t\t\t4.修改房屋信息&quot;);        System.out.println(&quot;\t\t\t5.房屋列表&quot;);        System.out.println(&quot;\t\t\t6.退   出&quot;);        System.out.print(&quot;请输入你的选择（1-6）：&quot;);        key = Utility.readChar();        switch (key) &#123;            case &#39;1&#39;:                addHouse();                break;            case &#39;2&#39;:                lookupId();                break;            case &#39;3&#39;:                delHouse();                break;            case &#39;4&#39;:                updateHouse();                break;            case &#39;5&#39;:                listHouse();                break;            case &#39;6&#39;:                exit();                break;        &#125;    &#125; while (loop);&#125;//房屋列表public void listHouse() &#123;    House[] house = houseService.list();//得到所有数组信息    System.out.println(&quot;\n=============房屋列表=============&quot;);    System.out.println(&quot;编号\t\t房主\t\t电话\t\t地址\t\t月租\t\t状态（未出租/已出租）&quot;);    for (int i = 0; i &lt; house.length; i++) &#123;        if (house[i] == null) &#123;            break;        &#125;        System.out.println(house[i]);    &#125;    System.out.println(&quot;==========房屋列表显示结束=========&quot;);&#125;</code></pre><p>}</p><p>package com.ljq.house.service;</p><p>import com.ljq.house.domain.House;</p><p>public class HouseService {</p><pre><code>private House[] house;private int houseNums = 1;private int idCounter = 1;public HouseService(int size) &#123;    house = new House[size];//size指定数组大小    house[0] = new House(1, &quot;jack&quot;, &quot;404&quot;, &quot;新城区&quot;, &quot;3000&quot;, &quot;未出租&quot;);&#125;//编写lookup方法public House lookup(int lookupId) &#123;    int index = -1;    for (int i = 0; i &lt; houseNums; i++) &#123;        if (i == lookupId - 1) &#123;            index = i;            System.out.println(house[i]);        &#125;    &#125;    if (index == -1) &#123;        System.out.println(&quot;没有找到此id&quot;);        return null;    &#125;    return house[index];&#125;//编写del方法public boolean del(int delId) &#123;    int index = -1;//索引值    //找到删除房屋编号的对应下标    for (int i = 0; i &lt; houseNums; i++) &#123;        if (delId == house[i].getId()) &#123;            index = i;        &#125;    &#125;    if (index == -1) &#123;//证明了删除房屋不存在        return false;    &#125;    //将被删除的这个坑填上，    for (int i = index; i &lt; houseNums - 1; i++) &#123;        house[i] = house[i + 1];    &#125;    //将最后一个置空6    house[--houseNums] = null;    return true;&#125;//编写add方法，添加新对象，返回boolean值public boolean add(House newHouse) &#123;    //判断是否可以添加    if (houseNums == house.length) &#123;        System.out.println(&quot;你的数组已经满了。。。。&quot;);        return false;    &#125;    //把newHouse加入到新增加的一个房屋    house[houseNums++] = newHouse;    newHouse.setId(++idCounter);    return true;&#125;//编写list方法，返回数组public House[] list() &#123;    return house;&#125;</code></pre><p>}</p><p>package com.ljq.house.domain;</p><p>/**</p><ul><li>House表示一个房屋信息</li></ul><p>*/</p><p>public class House {</p><pre><code>//编号 房主 电话 地址 月租 状态(未出租/已出租private int id;private String name;private String phone;private String address;private String monthly;private String state;public House(int id, String name, String phone, String address, String monthly, String state) &#123;    this.id = id;    this.name = name;    this.phone = phone;    this.address = address;    this.monthly = monthly;    this.state = state;&#125;@Overridepublic String toString() &#123;    return  id +            &quot;\t\t&quot; + name +            &quot;\t&quot; + phone +            &quot;\t\t&quot; + address +            &quot;\t&quot; + monthly +            &quot;\t&quot; + state ;&#125;public int getId() &#123;    return id;&#125;public void setId(int id) &#123;    this.id = id;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public String getPhone() &#123;    return phone;&#125;public void setPhone(String phone) &#123;    this.phone = phone;&#125;public String getAddress() &#123;    return address;&#125;public void setAddress(String address) &#123;    this.address = address;&#125;public String getMonthly() &#123;    return monthly;&#125;public void setMonthly(String monthly) &#123;    this.monthly = monthly;&#125;public String getState() &#123;    return state;&#125;public void setState(String state) &#123;    this.state = state;&#125;</code></pre><p>}</p><h2 id="坦克大战"><a href="#坦克大战" class="headerlink" title="坦克大战"></a>坦克大战</h2><p>package com.ljq.tank03;</p><p>import jdk.nashorn.internal.ir.CallNode;</p><p>import javax.swing.*;<br>import java.awt.event.WindowAdapter;<br>import java.awt.event.WindowEvent;<br>import java.util.Scanner;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li><li>窗口</li></ul><p>*/</p><p>public class LjqTankGame03 extends JFrame {</p><pre><code>MyPanel mp =null;//定义面板属性static Scanner scanner = new Scanner(System.in);public static void main(String[] args) &#123;    LjqTankGame03 ljqTankGame01 = new LjqTankGame03();&#125;public LjqTankGame03()&#123;    System.out.println(&quot;请输入你的选择：1，开始新的游戏/2，继续上局游戏&quot;);    String key = scanner.next();    mp = new MyPanel(key);//面板    new Thread(mp).start();    this.add(mp);//添加画板到窗口    this.setSize(1350,750);//窗口大小    this.addKeyListener(mp);    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//退出    this.setVisible(true);//可视化    //在JFrame中增加相应的关闭窗口的处理    this.addWindowListener(new WindowAdapter() &#123;        @Override        public void windowClosing(WindowEvent e) &#123;            Recorder.keepRecorder();            System.exit(0);        &#125;    &#125;);&#125;</code></pre><p>}</p><p>public class Tank {</p><pre><code>boolean isLive = true;private int x;private int y;private int direction = 0;//方向《上下左右=0123》private int speed = 3;//速度，默认为1public Tank(int x, int y) &#123;    this.x = x;    this.y = y;&#125;public void moveUp()&#123;    y-=speed;&#125;public void moveDown()&#123;    y+=speed;&#125;public void moveLeft()&#123;    x-=speed;&#125;public void moveRight()&#123;    x+=speed;&#125;public int getDirection() &#123;    return direction;&#125;public void setDirection(int direction) &#123;    this.direction = direction;&#125;public int getSpeed() &#123;    return speed;&#125;public void setSpeed(int speed) &#123;    this.speed = speed;&#125;public int getX() &#123;    return x;&#125;public void setX(int x) &#123;    this.x = x;&#125;public int getY() &#123;    return y;&#125;public void setY(int y) &#123;    this.y = y;&#125;</code></pre><p>}</p><p>public class MyTank extends Tank{</p><pre><code>Shot shot = null;//可以发射多颗子弹（集合）Vector&lt;Shot&gt; shots = new Vector&lt;&gt;();public MyTank(int x, int y) &#123;    super(x, y);&#125;//因为是我放坦克的子弹，所以放在这//向敌人发射子弹的方法public void shotEnemyTank()&#123;    //控制一下，每次最多五枚子弹    if(shots.size() &gt; 5)&#123;        return;    &#125;    //射向敌人时方向不同    switch (getDirection()) &#123;        case 0://车身向上            shot = new Shot(getX() + 18, getY() - 5, 0);            break;        case 1://车身向右            shot = new Shot(getX() + 55, getY() + 28, 1);            break;        case 2://车身向下            shot = new Shot(getX() + 18, getY() + 65, 2);            break;        case 3://车身向左            shot = new Shot(getX() - 15, getY() + 28, 3);            break;    &#125;    //把新建的shot放到shots中    shots.add(shot);    //启动线程    new Thread(shot).start();&#125;</code></pre><p>}</p><p>public class EnemyTank extends Tank implements Runnable{</p><pre><code>boolean isLive = true;//敌人的子弹Vector&lt;Shot&gt; shots = new Vector&lt;&gt;();//增加成员，可以得到敌人坦克的VectorVector&lt;EnemyTank&gt; enemyTanks = new Vector&lt;&gt;();public EnemyTank(int x, int y) &#123;    super(x, y);&#125;//这里提供一个方法，可以将MyPanel中的敌人坦克集合拿过来public void setEnemyTanks(Vector&lt;EnemyTank&gt; enemyTanks) &#123;    this.enemyTanks = enemyTanks;&#125;public boolean isCollision()&#123;    switch(this.getDirection())&#123;        case 0://上            //让当前坦克和所有坦克比较（循环）            for (int i = 0; i &lt; enemyTanks.size(); i++) &#123;                //取出一个                EnemyTank enemyTank = enemyTanks.get(i);                //不能和自己比较                if(this != enemyTank)&#123;                    //如果敌人坦克是上/下                    //敌方坦克的取值范围x[enemyTank.getX()   enemyTank.getX() + 40]                    //               y[enemyTank.getY()   enemyTank.getY() + 60]                    if(enemyTank.getDirection() == 0 || enemyTank.getDirection() == 2)&#123;                        //左上角坐标 [this.getX()   this.getY()]                        if(this.getX() &gt;= enemyTank.getX()                                &amp;&amp; this.getX() &lt;= enemyTank.getX() + 40                                &amp;&amp; this.getY() &gt;= enemyTank.getY()                                &amp;&amp; this.getY() &lt;= enemyTank.getY() + 60)&#123;                            return true;                        &#125;                        //右上角坐标 [this.getX() + 40   this.getY()]                        if(this.getX() + 40 &gt;= enemyTank.getX()                                &amp;&amp; this.getX() + 40 &lt;= enemyTank.getX() + 40                                &amp;&amp; this.getY() &gt;= enemyTank.getY()                                &amp;&amp; this.getY() &lt;= enemyTank.getY() + 60)&#123;                            return true;                        &#125;                    &#125;                    //如果敌人坦克是左/右                    //敌方坦克的取值范围x[enemyTank.getX()   enemyTank.getX() + 50]                    //               y[enemyTank.getY()   enemyTank.getY() + 50]                    if(enemyTank.getDirection() == 1 || enemyTank.getDirection() == 3)&#123;                        //左上角坐标 [this.getX()   this.getY()]                        if(this.getX() &gt;= enemyTank.getX()                                &amp;&amp; this.getX() &lt;= enemyTank.getX() + 50                                &amp;&amp; this.getY() &gt;= enemyTank.getY()                                &amp;&amp; this.getY() &lt;= enemyTank.getY() + 50)&#123;                            return true;                        &#125;                        //右上角坐标 [this.getX() + 40   this.getY()]                        if(this.getX() + 40 &gt;= enemyTank.getX()                                &amp;&amp; this.getX() + 40 &lt;= enemyTank.getX() + 50                                &amp;&amp; this.getY() &gt;= enemyTank.getY()                                &amp;&amp; this.getY() &lt;= enemyTank.getY() + 50)&#123;                            return true;                        &#125;                    &#125;                &#125;            &#125;            break;        case 1://右            //让当前坦克和所有坦克比较（循环）            for (int i = 0; i &lt; enemyTanks.size(); i++) &#123;                //取出一个                EnemyTank enemyTank = enemyTanks.get(i);                //不能和自己比较                if(this != enemyTank)&#123;                    //如果敌人坦克是上/下                    //敌方坦克的取值范围x[enemyTank.getX()   enemyTank.getX() + 40]                    //               y[enemyTank.getY()   enemyTank.getY() + 60]                    if(enemyTank.getDirection() == 0 || enemyTank.getDirection() == 2)&#123;                        //右上角坐标 [this.getX() + 50   this.getY()]                        if(this.getX() + 50 &gt;= enemyTank.getX()                                &amp;&amp; this.getX() + 50 &lt;= enemyTank.getX() + 40                                &amp;&amp; this.getY() &gt;= enemyTank.getY()                                &amp;&amp; this.getY() &lt;= enemyTank.getY() + 60)&#123;                            return true;                        &#125;                        //右下角坐标 [this.getX() + 50   this.getY() + 50]                        if(this.getX() + 50 &gt;= enemyTank.getX()                                &amp;&amp; this.getX() + 50 &lt;= enemyTank.getX() + 40                                &amp;&amp; this.getY() + 50 &gt;= enemyTank.getY()                                &amp;&amp; this.getY() + 50 &lt;= enemyTank.getY() + 60)&#123;                            return true;                        &#125;                    &#125;                    //如果敌人坦克是左/右                    //敌方坦克的取值范围x[enemyTank.getX()   enemyTank.getX() + 50]                    //               y[enemyTank.getY()   enemyTank.getY() + 50]                    if(enemyTank.getDirection() == 1 || enemyTank.getDirection() == 3)&#123;                        //右上角坐标 [this.getX() + 50   this.getY()]                        if(this.getX() + 50 &gt;= enemyTank.getX()                                &amp;&amp; this.getX() + 50 &lt;= enemyTank.getX() + 50                                &amp;&amp; this.getY() &gt;= enemyTank.getY()                                &amp;&amp; this.getY() &lt;= enemyTank.getY() + 50)&#123;                            return true;                        &#125;                        //右下角坐标 [this.getX() + 50   this.getY() + 50]                        if(this.getX() + 50 &gt;= enemyTank.getX()                                &amp;&amp; this.getX() + 50 &lt;= enemyTank.getX() + 50                                &amp;&amp; this.getY() + 50 &gt;= enemyTank.getY()                                &amp;&amp; this.getY() + 50 &lt;= enemyTank.getY() + 50)&#123;                            return true;                        &#125;                    &#125;                &#125;            &#125;            break;        case 2://下            //让当前坦克和所有坦克比较（循环）            for (int i = 0; i &lt; enemyTanks.size(); i++) &#123;                //取出一个                EnemyTank enemyTank = enemyTanks.get(i);                //不能和自己比较                if(this != enemyTank)&#123;                    //如果敌人坦克是上/下                    //敌方坦克的取值范围x[enemyTank.getX()   enemyTank.getX() + 40]                    //               y[enemyTank.getY()   enemyTank.getY() + 60]                    if(enemyTank.getDirection() == 0 || enemyTank.getDirection() == 2)&#123;                        //左下角坐标 [this.getX()   this.getY() + 60]                        if(this.getX() &gt;= enemyTank.getX()                                &amp;&amp; this.getX() &lt;= enemyTank.getX() + 40                                &amp;&amp; this.getY() + 60 &gt;= enemyTank.getY()                                &amp;&amp; this.getY() + 60 &lt;= enemyTank.getY() + 60)&#123;                            return true;                        &#125;                        //右下角坐标 [this.getX() + 40   this.getY() + 60]                        if(this.getX() + 40 &gt;= enemyTank.getX()                                &amp;&amp; this.getX() + 40 &lt;= enemyTank.getX() + 40                                &amp;&amp; this.getY() + 60&gt;= enemyTank.getY()                                &amp;&amp; this.getY() + 60&lt;= enemyTank.getY() + 60)&#123;                            return true;                        &#125;                    &#125;                    //如果敌人坦克是左/右                    //敌方坦克的取值范围x[enemyTank.getX()   enemyTank.getX() + 50]                    //               y[enemyTank.getY()   enemyTank.getY() + 50]                    if(enemyTank.getDirection() == 1 || enemyTank.getDirection() == 3)&#123;                        //左下角坐标 [this.getX()   this.getY() + 50]                        if(this.getX() &gt;= enemyTank.getX()                                &amp;&amp; this.getX() &lt;= enemyTank.getX() + 50                                &amp;&amp; this.getY() + 50 &gt;= enemyTank.getY()                                &amp;&amp; this.getY() + 50 &lt;= enemyTank.getY() + 50)&#123;                            return true;                        &#125;                        //右下角坐标 [this.getX() + 50   this.getY() + 50]                        if(this.getX() + 50 &gt;= enemyTank.getX()                                &amp;&amp; this.getX() + 50 &lt;= enemyTank.getX() + 50                                &amp;&amp; this.getY() + 50 &gt;= enemyTank.getY()                                &amp;&amp; this.getY() + 50 &lt;= enemyTank.getY() + 50)&#123;                            return true;                        &#125;                    &#125;                &#125;            &#125;            break;        case 3://左            //让当前坦克和所有坦克比较（循环）            for (int i = 0; i &lt; enemyTanks.size(); i++) &#123;                //取出一个                EnemyTank enemyTank = enemyTanks.get(i);                //不能和自己比较                if(this != enemyTank)&#123;                    //如果敌人坦克是上/下                    //敌方坦克的取值范围x[enemyTank.getX()   enemyTank.getX() + 40]                    //               y[enemyTank.getY()   enemyTank.getY() + 60]                    if(enemyTank.getDirection() == 0 || enemyTank.getDirection() == 2)&#123;                        //左上角坐标 [this.getX()   this.getY()]                        if(this.getX() &gt;= enemyTank.getX()                                &amp;&amp; this.getX() &lt;= enemyTank.getX() + 40                                &amp;&amp; this.getY() &gt;= enemyTank.getY()                                &amp;&amp; this.getY() &lt;= enemyTank.getY() + 60)&#123;                            return true;                        &#125;                        //左下角坐标 [this.getX()   this.getY() + 40]                        if(this.getX() &gt;= enemyTank.getX()                                &amp;&amp; this.getX() &lt;= enemyTank.getX() + 40                                &amp;&amp; this.getY() + 40 &gt;= enemyTank.getY()                                &amp;&amp; this.getY() + 40 &lt;= enemyTank.getY() + 60)&#123;                            return true;                        &#125;                    &#125;                    //如果敌人坦克是左/右                    //敌方坦克的取值范围x[enemyTank.getX()   enemyTank.getX() + 50]                    //               y[enemyTank.getY()   enemyTank.getY() + 50]                    if(enemyTank.getDirection() == 1 || enemyTank.getDirection() == 3)&#123;                        //左上角坐标 [this.getX()   this.getY()]                        if(this.getX() &gt;= enemyTank.getX()                                &amp;&amp; this.getX() &lt;= enemyTank.getX() + 50                                &amp;&amp; this.getY() &gt;= enemyTank.getY()                                &amp;&amp; this.getY() &lt;= enemyTank.getY() + 50)&#123;                            return true;                        &#125;                        //左下角坐标 [this.getX()   this.getY() + 50]                        if(this.getX() &gt;= enemyTank.getX()                                &amp;&amp; this.getX() &lt;= enemyTank.getX() + 50                                &amp;&amp; this.getY() + 50 &gt;= enemyTank.getY()                                &amp;&amp; this.getY() + 50 &lt;= enemyTank.getY() + 50)&#123;                            return true;                        &#125;                    &#125;                &#125;            &#125;            break;    &#125;    return false;&#125;@Overridepublic void run() &#123;    while(true)&#123;        //如果shots.size为零，则证明没有子弹了        //坦克不存在就不能发射        if(isLive &amp;&amp; shots.size() &lt; 1)&#123;            Shot shot = null;            switch (getDirection())&#123;                case 0://车身向上                    shot = new Shot(getX() + 18, getY() - 5, 0);                    break;                case 1://车身向右                    shot = new Shot(getX() + 55, getY() + 28, 1);                    break;                case 2://车身向下                    shot = new Shot(getX() + 18, getY() + 65, 2);                    break;                case 3://车身向左                    shot = new Shot(getX() - 15, getY() + 28, 3);                    break;            &#125;            //加子弹            shots.add(shot);            //启动线程            new Thread(shot).start();        &#125;        //让坦克根据方向移动        switch (getDirection())&#123;            case 0://向上                //走三十步                for (int i = 0; i &lt; 30; i++) &#123;                    //加一个控制条件，不扔让他跑出活动范围,下面同理                    if(getY() &gt; 0 &amp;&amp; !isCollision()) &#123;                        //父类的移动方法                        moveUp();                    &#125;                    //休眠50毫秒，不然会闪现的                    sleep50();                &#125;                break;            case 1://向右                //走三十步                for (int i = 0; i &lt; 30; i++) &#123;                    if (getX() + 70 &lt; 1000 &amp;&amp; !isCollision()) &#123;                        //父类的移动方法                        moveRight();                    &#125;                        //休眠50毫秒，不然会闪现的                    sleep50();                &#125;                break;            case 2://向下                //走三十步                for (int i = 0; i &lt; 30; i++) &#123;                    if(getY() + 110 &lt; 750 &amp;&amp; !isCollision()) &#123;                        //父类的移动方法                        moveDown();                    &#125;                        //休眠50毫秒，不然会闪现的                        sleep50();                &#125;                break;            case 3://向左                //走三十步                for (int i = 0; i &lt; 30; i++) &#123;                    if(getX() &gt; 10 &amp;&amp; !isCollision()) &#123;                        //父类的移动方法                        moveLeft();                    &#125;                    //休眠50毫秒，不然会闪现的                    sleep50();                &#125;                break;        &#125;        //随机改变坦克的方向        setDirection((int)(Math.random()*4));        //老师对我的提醒：写一个并发程序，一定要考虑线程何时结束        if (!(isLive))&#123;            break;        &#125;    &#125;&#125;public void sleep50()&#123;    try &#123;        Thread.sleep(50);    &#125; catch (InterruptedException e) &#123;        e.printStackTrace();    &#125;&#125;</code></pre><p>}</p><p>public class Shot implements Runnable {</p><pre><code>int x;//子弹的横坐标int y;//子弹的纵坐标int direction;//子弹的方向(0,1,2,3)int shotSpeed = 10;//子弹于行的速度boolean isLive = true;//线程的状态public Shot(int x, int y, int direction) &#123;    this.x = x;    this.y = y;    this.direction = direction;&#125;@Overridepublic void run() &#123;    while (true)&#123;        //子弹方向        switch (direction)&#123;            case 0://向上                y -= shotSpeed;                break;            case 1://向右                x += shotSpeed;                break;            case 2://向下                y += shotSpeed;                break;            case 3://向左                x -= shotSpeed;        &#125;        //休眠五十毫秒        try &#123;            Thread.sleep(50);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        //撞到边界结束进程（销毁子弹）        //碰到敌人坦克也应当销毁        if(!(y &gt;= 0 &amp;&amp; y &lt;= 750 &amp;&amp; x &gt;= 0 &amp;&amp; x &lt;= 1000 &amp;&amp; isLive)) &#123;            isLive = false;            break;        &#125;        //System.out.println(x + &quot; &quot; + y);    &#125;&#125;</code></pre><p>}</p><p>public class Node {</p><pre><code>private int x;private int y;private int direction;public Node(int x, int y, int direction) &#123;    this.x = x;    this.y = y;    this.direction = direction;&#125;public int getX() &#123;    return x;&#125;public void setX(int x) &#123;    this.x = x;&#125;public int getY() &#123;    return y;&#125;public void setY(int y) &#123;    this.y = y;&#125;public int getDirection() &#123;    return direction;&#125;public void setDirection(int direction) &#123;    this.direction = direction;&#125;</code></pre><p>}</p><p>public class Bomb {</p><pre><code>int x,y;//爆炸的坐标boolean isLive = true;//爆炸是否存活int life = 9;//炸弹的生命值（用于判断什么时候，用何种惨烈的图片）public Bomb(int x, int y) &#123;    this.x = x;    this.y = y;&#125;//写个方法，减少炸弹的生命值public void lifeDown()&#123;//配合出现爆炸效果    if(life &gt; 0)&#123;        life--;    &#125;else&#123;        isLive = false;    &#125;&#125;</code></pre><p>}</p><p>public class MyPanel extends JPanel implements KeyListener, Runnable {</p><pre><code>//获得爆炸图片Image image1 = null;Image image2 = null;Image image3 = null;MyTank mt = null;//爆炸，初始化一个集合//说明：当子弹接触到坦克时，则加入一个bomb对象到bombs中去Vector&lt;Bomb&gt; bombs = new Vector&lt;&gt;();//敌人的坦克，未来有很多，所以用集合，多线程，所以用VectorVector&lt;EnemyTank&gt; enemyTanks = new Vector&lt;&gt;();//定义一个存放node的Vector，用于回复敌人坦克的位置和方向Vector&lt;Node&gt; nodes = new Vector&lt;&gt;();int enemyTanksSize = 6;//敌人的个数（3）public MyPanel(String key) &#123;    //判断文件是否存在    //如果存在正常执行，如果不存在，提示，且key = 1    File file = new File(Recorder.getRecordFile());    if(file.exists()) &#123;        nodes = Recorder.getNodesAndEnemyTankRec();    &#125;else&#123;        System.out.println(&quot;文件不存在，只能开启新的游戏&quot;);        key = &quot;1&quot;;    &#125;    //将MyPanel类的enemyTanks 传给Recorder的enemyTanks    Recorder.setEnemyTanks(enemyTanks);    mt = new MyTank(500, 630);//初始化自己的坦克    switch(key)&#123;        case &quot;1&quot;:            //敌人坦克            for(int i = 0;i &lt; enemyTanksSize; i++)&#123;                //初始化敌人的坦克                EnemyTank enemyTank = new EnemyTank(150 * (i + 1), 0);                //enemyTanks集合放入敌人坦克类的集合中                enemyTank.setEnemyTanks(enemyTanks);                //敌人的方向                enemyTank.setDirection(2);                //开始敌人坦克的线程，让他能动                new Thread(enemyTank).start();                //给enemyTank加一子弹                Shot shot = new Shot(enemyTank.getX() + 18,enemyTank.getY() + 65,enemyTank.getDirection());                //加入到enemyTank的shots中去                enemyTank.shots.add(shot);                //启动shot线程                new Thread(shot).start();                enemyTanks.add(enemyTank);            &#125;            break;        case &quot;2&quot;://继续上局游戏            //敌人坦克            for(int i = 0;i &lt; nodes.size(); i++)&#123;                Node node = nodes.get(i);                //初始化敌人的坦克                EnemyTank enemyTank = new EnemyTank(node.getX(), node.getY());                //enemyTanks集合放入敌人坦克类的集合中                enemyTank.setEnemyTanks(enemyTanks);                //敌人的方向                enemyTank.setDirection(node.getDirection());                //开始敌人坦克的线程，让他能动                new Thread(enemyTank).start();                //给enemyTank加一子弹                Shot shot = new Shot(enemyTank.getX() + 18,enemyTank.getY() + 65,enemyTank.getDirection());                //加入到enemyTank的shots中去                enemyTank.shots.add(shot);                //启动shot线程                new Thread(shot).start();                enemyTanks.add(enemyTank);            &#125;            break;        default:            System.out.println(&quot;你的输入有误&quot;);            break;    &#125;    image1 = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(&quot;/bomb_1.gif&quot;));    image2 = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(&quot;/bomb_2.gif&quot;));    image3 = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(&quot;/bomb_3.gif&quot;));    new AePlayWave(&quot;src\\111.wav&quot;).start();&#125;public void showInfo(Graphics g)&#123;    //更改画笔颜色    g.setColor(Color.BLACK);    Font font = new Font(&quot;宋体&quot;, Font.BOLD, 25);    //更改字体    g.setFont(font);    g.drawString(&quot;您累计击毁敌方坦克：&quot;,1020,30);    drawTank(1020,60,g,0,1);    g.setColor(Color.BLACK);    g.drawString(Recorder.allEnemyTankNum + &quot;&quot;,1080,100);&#125;@Overridepublic void paint(Graphics g) &#123;    super.paint(g);    //背景    g.fillRect(0, 0, 1000, 750);    showInfo(g);    //判断我方坦克是否存活    if(mt != null &amp;&amp; mt.isLive ) &#123;        //画坦克--封装        this.drawTank(mt.getX(), mt.getY(), g, mt.getDirection(), 0);    &#125;    //画我的子弹--封装(老师写的没封装，可能这块太简单吧=。=)    //发射多颗子弹    for(int i = 0; i &lt; mt.shots.size(); i++)&#123;        Shot shot = mt.shots.get(i);        if (shot != null &amp;&amp; shot.isLive)&#123;            this.drawShot(shot.x,shot.y,g);        &#125;else&#123;            mt.shots.remove(shot);        &#125;    &#125;    //画敌人的坦克    for(int i = 0; i &lt; enemyTanks.size();i++)&#123;        EnemyTank enemyTank = enemyTanks.get(i);        if(enemyTank.isLive ) &#123;//判断当前坦克是否还存活            this.drawTank(enemyTank.getX(), enemyTank.getY(), g, enemyTank.getDirection(), 1);            //画敌人的子弹（我也不封装了，麻烦=。=）            //遍历shots集合，画子弹；            for (int j = 0; j &lt; enemyTank.shots.size(); j++) &#123;                //得到集合中的shot                Shot shot = enemyTank.shots.get(j);                //画敌人子弹                if (shot.isLive) &#123;                    g.fill3DRect(shot.x, shot.y, 4, 4, false);                &#125; else &#123;                    enemyTank.shots.remove(shot);                &#125;            &#125;        &#125;    &#125;    //画爆炸（如果集合中有，就画出来）    for (int i = 0;i &lt; bombs.size(); i++)&#123;        //取出炸弹        Bomb bomb = bombs.get(i);        //根据life，画出不同的爆炸效果        if(bomb.life &gt; 6) &#123;            g.drawImage(image1, bomb.x, bomb.y, 60, 60, this);        &#125;else if(bomb.life &gt; 3)&#123;            g.drawImage(image2, bomb.x, bomb.y, 60, 60, this);        &#125;else if(bomb.life &gt; 0)&#123;            g.drawImage(image3, bomb.x, bomb.y, 60, 60, this);        &#125;        //让炸弹的生命值减少        bomb.lifeDown();        //如果爆炸不存在，就删除这个对象        if(bomb.life == 0)&#123;            bombs.remove(bomb);        &#125;    &#125;&#125;/** * @param x         坦克的横坐标 * @param y         坦克的纵坐标 * @param g         画笔 * @param direction 坦克的方向 * @param type      坦克的类型 */public void drawTank(int x, int y, Graphics g, int direction, int type) &#123;    //类型不同    switch (type) &#123;        case 0://我们的坦克（粉红战神）            g.setColor(Color.pink);            break;        case 1://敌人的坦克（绿油油怪）            g.setColor(Color.GREEN);            break;    &#125;    //方向不同    switch (direction) &#123;        case 0://向上            g.fill3DRect(x, y, 10, 60, false);//左边轮子            g.fill3DRect(x + 30, y, 10, 60, false);//右边轮子            g.fill3DRect(x + 10, y + 15, 20, 30, false);//车身            g.fillOval(x + 10, y + 20, 20, 20);//车盖            g.fill3DRect(x + 19, y - 5, 2, 35, false);//炮筒            break;        case 1://向右            //我把坦克调成中心旋转的，老师的不是（强迫症），下同理            x = x - 10;            y = y + 10;            g.fill3DRect(x, y, 60, 10, false);//左边轮子            g.fill3DRect(x, y + 30, 60, 10, false);//右边轮子            g.fill3DRect(x + 15, y + 10, 30, 20, false);//车身            g.fillOval(x + 20, y + 10, 20, 20);//车盖            g.fill3DRect(x + 30, y + 19, 35, 2, false);//炮筒            break;        case 2://向下            g.fill3DRect(x, y, 10, 60, false);//左边轮子            g.fill3DRect(x + 30, y, 10, 60, false);//右边轮子            g.fill3DRect(x + 10, y + 15, 20, 30, false);//车身            g.fillOval(x + 10, y + 20, 20, 20);//车盖            g.fill3DRect(x + 19, y + 30, 2, 35, false);//炮筒            break;        case 3://向左            x = x - 10;            y = y + 10;            g.fill3DRect(x, y, 60, 10, false);//左边轮子            g.fill3DRect(x, y + 30, 60, 10, false);//右边轮子            g.fill3DRect(x + 15, y + 10, 30, 20, false);//车身            g.fillOval(x + 20, y + 10, 20, 20);//车盖            g.fill3DRect(x - 5, y + 19, 35, 2, false);//炮筒            break;    &#125;&#125;public void drawShot(int x,int y,Graphics g)&#123;    g.setColor(Color.white);    g.fill3DRect(x,y,4,4,false);&#125;//从敌方坦克的集合中取出子弹（此处处理和老师的不一样）public void hitMyTank(MyTank mt)&#123;    //先取出敌方坦克    for (int i = 0; i &lt; enemyTanks.size(); i++)&#123;        EnemyTank enemyTank = enemyTanks.get(i);        //再取出敌方坦克中的shots集合中的shot对象        for(int j = 0; j &lt; enemyTank.shots.size(); j++)&#123;            Shot shot = enemyTank.shots.get(j);            //只有在我方坦克存活且敌方子弹存活才进行判断            if(mt.isLive &amp;&amp; shot.isLive) &#123;                hitTank(shot, mt);            &#125;        &#125;    &#125;&#125;//我再建一个方法//从我的坦克子弹集合取出子弹（此处处理和老师的不一样）public void hitEnemyTank(EnemyTank enemyTank)&#123;    for (int i = 0; i &lt; mt.shots.size(); i++)&#123;        Shot shot = mt.shots.get(i);        hitTank(shot,enemyTank);    &#125;&#125;//编写一个方法，判断我方子弹是否击中敌方坦克//这个方法在MyPanel线程run中判断最合理public void hitTank(Shot shot,Tank tank)&#123;    switch (tank.getDirection())&#123;        case 0:        case 2:            if(shot.x &gt; tank.getX() &amp;&amp; shot.x &lt; tank.getX() + 40            &amp;&amp; shot.y &gt;tank.getY() &amp;&amp; shot.y &lt; tank.getY() + 60)&#123;                shot.isLive = false;                tank.isLive = false;                //创建bomb对象，加入到bombs集合中                Bomb bomb = new Bomb(tank.getX(), tank.getY());                bombs.add(bomb);                //被击中了，要在集合中去掉这个坦克。                enemyTanks.remove(tank);                //坦克被击中了，就让allEnemyTankNum++                //因为，这里有自己坦克被击毁也会++                //所以，加一个判断                if(tank instanceof EnemyTank)&#123;                    Recorder.addAllEnemyTankNum();                &#125;            &#125;            break;        case 1:        case 3:            if(shot.x &gt; tank.getX()-10 &amp;&amp; shot.x &lt; tank.getX() + 50            &amp;&amp; shot.y &gt; tank.getY() + 10 &amp;&amp; shot.y &lt; tank.getY() + 50)&#123;                shot.isLive = false;                tank.isLive = false;                //创建bomb对象，加入到bombs集合中                Bomb bomb = new Bomb(tank.getX(), tank.getY());                bombs.add(bomb);                //被击中了，要在集合中去掉这个坦克。                enemyTanks.remove(tank);                //坦克被击中了，就让allEnemyTankNum++                //因为，这里有自己坦克被击毁也会++                //所以，加一个判断                if(tank instanceof EnemyTank)&#123;                    Recorder.addAllEnemyTankNum();                &#125;            &#125;    &#125;&#125;@Overridepublic void keyTyped(KeyEvent e) &#123;&#125;@Overridepublic void keyPressed(KeyEvent e) &#123;    if (e.getKeyCode() == KeyEvent.VK_W) &#123;//按下w        mt.setDirection(0);        //限制条件，不让自己的坦克跑出范围，下同理        if(mt.getY() &gt; 0)&#123;            mt.moveUp();        &#125;    &#125; else if (e.getKeyCode() == KeyEvent.VK_D) &#123;//按下d        mt.setDirection(1);        if(mt.getX() + 70 &lt; 1000) &#123;            mt.moveRight();        &#125;    &#125; else if (e.getKeyCode() == KeyEvent.VK_S) &#123;//按下s        mt.setDirection(2);        if(mt.getY() + 110 &lt; 750) &#123;            mt.moveDown();        &#125;    &#125; else if (e.getKeyCode() == KeyEvent.VK_A) &#123;//按下a        mt.setDirection(3);        if (mt.getX() &gt; 10) &#123;            mt.moveLeft();        &#125;    &#125;    //如果按下J键，    if(e.getKeyCode() == KeyEvent.VK_J)&#123;</code></pre><p>//            //一颗子弹销毁后，才可以发射下一颗子弹，（加一个条件）<br>//            if(mt.shot == null || !(mt.shot.isLive)) {<br>//                //调用我方发射子弹的方法<br>//                mt.shotEnemyTank();<br>//<br>//            }<br>            mt.shotEnemyTank();</p><pre><code>    &#125;    this.repaint();&#125;@Overridepublic void keyReleased(KeyEvent e) &#123;&#125;@Overridepublic void run() &#123;    while (true)&#123;        //调用方法，判断是否有敌方坦克被击中        if(mt.shot !=null &amp;&amp; mt.shot.isLive)&#123;//如果自己的子弹还存活就判断            for (int i = 0; i &lt; enemyTanks.size();i++)&#123;                EnemyTank enemyTank = enemyTanks.get(i);//取出一个敌方坦克                hitEnemyTank(enemyTank);            &#125;        &#125;        //调用方法，判断是否有己方坦克被击中        hitMyTank(mt);        //让这个面板没过100毫秒刷新一次        try &#123;            Thread.sleep(100);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        this.repaint();    &#125;&#125;</code></pre><p>}</p><p>public class Recorder {</p><pre><code>//定义变量，纪录被销毁敌人坦克的数量public static int allEnemyTankNum = 0;//定义io流对象，准备写入信息到文件public static BufferedWriter bw = null;public static BufferedReader br = null;public static String recordFile = &quot;src\\myRecord.txt&quot;;//写一个属性，用于接收敌人坦克public static Vector&lt;EnemyTank&gt; enemyTanks = null;//定义一个Node的Vector，用于保存敌人的nodeprivate static Vector&lt;Node&gt; nodes = new Vector&lt;&gt;();public static void setEnemyTanks(Vector&lt;EnemyTank&gt; enemyTanks) &#123;    Recorder.enemyTanks = enemyTanks;&#125;//返回记录游戏的目录public static String getRecordFile()&#123;    return recordFile;&#125;//写一个方法，由于读取recordFile文件//该方法在继续上局游戏的时候启动public static Vector&lt;Node&gt; getNodesAndEnemyTankRec()&#123;    try &#123;        br = new BufferedReader(new FileReader(recordFile));        //读取一下上轮击毁坦克的数量        allEnemyTankNum = Integer.parseInt(br.readLine());        //循环读取，创建nodes集合        String readLin = &quot;&quot; ;        while ((readLin = br.readLine()) != null)&#123;            String[] xyd = readLin.split(&quot; &quot;);            Node node = new Node(Integer.parseInt(xyd[0]), Integer.parseInt(xyd[1]), Integer.parseInt(xyd[2]));            nodes.add(node);        &#125;    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        try &#123;            if(br != null)&#123;                br.close();            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    return nodes;&#125;//写一个方法，在退出时保存public static void keepRecorder()&#123;    try &#123;        bw = new BufferedWriter(new FileWriter(recordFile));        bw.write(allEnemyTankNum + &quot;\r\n&quot;);        //遍历敌人坦克的Vector,然后根据情况保存就行        //OOP,定义一个属性，通过set方法,得到敌人坦克的集合        for (int i = 0; i &lt; enemyTanks.size(); i++) &#123;            //取出坦克            EnemyTank enemyTank = enemyTanks.get(i);            if(enemyTank.isLive)&#123;//建议判断（理论可以不用）                //需要保存到                String record = enemyTank.getX() + &quot; &quot; + enemyTank.getY() + &quot; &quot; + enemyTank.getDirection();                //保存                bw.write(record + &quot;\r\n&quot;);            &#125;        &#125;    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        if(bw != null)&#123;            try &#123;                bw.close();            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;public static int getAllEnemyTankNum() &#123;    return allEnemyTankNum;&#125;public static void setAllEnemyTankNum(int allEnemyTankNum) &#123;    Recorder.allEnemyTankNum = allEnemyTankNum;&#125;//当我们击毁一个坦克的时候，allEnemyTankNum++public static void addAllEnemyTankNum()&#123;    Recorder.allEnemyTankNum++;&#125;</code></pre><p>}</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java自学完成项目&quot;&gt;&lt;a href=&quot;#Java自学完成项目&quot; class=&quot;headerlink&quot; title=&quot;Java自学完成项目&quot;&gt;&lt;/a&gt;Java自学完成项目&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>IDEA怎样进入源码</title>
    <link href="http://example.com/2021/06/04/IEDAdebug%E6%80%8E%E6%A0%B7%E8%BF%9B%E5%85%A5%E6%BA%90%E7%A0%81/"/>
    <id>http://example.com/2021/06/04/IEDAdebug%E6%80%8E%E6%A0%B7%E8%BF%9B%E5%85%A5%E6%BA%90%E7%A0%81/</id>
    <published>2021-06-04T01:27:18.000Z</published>
    <updated>2021-06-04T01:28:23.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA怎样进入源码"><a href="#IDEA怎样进入源码" class="headerlink" title="IDEA怎样进入源码"></a>IDEA怎样进入源码</h1><span id="more"></span><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p><img src="https://i.loli.net/2021/06/04/KosSGFqPUYOmIfw.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IDEA怎样进入源码&quot;&gt;&lt;a href=&quot;#IDEA怎样进入源码&quot; class=&quot;headerlink&quot; title=&quot;IDEA怎样进入源码&quot;&gt;&lt;/a&gt;IDEA怎样进入源码&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>IDEA如何查看JDK源码</title>
    <link href="http://example.com/2021/06/03/IDEA%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8BJDK%E6%BA%90%E7%A0%81/"/>
    <id>http://example.com/2021/06/03/IDEA%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8BJDK%E6%BA%90%E7%A0%81/</id>
    <published>2021-06-03T01:18:11.000Z</published>
    <updated>2021-06-03T01:19:57.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA如何查看JDK源码"><a href="#IDEA如何查看JDK源码" class="headerlink" title="IDEA如何查看JDK源码"></a>IDEA如何查看JDK源码</h1><span id="more"></span><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p><img src="https://i.loli.net/2021/06/03/kGwKDtZ4humA9zy.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IDEA如何查看JDK源码&quot;&gt;&lt;a href=&quot;#IDEA如何查看JDK源码&quot; class=&quot;headerlink&quot; title=&quot;IDEA如何查看JDK源码&quot;&gt;&lt;/a&gt;IDEA如何查看JDK源码&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Javadoc</title>
    <link href="http://example.com/2021/05/27/javadoc/"/>
    <id>http://example.com/2021/05/27/javadoc/</id>
    <published>2021-05-27T02:21:53.000Z</published>
    <updated>2021-05-27T02:23:10.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h1><span id="more"></span><p><img src="https://i.loli.net/2021/05/27/ruKZ6U9yqoe1MVz.png"><br><img src="https://i.loli.net/2021/05/27/AJxYDWcXh65kg1m.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;javadoc&quot;&gt;&lt;a href=&quot;#javadoc&quot; class=&quot;headerlink&quot; title=&quot;javadoc&quot;&gt;&lt;/a&gt;javadoc&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java规范</title>
    <link href="http://example.com/2021/05/27/java%E8%A7%84%E8%8C%83/"/>
    <id>http://example.com/2021/05/27/java%E8%A7%84%E8%8C%83/</id>
    <published>2021-05-27T02:21:53.000Z</published>
    <updated>2021-05-27T07:32:38.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java规范"><a href="#java规范" class="headerlink" title="java规范"></a>java规范</h1><span id="more"></span><center>**规范**</center>  <br>  <p><img src="https://i.loli.net/2021/05/27/gAaOWQFG5jK3PBh.png"></p><br>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;java规范&quot;&gt;&lt;a href=&quot;#java规范&quot; class=&quot;headerlink&quot; title=&quot;java规范&quot;&gt;&lt;/a&gt;java规范&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>IDEA使用技巧和经验</title>
    <link href="http://example.com/2021/05/27/IDEA%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E5%92%8C%E7%BB%8F%E9%AA%8C-1/"/>
    <id>http://example.com/2021/05/27/IDEA%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E5%92%8C%E7%BB%8F%E9%AA%8C-1/</id>
    <published>2021-05-27T01:57:21.000Z</published>
    <updated>2021-05-31T06:26:39.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IEDA使用技巧和经验"><a href="#IEDA使用技巧和经验" class="headerlink" title="IEDA使用技巧和经验"></a>IEDA使用技巧和经验</h1><span id="more"></span><h2 id="设置字体颜色和主题"><a href="#设置字体颜色和主题" class="headerlink" title="设置字体颜色和主题"></a>设置字体颜色和主题</h2><p><img src="https://i.loli.net/2021/05/31/Yr987t6RNFo2IMe.png"></p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ol><li>删除当前行, 默认是 ctrl + Y 自己配置 ctrl + d </li><li>复制当前行, 自己配置 ctrl + alt + 向下光标 </li><li>补全代码 alt + / </li><li>添加注释和取消注释 ctrl + / 【第一次是添加注释，第二次是取消注释】 </li><li>导入该行需要的类 先配置 auto import , 然后使用 alt+enter 即可 </li><li>快速格式化代码 ctrl + alt + L </li><li>快速运行程序 自己定义 alt + R </li><li>生成构造器等 alt + insert [提高开发效率] </li><li>查看一个类的层级关系 ctrl + H [学习继承后，非常有用] </li><li>将光标放在一个方法上，输入 ctrl + B , 可以定位到方法 [学继承后，非常有用] </li><li>自动的分配变量名 , 通过 在后面假 .var [老师最喜欢的] </li><li>还有很多其它的快捷键<h2 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h2><img src="https://i.loli.net/2021/05/31/xlMBZLRIXfNKFcj.png"> </li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IEDA使用技巧和经验&quot;&gt;&lt;a href=&quot;#IEDA使用技巧和经验&quot; class=&quot;headerlink&quot; title=&quot;IEDA使用技巧和经验&quot;&gt;&lt;/a&gt;IEDA使用技巧和经验&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>javap的使用</title>
    <link href="http://example.com/2021/05/27/javap%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/05/27/javap%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-27T01:57:21.000Z</published>
    <updated>2021-05-27T02:12:01.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javap的使用"><a href="#javap的使用" class="headerlink" title="javap的使用"></a>javap的使用</h1><span id="more"></span><ul><li>javap是JDK提供的一个命令行工具,javap能对给定的class文件提供的字节代码进行反编译。</li><li>通过它，可以对照源代码和字节码，从而了解很多编译器内部的工作,对更深入地理解如何提高程序执行的效率等问题有极大的帮助。</li><li>使用格式</li></ul><ol><li>javap 《options》 《classes》</li></ol><ul><li>常用: javap -c -v 类名</li></ul><ol><li>-help  –help  -?   ==    输出此用法消息</li><li>  -version                 版本信息</li><li>  -v  -verbose             输出附加信息</li><li> -l                       输出行号和本地变量表</li><li> -public                  仅显示公共类和成员</li><li> -protected               显示受保护的/公共类和成员</li><li>-package                 显示程序包/受保护的/公共类<pre><code>                    和成员 (默认)</code></pre></li><li> -p  -private             显示所有类和成员</li><li>-c                       对代码进行反汇编</li><li> -s                       输出内部类型签名</li><li>-sysinfo                 显示正在处理的类的<pre><code>                   系统信息 (路径, 大小, 日期, MD5 散列)</code></pre></li><li> -constants               显示最终常量</li><li> -classpath <path></path>        指定查找用户类文件的位置</li><li> -cp <path></path>               指定查找用户类文件的位置</li><li> -bootclasspath <path></path>    覆盖引导类文件的位置</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;javap的使用&quot;&gt;&lt;a href=&quot;#javap的使用&quot; class=&quot;headerlink&quot; title=&quot;javap的使用&quot;&gt;&lt;/a&gt;javap的使用&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java APV</title>
    <link href="http://example.com/2021/05/06/Java%20APV%E6%96%87%E6%A1%A3/"/>
    <id>http://example.com/2021/05/06/Java%20APV%E6%96%87%E6%A1%A3/</id>
    <published>2021-05-06T07:42:33.000Z</published>
    <updated>2021-05-27T02:11:57.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="APV"><a href="#APV" class="headerlink" title="APV"></a>APV</h1><span id="more"></span><ul><li><p>[在线]<a href="https://www.matools.com/api">https://www.matools.com/api</a></p></li><li><p><img src="https://i.loli.net/2021/05/06/COqtxkmuT5LRyJ1.png"></p></li><li><p>java类的组成形式<br><img src="https://i.loli.net/2021/05/06/JDPjilzY8v4xtLF.png"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;APV&quot;&gt;&lt;a href=&quot;#APV&quot; class=&quot;headerlink&quot; title=&quot;APV&quot;&gt;&lt;/a&gt;APV&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java自学练习及作业</title>
    <link href="http://example.com/2021/04/29/java%E8%87%AA%E5%AD%A6%E4%BD%9C%E5%93%81/"/>
    <id>http://example.com/2021/04/29/java%E8%87%AA%E5%AD%A6%E4%BD%9C%E5%93%81/</id>
    <published>2021-04-29T09:37:33.000Z</published>
    <updated>2021-08-12T11:32:13.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java自学练习及作业"><a href="#Java自学练习及作业" class="headerlink" title="Java自学练习及作业"></a>Java自学练习及作业</h1><span id="more"></span><h1 id="《《文章很长，目录在右下角》》"><a href="#《《文章很长，目录在右下角》》" class="headerlink" title="《《文章很长，目录在右下角》》"></a>《《文章很长，目录在右下角》》</h1><h1 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h3><p>//入门</p><p>public class Hello{</p><pre><code>public static void main(String[] args)&#123;    System.out.println(&quot;hello,world&quot;);&#125;</code></pre><p>}</p><h3 id="十三"><a href="#十三" class="headerlink" title="十三"></a>十三</h3><p>public class ljq{</p><pre><code>public static void main(String[] args)&#123;    System.out.println(&quot;十三 is studying java!&quot;);&#125;</code></pre><p>}</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>public class zhuanyi{</p><pre><code>public static void main(String[] args)&#123;    System.out.println(&quot;D:\\javacode&gt;java Test\n书名\t作者\t价格\t销量  \t\n三国\t罗贯中\t120\t1000&quot;);&#125;</code></pre><p>}</p><h3 id="Homework02"><a href="#Homework02" class="headerlink" title="Homework02"></a>Homework02</h3><p>public class Homework02{</p><pre><code>public static void main(String[] args)&#123;    System.out.println(&quot;姓名：桐人\n性别：男\n籍贯：忘了\n住址：忘了&quot;);&#125;</code></pre><p>}</p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="Var01"><a href="#Var01" class="headerlink" title="Var01"></a>Var01</h3><p>public class Var01{</p><pre><code>public static void main(String[] args)&#123;    int a;    a=100;    System.out.println(a);    int b = 800;    System.out.println(b);&#125;</code></pre><p>}</p><h3 id="Var02"><a href="#Var02" class="headerlink" title="Var02"></a>Var02</h3><p>public class Var02{</p><pre><code>public static void main(String[] args)&#123;    int age = 23;    double score = 99.9;    char gender = &#39;男&#39;;    String name = &quot;Ljq&quot;;    System.out.println(&quot;个人信息如下：&quot;);    System.out.println(name);    System.out.println(age);    System.out.println(score);    System.out.println(gender);&#125;</code></pre><p>}</p><h3 id="VarDebail"><a href="#VarDebail" class="headerlink" title="VarDebail"></a>VarDebail</h3><p>public class VarDetail{</p><pre><code>public static void main(String[] args)&#123;    //顺序，先声明，后使用    int a = 23;    System.out.println(a);//23    //值可以变化，同一类范围内    //a = &quot;jack&quot;;//×    a = 50;//√    System.out.println(a);//88    //变量在同一个作用域内不能重名    //int a = 77//×    &#125;</code></pre><p>}</p><p>class Dog{</p><pre><code>public static void main(String[] args)&#123;    int a = 666;&#125;</code></pre><p>}</p><h3 id="Homework01-java"><a href="#Homework01-java" class="headerlink" title="Homework01.java"></a>Homework01.java</h3><p>public class Homework01{</p><pre><code>public static void main(String[] args)&#123;    int n1;    n1 = 13;    int n2;    n2 = 17;    int n3;    n3 = n1 + n2;    System.out.println(&quot;n3 =&quot; + n3);    int n4 = 38;    int n5 = n4 -n3;    System.out.println(&quot;n5 =&quot; + n5);&#125;</code></pre><p>}</p><h3 id="Homework02-java"><a href="#Homework02-java" class="headerlink" title="Homework02.java"></a>Homework02.java</h3><p>public class Homework02{</p><pre><code>public static void main(String[] args) &#123;    char n1 = &#39;\n&#39;;    char n2 = &#39;\t&#39;;    char n3 = &#39;\r&#39;;    char n4 = &#39;\\&#39;;    char n5 = &#39;1&#39;;    char n6 = &#39;2&#39;;    char n7 = &#39;3&#39;;    System.out.println(n1);    System.out.println(n2);    System.out.println(n3);    System.out.println(n4);    System.out.println(n5);    System.out.println(n6);    System.out.println(n7);&#125;</code></pre><p>}</p><h3 id="Homework03-java"><a href="#Homework03-java" class="headerlink" title="Homework03.java"></a>Homework03.java</h3><p>public class Homework03{</p><pre><code>public static void main(String[] args)&#123;    String n1 = &quot;老人与海&quot;;    String n2 = &quot;海与老人&quot;;    System.out.println(n1 + n2);    char c1 = &#39;男&#39;;    char c2 = &#39;女&#39;;    System.out.println(c1 + c2);    int a = 33;    int b = 44;    System.out.println(a + b);&#125;</code></pre><p>}</p><h3 id="Homework04-java"><a href="#Homework04-java" class="headerlink" title="Homework04.java"></a>Homework04.java</h3><p>public class Homework04{</p><pre><code>public static void main(String[] args)&#123;    String name = &quot;刘嘉祺&quot;;    int age = 22;    double score = 99.9;    char gender = &#39;男&#39;;    String hobby = &quot;敲代码&quot;;    System.out.println(&quot;姓名\t 年龄\t 成绩\t 性别\t 爱好\n&quot; +         name + &quot;\t &quot;+ age + &quot;\t &quot;+ score + &quot;\t &quot;+ gender + &quot;\t &quot;+ hobby);&#125;</code></pre><p>}</p><h2 id="第三章-变量"><a href="#第三章-变量" class="headerlink" title="第三章 变量"></a>第三章 变量</h2><h3 id="逻辑运算符联系-Test-java"><a href="#逻辑运算符联系-Test-java" class="headerlink" title="逻辑运算符联系  Test.java"></a>逻辑运算符联系  Test.java</h3><p>public class Test {</p><pre><code>public static void main(String[] args)&#123;    int x = 5,y = 5;    if(x++ == 6 &amp; ++y == 6)&#123;        x = 11;    &#125;    System.out.println(&quot;x =&quot;+ x +&quot;,y =&quot; + y);//x = 6,y = 6    int x1 = 5,y1 = 5;    if(x1++ == 6 &amp;&amp; ++y1 == 6)&#123;        x1 = 11;    &#125;    System.out.println(&quot;x =&quot;+ x1 +&quot;,y =&quot; + y1);//x1 = 6,y1 = 5    int x2 = 5,y2 = 5;    if(x2++ == 5 | ++y2 == 5)&#123;        x2 = 11;    &#125;    System.out.println(&quot;x =&quot;+ x2 +&quot;,y =&quot; + y2);//x2 = 11, y2 = 6    int x3 = 5,y3 = 5;    if(x3++ == 5 || ++y3 == 5)&#123;        x3 = 11;    &#125;    System.out.println(&quot;x =&quot;+ x3 +&quot;,y =&quot; + y3);//x3 = 11 y3 = 5&#125;</code></pre><p>}</p><h3 id="逻辑运算符联系-Test02-java"><a href="#逻辑运算符联系-Test02-java" class="headerlink" title="逻辑运算符联系  Test02.java"></a>逻辑运算符联系  Test02.java</h3><p>public class Test02 {</p><pre><code>public static void main(String[] args)&#123;    boolean x = true,y = false;    short z = 46;    if((z++ == 46) &amp;&amp; (y = true)) z++;    if((x = false) || (++z == 49)) z++;    System.out.println(&quot;z=&quot; + z);&#125;</code></pre><p>}</p><h3 id="三元运算符练习"><a href="#三元运算符练习" class="headerlink" title="三元运算符练习"></a>三元运算符练习</h3><p>public class TernaryOperatorExercise {</p><pre><code>public static void main(String[] args)&#123;    //比较三个数大小    //比较n1和n2大小，赋值给max1    //比较max1和n3大小，赋值给max2    int n1 = 33,n2 = 54,n3 = 67;    int max1 = n1 &gt; n2 ? n1 : n2;    int max2 = max1 &gt; n3 ? max1 : n3;    System.out.println(&quot;最大数为&quot; + max2);&#125;</code></pre><p>}</p><h3 id="键盘输入法"><a href="#键盘输入法" class="headerlink" title="键盘输入法"></a>键盘输入法</h3><p>import java.util.Scanner;</p><p>public class Input{</p><pre><code>public static void main(String[] args)&#123;    Scanner scanner = new Scanner(System.in);    System.out.println(&quot;你的名字&quot;);    String name = scanner.next();    System.out.println(&quot;你的年龄&quot;);    int age = scanner.nextInt();    System.out.println(&quot;你的薪水&quot;);    double sal = scanner.nextDouble();    System.out.println(&quot;个人信息如下：&quot;);    System.out.println(&quot;名字&quot; + name + &quot;年龄&quot; + age + &quot;薪水&quot; + sal);    &#125;</code></pre><p>}</p><h3 id="位运算练习"><a href="#位运算练习" class="headerlink" title="位运算练习"></a>位运算练习</h3><p>public class BitOperator01{</p><pre><code>public static void main(String[] args)&#123;    //2的补码：00000000 00000000 000000000 000000010    //3的补码：00000000 00000000 000000000 000000011    //2|3：   00000000 00000000 000000000 000000011    //输出3    System.out.println(2 | 3);    //2的补码：00000000 00000000 000000000 000000010    //3的补码：00000000 00000000 000000000 000000011    //2^3:    00000000 00000000 000000000 000000001    //输出：1    System.out.println(2 ^ 3);&#125;</code></pre><p>}</p><h3 id="Homework01-java-1"><a href="#Homework01-java-1" class="headerlink" title="Homework01.java"></a>Homework01.java</h3><ol><li><p>10 / 3 = 3</p></li><li><p>10 / 5 = 2</p></li><li><p>10 % 2 = 0</p></li><li><p>-10.5 % 3 = - 1.5</p></li><li><p>public class Homework01{</p><p> public static void main(String[] args){</p><pre><code> System.out.println(10 / 3); System.out.println(10 / 5); System.out.println(10 % 2); System.out.println(- 10.5 % 3);</code></pre><p> }<br>}</p><h3 id="Homework02-java-1"><a href="#Homework02-java-1" class="headerlink" title="Homework02.java"></a>Homework02.java</h3><p>public class Homework02{</p><p> public static void main(String[] args){</p><pre><code> int i = 66; System.out.println(++ i + i);</code></pre><p> }<br>}</p><h3 id="Homework04-java-1"><a href="#Homework04-java-1" class="headerlink" title="Homework04.java"></a>Homework04.java</h3><p>public class Homework04{</p><p> public static void main(String[] args){</p><pre><code> String str = &quot;99.9&quot;;//注意要可以转为字符串 double a = Double.parseDouble(str); char b = &#39;哇&#39;; String c = b + &quot;&quot;; System.out.println(a + &quot;  &quot; + c);</code></pre><p> }<br>}</p><h2 id="第四章-控制结构"><a href="#第四章-控制结构" class="headerlink" title="第四章 控制结构"></a>第四章 控制结构</h2><h3 id="If01-java-单分支"><a href="#If01-java-单分支" class="headerlink" title="If01.java 单分支"></a>If01.java 单分支</h3><p>import java.util.Scanner;</p></li></ol><p>public class If01{</p><pre><code>public static void main(String[] args)&#123;    Scanner scanner = new Scanner(System.in);    System.out.println(&quot;输入你的年龄&quot;);    int age = scanner.nextInt();     if(age &gt; 18)&#123;        System.out.println(&quot;你的年龄达到十八岁，你已经被捕入狱&quot;);        &#125;    System.out.println(&quot;程序继续&quot;);&#125;</code></pre><p>}</p><h3 id="If02-java-双分支"><a href="#If02-java-双分支" class="headerlink" title="If02.java 双分支"></a>If02.java 双分支</h3><p>import java.util.Scanner;</p><p>public class If02{</p><pre><code>public static void main(String[] args)&#123;    Scanner scanner = new Scanner(System.in);    System.out.println(&quot;输入你的年龄&quot;);    int age = scanner.nextInt();     if(age &gt; 18)&#123;        System.out.println(&quot;你的年龄达到十八岁，你已经被捕入狱&quot;);        &#125;    else &#123;        System.out.println(&quot;你的年龄不大，饶你一次&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="If03-java-多分支"><a href="#If03-java-多分支" class="headerlink" title="If03.java 多分支"></a>If03.java 多分支</h3><p>import java.util.Scanner;</p><p>public class If03{</p><pre><code>public static void main(String[] args)&#123;    Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;输入你的芝麻信用分：&quot;);    int num = myScanner.nextInt();    if(num &gt; 1 &amp;&amp; num &lt;= 100)&#123;        if(num == 100)&#123;            System.out.println(&quot;信用极好&quot;);        &#125;        else if (num &gt; 80 &amp;&amp; num &lt;= 99) &#123;            System.out.println(&quot;信用一般&quot;);        &#125;        else if (num &gt; 60 &amp;&amp; num &lt;= 80) &#123;            System.out.println(&quot;信用及格&quot;);        &#125;        else&#123;            System.out.println(&quot;信用 不合格&quot;);        &#125;    &#125;else&#123;        System.out.println(&quot;信用分数需要在1-100&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="NestedIf-java-嵌套分支"><a href="#NestedIf-java-嵌套分支" class="headerlink" title="NestedIf.java 嵌套分支"></a>NestedIf.java 嵌套分支</h3><p>import java.util.Scanner;</p><p>public class NestedIf{</p><pre><code>public static void main(String[] args)&#123;    //参加歌手比赛，如果初赛成绩大于 8.0 进入决赛，否则提示淘汰。    //并且根据性别提示进入男子组或女子组。    //输入成绩和性别，进行判断和输出信息。[NestedIf.java]     //提示: double score; char gender;     //接收字符: char gender = scanner.next().charAt(0)    //    //    //先排除成绩不够的    //嵌套分支，分别选择男子组和女子组，    Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;请输入你的成绩：&quot;);    double score = myScanner.nextDouble();    if(score &gt; 8.0)&#123;        System.out.println(&quot;请输入你的性别：&quot;);        char gender = myScanner.next().charAt(0);        if(gender == &#39;男&#39;)&#123;            System.out.println(&quot;你被分配进男子组&quot;);        &#125;else if(gender == &#39;女&#39;)&#123;            System.out.println(&quot;你被分入女生组&quot;);        &#125;else&#123;            System.out.println(&quot;你的性别有误，不能参加！！！！！&quot;);        &#125;    &#125;else&#123;        System.out.println(&quot;你的成绩不合格&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="NestedIfExercise01-java-出票系统"><a href="#NestedIfExercise01-java-出票系统" class="headerlink" title="NestedIfExercise01.java 出票系统"></a>NestedIfExercise01.java 出票系统</h3><p>import java.util.Scanner;</p><p>public class NestedIfExercise01{</p><pre><code>public static void main(String[] args)&#123;    //出票系统    //4-10旺季：    //成人（18-60）：60    //儿童（&lt;18）：半价    //老人（&gt;60）：1/3    //淡季：    //成人：40    //其他：20    Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;输入你要查询的月份：&quot;);    //先分出淡旺季    int month = myScanner.nextInt();    if(month &gt;= 4 &amp;&amp; month &lt;= 10)&#123;            //分出不同年龄的票价        System.out.println(&quot;输入你的年龄：&quot;);        int age = myScanner.nextInt();        if(age &gt;= 18 &amp;&amp; age &lt;= 60)&#123;            System.out.println(&quot;你的票价为：60元&quot;);        &#125;else if(age &lt; 18)&#123;            System.out.println(&quot;你的票价为：30元&quot;);        &#125;else if (age &gt; 60)&#123;            System.out.println(&quot;你的票价为：20元&quot;);        &#125;    &#125;else if( month &gt;= 1 &amp;&amp; month &lt;= 12)&#123;        System.out.println(&quot;输入你的年龄：&quot;);        int age = myScanner.nextInt();        if(age &gt;= 18 &amp;&amp; age &lt;= 60)&#123;            System.out.println(&quot;你的票价为：40元&quot;);        &#125;else&#123;            System.out.println(&quot;你的票价为：20元&quot;);        &#125;    &#125;else&#123;        System.out.println(&quot;你输入月份不合格，请重新输入&quot;);    &#125;&#125;</code></pre><p>}</p><h4 id="Switch01-java-分支结构"><a href="#Switch01-java-分支结构" class="headerlink" title="Switch01.java 分支结构"></a>Switch01.java 分支结构</h4><p>import java.util.Scanner;</p><p>public class Switch01{</p><pre><code>public static void main(String[] args) &#123;    Scanner myScanner = new Scanner(System.in);    //案例：Switch01.java 请编写一个程序，    //该程序可以接收一个字符，比如:a,b,c,d,e,f,g a     //表示星期一，b 表示星期二 … 根据用户的输入显示相应的信息.    //要求使用 switch 语句完成    // 思路分析    //  1. 接收一个字符 , 创建 Scanner 对象    //   2. 使用 switch 来完成匹配,并输出对应信息 代码    System.out.println(&quot;输入一个字符：（a-g）&quot;);    char c1 = myScanner.next().charAt(0);    switch(c1)&#123;        case &#39;a&#39; :            System.out.println(&quot;星期一&quot;);            break;        case &#39;b&#39; :            System.out.println(&quot;星期二&quot;);            break;        case &#39;c&#39; :            System.out.println(&quot;星期三&quot;);            break;        case &#39;d&#39; :            System.out.println(&quot;星期四&quot;);            break;            //.....        default :            System.out.println(&quot;你错了&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="SwitchExercise-java"><a href="#SwitchExercise-java" class="headerlink" title="SwitchExercise.java"></a>SwitchExercise.java</h3><p>import java.util.Scanner;</p><p>public class SwitchExercise{</p><pre><code>public static void main(String[] args) &#123;    //使用 switch 把小写类型的 char 型转为大写(键盘输入)。    //只转换 a, b, c, d, e. 其它的输出 &quot;other&quot;。    Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;请输入小写字母&quot;);    char letter = myScanner.next().charAt(0);    switch(letter)&#123;        case &#39;a&#39; :            System.out.println(&quot;A&quot;);            break;        case &#39;b&#39; :            System.out.println(&quot;B&quot;);        break;        case &#39;c&#39; :             System.out.println(&quot;C&quot;);        break;        case &#39;d&#39; :             System.out.println(&quot;D&quot;);        break;        case &#39;e&#39; :             System.out.println(&quot;E&quot;);        break;        default :             System.out.println(&quot;other&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="SwitchExercise02-java-嵌套"><a href="#SwitchExercise02-java-嵌套" class="headerlink" title="SwitchExercise02.java(嵌套)"></a>SwitchExercise02.java(嵌套)</h3><p>import java.util.Scanner;</p><p>public class SwitchExercise02{</p><pre><code>public static void main(String[] args) &#123;    //对学生成绩大于 60 分的，输出&quot;合格&quot;。    //低于 60 分的，输出&quot;不合格&quot;。(注：输入的成绩不能大于 100),    // 提示 成绩/60    Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;请输入你的成绩&quot;);    double score = myScanner.nextDouble();    if(score &gt;= 0 &amp;&amp; score &lt;= 100)&#123;        //嵌套switch        // 将double值强转化为int值        switch((int)(score / 60))&#123;            case 1 :                System.out.println(&quot;合格&quot;);                break;            case 0 :                System.out.println(&quot;不合格&quot;);            break;            default :                System.out.println(&quot;输入有误&quot;);        &#125;    &#125;else&#123;        System.out.println(&quot;成绩输入有误&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="SwitchExercise03-java（穿透）"><a href="#SwitchExercise03-java（穿透）" class="headerlink" title="SwitchExercise03.java（穿透）"></a>SwitchExercise03.java（穿透）</h3><p>import java.util.Scanner;</p><p>public class SwitchExercise03{</p><pre><code>public static void main(String[] args) &#123;    //根据用于指定月份，打印该月份所属的季节。    //3,4,5 春季 6,7,8 夏季 9,10,11 秋季 12, 1, 2 冬季     //[课堂练习, 提示 使 用穿透     Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;输入月份：&quot;);    int mouth = myScanner.nextInt();    switch(mouth)&#123;        case 3 :            case 4 :        case 5 :            System.out.println(&quot;春季&quot;);                break;        case 6 :            case 7 :            case 8 :            System.out.println(&quot;夏季&quot;);                break;        case 9 :            case 10 :        case 11:            System.out.println(&quot;秋季&quot;);                break;        case 12:            case 1 :        case 2 :            System.out.println(&quot;冬季&quot;);            break;        default :            System.out.println(&quot;输入有误&quot;);        &#125;    &#125;&#125;</code></pre><h3 id="ForExercise-java-for"><a href="#ForExercise-java-for" class="headerlink" title="ForExercise.java   for"></a>ForExercise.java   for</h3><p>public class ForExercise{</p><pre><code>public static void main(String[] args) &#123;    //打印 1~100 之间所有是 9 的倍数的整数，    //统计个数 及 总和.[化繁为简,先死后活]    int count = 0;    int sum = 0;    for(int i = 1; i &lt;= 100; i++)&#123;        if(i % 9 == 0)&#123;            System.out.println(&quot;输出整数：&quot; + i );            count++;            sum += i;        &#125;    &#125;    System.out.println(&quot;个数：&quot; + count + &quot;总合&quot; + sum);&#125;</code></pre><p>}</p><h3 id="ForExercise02-java-for"><a href="#ForExercise02-java-for" class="headerlink" title="ForExercise02.java   for"></a>ForExercise02.java   for</h3><p>public class ForExercise02{</p><pre><code>public static void main(String[] args) &#123;    int start = 0;    int end = 5;    int sum = 0;    for(int i = start, j = end; i &lt;= end; i++,j--)&#123;            sum = i + j;            System.out.println(i+ &quot;+&quot; + j + &quot;=&quot; + sum );    &#125;&#125;    </code></pre><p>}</p><h3 id="WhileExercise-java-While"><a href="#WhileExercise-java-While" class="headerlink" title="WhileExercise.java  While"></a>WhileExercise.java  While</h3><p>public class WhileExercise{</p><pre><code>public static void main(String[] args) &#123;            int i = 1;    while(i &lt;= 100)&#123;        if(i % 3 == 0)&#123;            System.out.println(&quot;i=&quot; + i);        &#125;        i++;    &#125;&#125;    </code></pre><p>}</p><h3 id="WhileExercise02-java-While"><a href="#WhileExercise02-java-While" class="headerlink" title="WhileExercise02.java  While"></a>WhileExercise02.java  While</h3><p>public class WhileExercise02{</p><pre><code>public static void main(String[] args) &#123;    //打印 40—200 之间所有的偶数 [使用 while, 课后练习]    int i = 40;    int end = 200;    while(i &lt;= end)&#123;        if(i % 2 == 0)&#123;            System.out.println(&quot;偶数&quot; + i);        &#125;        i++;    &#125;&#125;    </code></pre><p>}</p><h3 id="DoWhileExercise01-java-do-while"><a href="#DoWhileExercise01-java-do-while" class="headerlink" title="DoWhileExercise01.java  do..while"></a>DoWhileExercise01.java  do..while</h3><p>public class DoWhileExercise01{</p><pre><code>public static void main(String[] args) &#123;    //统计 1---200 之间能被 5 整除但不能被 3 整除的个数    int i = 1;    int end = 200;    int count = 0;    do&#123;        if(i % 5 == 0 &amp;&amp; i % 3 != 0)&#123;            System.out.println(&quot;就是他&quot; + i);            count++;        &#125;        i++;    &#125;while(i &lt;= end);    System.out.println(&quot;个数&quot; + count);&#125;    </code></pre><p>}</p><h3 id="DoWhileExercise02-java-do-while"><a href="#DoWhileExercise02-java-do-while" class="headerlink" title="DoWhileExercise02.java  do..while"></a>DoWhileExercise02.java  do..while</h3><p>import java.util.Scanner;</p><p>public class DoWhileExercise02{</p><pre><code>public static void main(String[] args) &#123;    //如果李三不还钱，    //则老韩将一直使出五连鞭，直到李三说还钱为止     //[System.out.println(&quot;老韩问：还钱吗？y/n&quot;)]    // do...while ..     Scanner myScanner = new Scanner(System.in);    char answer = &#39; &#39;;    do&#123;        System.out.println(&quot;看我五连鞭&quot; );        System.out.println(&quot;老韩问：还钱吗？y/n&quot;);        answer = myScanner.next().charAt(0);                    &#125;while(answer != &#39;y&#39;);&#125;    </code></pre><p>}</p><h3 id="MulForExercise01-java-多重控制循环"><a href="#MulForExercise01-java-多重控制循环" class="headerlink" title="MulForExercise01.java 多重控制循环"></a>MulForExercise01.java 多重控制循环</h3><p>import java.util.Scanner;</p><p>public class MulForExercise01{</p><pre><code>public static void main(String[] args) &#123;    //统计 3 个班成绩情况，    //每个班有 5 名同学，    //求出各个班的平均分和所有班级的平均分    //[学生的成绩从键盘输入]。    //统计三个班及格人数，    //每个班有 5 名同学    Scanner myScanner = new Scanner(System.in);    double sum1 = 0;    int count = 0;    for(int i = 1; i &lt;= 3; i++)&#123;        double sum = 0;        for(int j = 1; j &lt;= 5; j++)&#123;            System.out.println(&quot;请输入第&quot; + i + &quot;个班第&quot; + j +&quot;一个学生的成绩&quot; );            double score = myScanner.nextDouble();            if(score &gt;= 60 &amp;&amp; score &lt;= 100)&#123;                System.out.println( &quot;合格&quot;);                count++;            &#125;else if(score &lt; 60 &amp;&amp; score &gt;= 1)&#123;                System.out.println( &quot;不合格&quot;);            &#125;else&#123;                System.out.println( &quot;你输入的成绩有误&quot;);            &#125;            sum += score;        &#125;        System.out.println( &quot;第&quot; + i + &quot;个班的平均成绩为：&quot;+ sum/5);        sum1 += sum;    &#125;    System.out.println( &quot;所有班的平均成绩为：&quot;+ sum1/15);    System.out.println( &quot;三个班及格人数为：&quot;+ count);&#125;    </code></pre><p>}</p><h3 id="MulForExercise02-java-多重控制循环"><a href="#MulForExercise02-java-多重控制循环" class="headerlink" title="MulForExercise02.java 多重控制循环"></a>MulForExercise02.java 多重控制循环</h3><pre><code>public static void main(String[] args) &#123;    //打印出九九乘法表[课后题]    //九行九列    //先输出 1 行    for(int i = 1,k = 1; k &lt;= 9; i++, k++)&#123;        int j = 1;        while(i &gt;= j)&#123;            System.out.print( j + &quot;*&quot; + i + &quot;=&quot; + (i * j) + &quot;\t&quot;);            j++;        &#125;        System.out.println( &quot;&quot; );    &#125;&#125;</code></pre><h3 id="Stars-java-空心金字塔"><a href="#Stars-java-空心金字塔" class="headerlink" title="Stars.java 空心金字塔"></a>Stars.java 空心金字塔</h3><p>import java.util.Scanner;</p><p>public class Stars{</p><pre><code>public static void main(String[] args) &#123;    //空心金字塔    //    //     *       1  2*i-1 num-i     //    ***      3      //   *****     5    //  *******    7    // *********   9    Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;请输入塔的层数：&quot;);    int num = myScanner.nextInt();    for(int i = 1; i &lt;= num; i++)&#123;        for(int k = 1; k &lt;= num-i; k++)&#123;            System.out.print(&quot; &quot;);        &#125;        for(int j = 1; j &lt;= 2 * i - 1; j++)&#123;            if(j == 1 || j == 2 * i - 1 || i == num)&#123;                System.out.print(&quot;*&quot;);            &#125;else&#123;                System.out.print(&quot; &quot;);            &#125;        &#125;        System.out.println(&quot;&quot;);    &#125;&#125;    </code></pre><p>}</p><h3 id="Stars02-java-空心金字塔-while"><a href="#Stars02-java-空心金字塔-while" class="headerlink" title="Stars02.java 空心金字塔 while"></a>Stars02.java 空心金字塔 while</h3><p>import java.util.Scanner;</p><p>public class Stars02{</p><pre><code>public static void main(String[] args) &#123;    //空心金字塔    //    //     *       1  2*i-1 num-i    //    ***      3      //   *****     5    //  *******    7    // *********   9    Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;请输入塔的层数：&quot;);    int num = myScanner.nextInt();    int i = 1;    while(i &lt;= num)&#123;        int k = 1;        while(k &lt;= num - i)&#123;            System.out.print(&quot; &quot;);            k++;        &#125;        int j = 1;        while(j &lt;= 2 * i - 1)&#123;            if(j == 1 || j == 2 * i - 1 || i ==num)&#123;            System.out.print(&quot;*&quot;);            &#125;else&#123;                System.out.print(&quot; &quot;);            &#125;            j++;        &#125;        i++;        System.out.println(&quot;&quot;);    &#125;        &#125;    </code></pre><p>}</p><h3 id="Stars03-java-空心菱形"><a href="#Stars03-java-空心菱形" class="headerlink" title="Stars03.java 空心菱形"></a>Stars03.java 空心菱形</h3><p>import java.util.Scanner;</p><p>public class Stars03{</p><pre><code>public static void main(String[] args) &#123;    //空心菱形    //    //      *       1  2*i-1 num-i    //     * *      3      //    *   *     5    //   *     *    7    //  *       *   9    //   *     *    7  2*(num-i)+1    //    *   *     5    //     * *      3    //      *       1    //          Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;请输入塔的层数：&quot;);    int num2 = myScanner.nextInt();    int num = (num2 + 1) / 2;    for(int i = 1; i &lt;= num; i++)&#123;        for(int k = 1; k &lt;= num-i; k++)&#123;            System.out.print(&quot; &quot;);        &#125;        for(int j = 1; j &lt;= 2 * i - 1; j++)&#123;            if(j == 1 || j == 2 * i - 1)&#123;                System.out.print(&quot;*&quot;);            &#125;else&#123;                System.out.print(&quot; &quot;);            &#125;        &#125;        System.out.println(&quot;&quot;);    &#125;    for(int m = 1; m &lt;= num - 1; m++)&#123;        for(int g = 1; g &lt;= m; g++)&#123;            System.out.print(&quot; &quot;);        &#125;                    for(int n = 1; n &lt;= 2 * (num - m) + 1; n++)&#123;            if(n == 1 || n == 2 * ((num-1) - m) + 1)&#123;                System.out.print(&quot;*&quot;);            &#125;else&#123;                System.out.print(&quot; &quot;);            &#125;        &#125;            System.out.println(&quot;&quot;);    &#125;    &#125;    </code></pre><p>}</p><h3 id="BreakExercise01-java-break跳转"><a href="#BreakExercise01-java-break跳转" class="headerlink" title="BreakExercise01.java break跳转"></a>BreakExercise01.java break跳转</h3><p>public class BreakExercise01{</p><pre><code>public static void main(String[] args) &#123;    //1-100 以内的数求和，    //求出 当和 第一次大于 20 的当前数 【for + break】    for(int i = 1,j = 0; i &lt;= 100; i++)&#123;        j += i;        System.out.println( &quot;当前数=&quot; + i + &quot;和=&quot; + j);        if(j &gt; 20)&#123;            break;        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="BreakExercise02-java-break跳转"><a href="#BreakExercise02-java-break跳转" class="headerlink" title="BreakExercise02.java break跳转"></a>BreakExercise02.java break跳转</h3><p>import java.util.Scanner;</p><p>public class BreakExercise02{</p><pre><code>public static void main(String[] args) &#123;    //实现登录验证，有 3 次机会，如果用户名为&quot;丁真&quot; ,    //密码&quot;666&quot;提示登录成功，否则提示还有几次机会，    //请使用 for+break 完成 BreakExercise02.java    Scanner myScanner = new Scanner(System.in);    String name = &quot;&quot;;    String password = &quot;&quot;;    int chage = 3;    for(int i = 1; i &lt;= 3; i++)&#123;        System.out.println( &quot;请输入用户名&quot; );        name = myScanner.next();        System.out.println( &quot;请输入密码&quot; );        password = myScanner.next();        if(&quot;丁真&quot;.equals(name) &amp;&amp; &quot;666&quot;.equals(password))&#123;            System.out.println( &quot;你已经登陆&quot; );            break;        &#125;        System.out.println( &quot;你输入的用户名或密码错误&quot; );        --chage;        System.out.println( &quot;你还有&quot; + chage +&quot;次机会&quot; );    &#125;&#125;</code></pre><p>}</p><h3 id="Homework01-java-2"><a href="#Homework01-java-2" class="headerlink" title="Homework01.java"></a>Homework01.java</h3><p>public class Homework01{</p><pre><code>public static void main(String[] args)&#123;    //某人100000元，每经过一次路口需要缴费    //1）当现金&gt;50000时，交5%     50000/(50000*0.05)    //2）当现金&lt;=50000时，交1000    //该人可以经过多少次路口，while+break    int count = 0;    double money = 100000;    while(true)&#123;//建立无限循环        if(money &gt; 50000)&#123;//50000~100000            money *= 0.95;            count++;        &#125;else if(money &gt; 1000)&#123;//1000~50000            money -= 1000;            count++;        &#125;else &#123;//    &lt; 1000            break;        &#125;    &#125;    System.out.println( &quot;可以经过&quot; + count + &quot;次&quot; );&#125;</code></pre><p>}</p><h3 id="Homework02-java-2"><a href="#Homework02-java-2" class="headerlink" title="Homework02.java"></a>Homework02.java</h3><p>import java.util.Scanner;</p><p>public class Homework02{</p><pre><code>public static void main(String[] args)&#123;    //实现判断一个整数，    //输运那个范围    //大于0；小于0；等于0    Scanner myScanner = new Scanner(System.in);    System.out.println( &quot;请输入一个整数&quot;);    int num = myScanner.nextInt();    if(num &lt; 0)&#123;        System.out.println( &quot;小于0&quot;);    &#125;else if(num == 0)&#123;        System.out.println( &quot;等于0&quot;);    &#125;else&#123;        System.out.println( &quot;大于0&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="Homework03-java-1"><a href="#Homework03-java-1" class="headerlink" title="Homework03.java"></a>Homework03.java</h3><p>import java.util.Scanner;</p><p>public class Homework03{</p><pre><code>public static void main(String[] args)&#123;    //实现判断一个整数，    //输运那个范围    //大于0；小于0；等于0    Scanner myScanner = new Scanner(System.in);    System.out.println( &quot;请输入一个年份&quot;);    int year = myScanner.nextInt();    if(year &gt;= 0)&#123;        if(year / 4 == 0)&#123;            System.out.println( &quot;是闰年&quot;);        &#125;else&#123;            System.out.println( &quot;不是闰年&quot;);        &#125;    &#125;else&#123;        System.out.println( &quot;请输入正确的年份&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="Homework04-java-2"><a href="#Homework04-java-2" class="headerlink" title="Homework04.java"></a>Homework04.java</h3><p>public class Homework04{</p><pre><code>public static void main(String[] args)&#123;    //判断一个数是否为水仙花数    //水仙花数：    //一个数，各各位上的数的立方和为这个数    //例如：153 = 1*1*1 + 5*5*5 + 3*3*3    //分析：    //百位：num%100    //十位：num%100/10    //各位：num%10    int num = 153;    int n1 = num / 100;    int n2 = num % 100 / 10;    int n3 = num % 10;    if(n1 * n1 * n1 + n2 * n2 * n2 + n3 * n3 * n3 == num)&#123;        System.out.println( num + &quot;这个数是水仙花数&quot;);    &#125;else&#123;        System.out.println( num + &quot;这个数不是水仙花数&quot;);    &#125;     &#125;</code></pre><p>}</p><h3 id="Homework06-java"><a href="#Homework06-java" class="headerlink" title="Homework06.java"></a>Homework06.java</h3><p>public class Homework06{</p><pre><code>public static void main(String[] args)&#123;    //输出1-100之间不能被五整除的数    //每五行一个    int count = 0;    for(int i = 1; i &lt;= 100; i++)&#123;        //输出1-100        if( i % 5 != 0 )&#123;            //找出被五整除的数            System.out.print( i + &quot; &quot; );            count++;            if(count % 5 == 0)&#123;                //判断满5换行                System.out.println(&quot;&quot;);            &#125;        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="Homework07-java"><a href="#Homework07-java" class="headerlink" title="Homework07.java"></a>Homework07.java</h3><p>public class Homework07{</p><pre><code>public static void main(String[] args)&#123;    //输出小写的a-z    //以及大写的Z-A    for(char c1 = &#39;a&#39;; c1 &lt;= &#39;z&#39;; c1++)&#123;        System.out.print(c1);    &#125;    for(char c1 = &#39;Z&#39;; c1 &gt;= &#39;A&#39;; c1--)&#123;        System.out.print(c1);    &#125;&#125;</code></pre><p>}</p><h3 id="Homework08-java"><a href="#Homework08-java" class="headerlink" title="Homework08.java"></a>Homework08.java</h3><p>public class Homework08{</p><pre><code>public static void main(String[] args)&#123;    //求出1-1/2+1/3-1/4....1/100的和    double num = 0;    for(int i = 1; i &lt;= 100; i++)&#123;        if(i % 2 == 0)&#123;            num -= 1.0 / i;        &#125;else&#123;            num += 1.0 / i;        &#125;    &#125;    System.out.print(num);&#125;</code></pre><p>}</p><h3 id="Homework09-java"><a href="#Homework09-java" class="headerlink" title="Homework09.java"></a>Homework09.java</h3><p>public class Homework09{</p><pre><code>public static void main(String[] args)&#123;    //求1 + (1 + 2) + （1 + 2 + 3)+....(1 + 2 + 3 + ... 100)    //的结果    int num1 = 0;    for(int i = 1; i &lt;= 100; i++)&#123;        for(int j = 1; j &lt;= i; j++)&#123;            num1 += j;        &#125;    &#125;    System.out.println(num1);&#125;</code></pre><p>}</p><h2 id="第六章-数组，排序和查找"><a href="#第六章-数组，排序和查找" class="headerlink" title="第六章 数组，排序和查找"></a>第六章 数组，排序和查找</h2><h3 id="ArrayExercise01-java数组练习"><a href="#ArrayExercise01-java数组练习" class="headerlink" title="ArrayExercise01.java数组练习"></a>ArrayExercise01.java数组练习</h3><p>public class ArrayExercise01{</p><pre><code>public static void main(String[] args)&#123;    //创建一个 char 类型的 26 个元素的数组，    //分别 放置&#39;A&#39;-&#39;Z&#39;。使用 for 循环访问所有元素并打印出来。    //提示：char 类型     //数据运算 &#39;A&#39;+2 -&gt; &#39;C&#39; ArrayExercise01.java    char[] letter = new char[26];    for(int i = 0; i &lt; letter.length; i++)&#123;        letter[i] = (char)(&#39;A&#39; + i);    &#125;    System.out.println(&quot;这里输出字母&quot;);    for(int i = 0; i &lt; letter.length; i++)&#123;        System.out.print(letter[i]);    &#125;        &#125;</code></pre><p>}</p><h3 id="ArrayExercise02-java数组练习"><a href="#ArrayExercise02-java数组练习" class="headerlink" title="ArrayExercise02.java数组练习"></a>ArrayExercise02.java数组练习</h3><p>public class ArrayExercise02{</p><pre><code>public static void main(String[] args)&#123;    //请求出一个数组     //int[]的最大值 &#123;4,-1,9, 10,23&#125;，    //并得到对应的下标。 ArrayExercise02.java    int[] num = &#123;4,-1,9,10,23&#125;;    //假定num【0】，maxIndex=0；    //从下标 1 开始遍历 arr， 如果 max &lt; 当前元素，    //说明 max 不是真正的 最大值, 我们就 max=当前元素;    // maxIndex=当前元素下标     //  当我们遍历这个数组 arr 后 , max 就是真正的最大值    int max = num[0];    int maxIndex = 0;    for(int i = 0; i &lt; num.length; i++)&#123;        if(max &lt; num[i])&#123;            max = num[i];            maxIndex = i;        &#125;    &#125;    System.out.println(&quot;最大值为&quot; + max);    System.out.println(&quot;下标为&quot; + maxIndex);&#125;</code></pre><p>}</p><h3 id="ArrayReverse-java-自己的有点复杂，可以看看老师的"><a href="#ArrayReverse-java-自己的有点复杂，可以看看老师的" class="headerlink" title="ArrayReverse.java(自己的有点复杂，可以看看老师的)"></a>ArrayReverse.java(自己的有点复杂，可以看看老师的)</h3><p>public class ArrayReverse{</p><pre><code>public static void main(String[] args)&#123;    //把数组的元素内容反转。     //ArrayReverse.java     //arr &#123;11,22,33,44,55,66&#125; &#123;66, 55,44,33,22,11&#125;    int[] arr1 = new int[6];    for(int i = 0; i &lt; arr1.length; i++)&#123;        arr1[i] = (i + 1) * 11;    &#125;    for(int i = 0; i &lt; arr1.length; i++)&#123;        System.out.println(arr1[i]);    &#125;    int[] arr2 = new int[6];    for(int i = 0; i &lt; arr2.length; i++)&#123;        arr2[i] = arr1[i];    &#125;    for(int i = 0; i &lt; arr2.length; i++)&#123;        arr2[i] = (arr2.length - i) * 11;    &#125;    for(int i = 0; i &lt; arr2.length; i++)&#123;        System.out.println(arr2[i]);    &#125;&#125;</code></pre><p>}</p><h4 id="ArrayReduce-java"><a href="#ArrayReduce-java" class="headerlink" title="ArrayReduce.java"></a>ArrayReduce.java</h4><p>import java.util.Scanner;</p><p>public class ArrayReduce{</p><pre><code>public static void main(String[] args)&#123;    //有一个数组 &#123;1， 2， 3， 4， 5&#125;，     //可以将该数组进行缩减，提示用户是否继续缩减，    //每次缩减最后那个元素。    //当只剩 下最后一个元素，提示，不能再缩减。    Scanner myScanner = new Scanner(System.in);    int[] arr = &#123;1, 2, 3, 4, 5&#125;;    do&#123;        int[] arrNew = new int[arr.length - 1];        for(int i = 0; i &lt; arr.length - 1; i++)&#123;            arrNew[i] = arr[i];        &#125;        arr = arrNew;        System.out.println(&quot;你的数组已经缩减为：&quot;);        for(int i = 0; i &lt; arr.length; i++)&#123;            System.out.println(arr[i]);        &#125;        System.out.println(&quot;是否继续缩减   y/n&quot;);        char c1 = myScanner.next().charAt(0);        if(arr.length == 1)&#123;            System.out.println(&quot;你的数组已经缩减到最小&quot;);            break;        &#125;else if(c1 == &#39;n&#39;)&#123;            break;        &#125;    &#125;while(true);&#125;</code></pre><p>}</p><h4 id="BubbleSort-java-冒泡排序"><a href="#BubbleSort-java-冒泡排序" class="headerlink" title="BubbleSort.java 冒泡排序"></a>BubbleSort.java 冒泡排序</h4><p>public class BubbleSort{</p><pre><code>public static void main(String[] args)&#123;    //冒泡排序    int[] arr = &#123;2, 9, 7, 1&#125;;    int temp = 0;//用于辅助比较    //建立一个外层循环    //一共进行arr.length - 1轮比较    //每轮比较的元素比上一轮减少一个    for(int i = 0; i &lt; arr.length - 1; i++)&#123;        for(int j = 0; j &lt; arr.length - 1 - i; j++)&#123;            //比较出最大的数，排在最后一位            if(arr[j] &gt; arr[j + 1])&#123;                //交换                temp = arr[j];                arr[j] = arr[j + 1];                arr[j + 1] = temp;            &#125;        &#125;        System.out.println(&quot;\n第&quot; + (i + 1) + &quot;轮排序结果为:&quot;);        for(int k = 0; k &lt; arr.length; k++)&#123;            System.out.print(&quot;\t&quot; + arr[k]);        &#125;    &#125;&#125;</code></pre><p>}</p><h4 id="SeqSearch01-java-顺序查找"><a href="#SeqSearch01-java-顺序查找" class="headerlink" title="SeqSearch01.java   顺序查找"></a>SeqSearch01.java   顺序查找</h4><p>import java.util.Scanner;</p><p>public class SeqSearch01{</p><pre><code>public static void main(String[] args)&#123;    //有一个数列：    //白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王猜数游戏：    //从键盘中任意输入一个名称，    //判断数列中是否 包含此名称【顺序查找】     //要求: 如果找到了，就提示找到，并给出下标值。    int index = -1;    String[] name = &#123;&quot;白眉鹰王&quot;,&quot;金毛狮王&quot;,&quot;紫衫龙王&quot;,&quot;青翼蝠王&quot;&#125;;    Scanner myScanner = new Scanner(System.in);    System.out.println(&quot;输入你要查询的人物:&quot;);    String findName = myScanner.next();    for(int i = 0; i &lt; name.length; i++)&#123;        if(findName.equals(name[i]))&#123;            System.out.println(&quot;恭喜你找到&quot; + findName + &quot;这个人物，他的下标为&quot; + i);            index = i;        &#125;    &#125;    if(index == -1)&#123;        System.out.println(&quot;没有找到&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="TwoDimensionalArray05-java"><a href="#TwoDimensionalArray05-java" class="headerlink" title="TwoDimensionalArray05.java"></a>TwoDimensionalArray05.java</h3><p>public class TwoDimensionalArray05{</p><pre><code>public static void main(String[] args)&#123;    //int arr[][]=&#123;&#123;4,6&#125;,&#123;1,4,5,7&#125;,&#123;-2&#125;&#125;;     //遍历该二维数组，并得到和    int[][] arr = &#123;&#123;4,6&#125;,&#123;1,4,5,7&#125;,&#123;-2&#125;&#125;;    int sum = 0;    for(int i = 0; i &lt; arr.length; i++)&#123;        for(int j = 0; j &lt; arr[i].length; j++)&#123;            System.out.print(arr[i][j]);            sum += arr[i][j];        &#125;        System.out.println();    &#125;    System.out.print(sum);&#125;</code></pre><p>}</p><h3 id="YangHui-java-杨辉三角"><a href="#YangHui-java-杨辉三角" class="headerlink" title="YangHui.java 杨辉三角"></a>YangHui.java 杨辉三角</h3><p>public class YangHui{</p><pre><code>public static void main(String[] args)&#123;    //arr[i][j] = arr[i-1][j] + arr[i-1][j-1];    //第一位和最后一位为1    int[][] arr = new int[10][];    for(int i = 0; i &lt; arr.length; i++)&#123;        arr[i] = new int[i + 1];        for(int j = 0; j &lt; arr[i].length; j++)&#123;            if(j == 0 || j == arr[i].length - 1)&#123;                arr[i][j] = 1;            &#125;else&#123;                arr[i][j] = arr[i-1][j] + arr[i-1][j-1];            &#125;        &#125;    &#125;    for(int i = 0; i &lt; arr.length; i++)&#123;        for(int j = 0; j &lt; arr[i].length; j++)&#123;            System.out.print(&quot; &quot; + arr[i][j]);        &#125;        System.out.println();    &#125;&#125;</code></pre><p>}</p><h3 id="Homework04-java-3"><a href="#Homework04-java-3" class="headerlink" title="Homework04.java"></a>Homework04.java</h3><p>public class Homework04{</p><pre><code>public static void main(String[] args)&#123;    //已知一个升序数组，要求扎入一个元素    //该数组依然是升序    //比如【10，12，45，90】，    //添加23后，数组为【10，12，23，45，90】    int[] arr = &#123;10,12,45,90&#125;;    int[] arr2 = new int[arr.length + 1];    int num = 23;    int index = - 1;    System.out.print(&quot;初始数组为&quot; + &quot;\n&quot;);    for(int i = 0; i &lt; arr.length; i++)&#123;        System.out.print(&quot; &quot; + arr[i]);    &#125;    for(int i = 0; i &lt; arr.length; i++)&#123;        //找到插入的位置        if(num &lt;= arr[i])&#123;            index = i;            break;        &#125;    &#125;    if(index == - 1)&#123;        //当插入的数是所有元素中最大的数        index = arr.length;    &#125;    for(int i = 0, j = 0; i &lt; arr2.length; i++)&#123;        //拷贝，并跳过插入位置        if(i != index)&#123;            arr2[i] = arr[j];            j++;        &#125;else&#123;            arr2[i] = num;        &#125;    &#125;    System.out.print(&quot;\n&quot; + &quot;插入后的数组为&quot; + &quot;\n&quot;);    for(int i = 0; i &lt; arr2.length; i++)&#123;        System.out.print(&quot; &quot; + arr2[i]);    &#125;&#125;</code></pre><p>}</p><h3 id="Homework05-java"><a href="#Homework05-java" class="headerlink" title="Homework05.java"></a>Homework05.java</h3><p>public class Homework05{</p><pre><code>public static void main(String[] args)&#123;    //随机生成10个整数（1-100的范围）保存到数组    //倒叙打印，平均值，最大值，和最大下标    //查找里面是否有8    int[] arr = new int[10];    int temp = 0;    int sum = 0;    int max = 0;    int max2 = 0;    for(int i = 0; i &lt; arr.length; i++)&#123;        arr[i] = (int)(Math.random() * 100) + 1;    &#125;    System.out.println( &quot;数组为：&quot; );    for(int i = 0; i &lt; arr.length; i++)&#123;        System.out.print( &quot; &quot; + arr[i] );    &#125;    System.out.println( &quot;\n&quot; + &quot;倒叙为：&quot; );    for(int i = arr.length - 1; i &gt;= 0; i--)&#123;        System.out.print( &quot; &quot; + arr[i] );    &#125;    for(int i = 0; i &lt; arr.length; i++)&#123;        sum += arr[i];    &#125;    System.out.println( &quot;\n&quot; + &quot;平均值为 &quot; + sum / 10 );    for(int i = 0; i &lt; arr.length; i++)&#123;        if(max &lt; arr[i])&#123;            max = arr[i];            max2 = i;        &#125;    &#125;    int findNum = 8;    int index = -1;    System.out.println( &quot;\n&quot; + &quot;最大值为 &quot; + max + &quot;最大下标为&quot; + max2 );    for(int i = 0; i &lt; arr.length; i++)&#123;        if(arr[i] == findNum)&#123;            System.out.println( &quot;有8&quot;);            index = i;            break;        &#125;    &#125;    if(index == -1)&#123;        System.out.println(&quot;无8&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="Homework07-java-1"><a href="#Homework07-java-1" class="headerlink" title="Homework07.java"></a>Homework07.java</h3><p>public class Homework07{</p><pre><code>public static void main(String[] args)&#123;    //冒泡排序    int[] arr = &#123;23,56,21,15,12,45,67,12,31,41,13&#125;;    int temp = 0;    for(int i = 0; i &lt; arr.length; i++)&#123;        for(int j = 0; j &lt; arr.length - i - 1; j++ )&#123;            //从小到大条件反过来            if(arr[j] &gt; arr[j + 1])&#123;                temp = arr[j];                arr[j] = arr[j + 1];                arr[j + 1] = temp;            &#125;        &#125;    &#125;    for(int i = 0; i &lt; arr.length; i++)&#123;        System.out.print( &quot; &quot; + arr[i]);    &#125;&#125;</code></pre><p>}</p><h2 id="第七章-面向对象的编程-基础"><a href="#第七章-面向对象的编程-基础" class="headerlink" title="第七章 面向对象的编程(基础)"></a>第七章 面向对象的编程(基础)</h2><h3 id="MethodExercise01-java"><a href="#MethodExercise01-java" class="headerlink" title="MethodExercise01.java"></a>MethodExercise01.java</h3><p>public class MethodExercise01{</p><pre><code>public static void main(String[] args)&#123;    //编写类 AA ，    //有一个方法：判断一个数是奇数  还是偶数,     //返回 boolean    AA a = new AA();    if(a.isOdd(3))&#123;        System.out.println(&quot;是奇数&quot;);    &#125;else&#123;        System.out.println(&quot;是偶数&quot;);    &#125;&#125;</code></pre><p>}</p><p>class AA{</p><pre><code>public boolean isOdd(int n)&#123;    return n % 2 == 1 ? true : false;&#125;</code></pre><p>}</p><h3 id="MethodExercise02-java"><a href="#MethodExercise02-java" class="headerlink" title="MethodExercise02.java"></a>MethodExercise02.java</h3><p>public class MethodExercise02{</p><pre><code>public static void main(String[] args)&#123;    //根据行、列、字符打印 对应行数和列数的字符，    //比如：行：4，列：4，字符#,则打印相应的效果    /*    ####    ####    ####    ####     */    AA show = new AA();    show.show(7,4,&#39;*&#39;);    &#125;</code></pre><p>}<br>class AA{</p><pre><code>public void show(int num1, int num2, char c)&#123;    for(int i = 0; i &lt; num1; i++)&#123;        for(int j = 0; j &lt; num2; j++)&#123;            System.out.print(c);        &#125;        System.out.println(&quot;&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="MethodExercise03-java"><a href="#MethodExercise03-java" class="headerlink" title="MethodExercise03.java"></a>MethodExercise03.java</h3><p>public class MethodExercise03{</p><pre><code>public static void main(String[] args)&#123;    //1) 编写类 MyTools 类，    //编写一个方法可以打印二维数组的数据。    // 2) 编写一个方法 copyPerson，    // 可以复制一个 Person 对象，    // 返回复制的对象。克隆对象，     // 注意要求得到新对象和原来的 对象是两个独立的对象，    // 只是他们的属性相同    int[] arr = &#123;23,65,23,87,12,13&#125;;    MyTools myTools = new MyTools();    myTools.printArr(arr);    Person person01 = new Person();    person01.name = &quot;ljq&quot;;    person01.age = 10000;    Person person02 = myTools.copyPerson(person01);    System.out.print(&quot; &quot; + person01.name + &quot; &quot; + person01.age);    System.out.print(&quot; &quot; + person02.name + &quot; &quot; + person02.age);    System.out.print(person01 == person02);&#125;</code></pre><p>}<br>class Person{</p><pre><code>String name;int age;</code></pre><p>}<br>class MyTools{</p><pre><code>public void printArr(int[] arr)&#123;    //遍历 打印    for(int i = 0; i &lt; arr.length; i++)&#123;        System.out.print(&quot; &quot; + arr[i]);    &#125;&#125;public Person copyPerson(Person person01)&#123;    Person person02 = new Person();    person02.name = person01.name;    person02.age = person01.age;    return person02;&#125; </code></pre><p>}</p><h3 id="RecursionExercise01-java（桃子问题和老师不大一样）"><a href="#RecursionExercise01-java（桃子问题和老师不大一样）" class="headerlink" title="RecursionExercise01.java（桃子问题和老师不大一样）"></a>RecursionExercise01.java（桃子问题和老师不大一样）</h3><p>public class RecursionExercise01{</p><pre><code>public static void main(String[] args)&#123;    //运用递归求斐波那契数    //1，1，2，3，5，8，13...    //给一个 n  求他的值是多少    int n = 7;    Mytools t = new Mytools();    int num = t.tools(n);    if(num != -1)&#123;        System.out.println(&quot;当n=&quot; + n +&quot;的时候，斐波那契数为&quot; +  t.tools(n));    &#125;    //有一堆桃子，猴子第一天吃了其中的一半    //并且多吃了一个！以后每天都吃一半    //然后再多吃一个，当吃到第十天。    //、发现只有一个桃子了    //问最初有几个桃子    int sum = t.peach(10);    System.out.println(&quot;总共桃子的个数为&quot; + sum);&#125;</code></pre><p>}<br>class Mytools{</p><pre><code>public int tools(int n)&#123;    if(n &gt;= 1)&#123;        if(n == 1 || n == 2)&#123;            return 1;        &#125;else&#123;            return tools(n - 1) + tools(n - 2);        &#125;    &#125;else&#123;        System.out.println(&quot;要求输入&gt;=整数&quot;);        return -1;    &#125;&#125;public int peach(int day)&#123;    if(day == 1)&#123;        return 1;    &#125;else&#123;        return (peach(day - 1) + 1) * 2;    &#125;&#125;</code></pre><p>}</p><h3 id="MiGong-java-老输出迷宫"><a href="#MiGong-java-老输出迷宫" class="headerlink" title="MiGong.java  老输出迷宫"></a>MiGong.java  老输出迷宫</h3><p>public class MiGong{</p><pre><code>public static void main(String[] args)&#123;    //建立一个数组，符合题目要求    int[][] arr = new int[8][7];    for(int i = 0; i &lt; 7; i++)&#123;        //第一行和最后一行为1        arr[0][i] = 1;        arr[7][i] = 1;    &#125;    for(int i = 0; i &lt; 8; i++)&#123;        //第一列和最后一列为1        arr[i][0] = 1;        arr[i][6] = 1;    &#125;    //特殊的那两个    arr[3][1] = 1;    arr[3][2] = 1;    System.out.println(&quot;====初始的迷宫====&quot;);    for(int i = 0; i &lt; arr.length; i++)&#123;        for(int j = 0; j &lt; arr[i].length; j++)&#123;            System.out.print(&quot; &quot; + arr[i][j]);        &#125;        System.out.println(&quot;&quot;);    &#125;    M m = new M();    m.findWay(arr,1,1);    System.out.println(&quot;====找到路的的迷宫====&quot;);    for(int i = 0; i &lt; arr.length; i++)&#123;        for(int j = 0; j &lt; arr[i].length; j++)&#123;            System.out.print(&quot; &quot; + arr[i][j]);        &#125;        System.out.println(&quot;&quot;);    &#125;&#125;</code></pre><p>}<br>class M{</p><pre><code>public boolean findWay(int[][] arr, int i, int j)&#123;    //障碍物 1， 走得通 2，走过不通的 3，    //起始点（1，1）  终点（6，5）    if(arr[6][5] == 2)&#123;        //终点为2，则返回true        return true;    &#125;else&#123;        if(arr[i][j] == 0)&#123;            //为0，则代表能走，定义当前位置为2            arr[i][j] = 2;            if(findWay(arr, i + 1, j ))&#123;                //向下                return true;            &#125;else if(findWay(arr, i, j + 1 ))&#123;                //向右                return true;            &#125;else if(findWay(arr, i - 1, j ))&#123;                //向上                return true;            &#125;else if(findWay(arr, i, j - 1 ))&#123;                //向左                return true;            &#125;else&#123;                arr[i][j] = 3;                return false;            &#125;        &#125;else&#123;            return false;        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="HanoiTower-java-汉诺塔（太巧妙了，可以多看几遍）"><a href="#HanoiTower-java-汉诺塔（太巧妙了，可以多看几遍）" class="headerlink" title="HanoiTower.java 汉诺塔（太巧妙了，可以多看几遍）"></a>HanoiTower.java 汉诺塔（太巧妙了，可以多看几遍）</h3><p>public class HanoiTower{</p><pre><code>public static void main(String[] args) &#123;    T t1 = new T();    t1.move(5,&#39;A&#39;, &#39;B&#39;, &#39;C&#39;);&#125;</code></pre><p>}<br>class T{</p><pre><code>public void move(int num, char a, char b, char c)&#123;    if(num == 1)&#123;        //只有一个圆盘        System.out.println(a + &quot;-&gt;&quot; + c);    &#125;else&#123;        //把最上面的看成一个整体        //把最上面的移动到B        move(num - 1, a, c, b);        //把下面的移动到C        System.out.println(a + &quot;-&gt;&quot; + c);        //把最B柱的移动到C柱        move(num - 1, b, a, c);    &#125;&#125;</code></pre><p>}</p><h3 id="OverLoadExercise-java-老师的简单"><a href="#OverLoadExercise-java-老师的简单" class="headerlink" title="OverLoadExercise.java(老师的简单)"></a>OverLoadExercise.java(老师的简单)</h3><p>public class OverLoadExercise{</p><pre><code>public static void main(String[] args) &#123;    //类Methods中定义三个重载方法并调用    //方法名为m，    //1.一个int 执行：平方    //2. 两个int  执行：相乘    //3。 一个字符串   执行：输出字符串    int n = 2;    int m = 3;    String str = &quot;wawawa&quot;;    Methods t = new Methods();    t.m(n);    t.m(n,m);    t.m(str);    //定义三个重载max()    //1.返回两个int中的最大值    //2.返回两个double中的最大值    //3.返回三个double中的最大值    System.out.println(t.max(3, 4));    System.out.println(t.max(4.0, 3.0));    System.out.println(t.max(3.0, 4.0, 5.0));&#125;</code></pre><p>}<br>class Methods{</p><pre><code>public void m(int n)&#123;    System.out.println(n * n);&#125;public void m(int n, int m)&#123;    System.out.println(n * m);&#125;public void m(String str)&#123;    System.out.println(str);&#125;public int max(int n, int m)&#123;    if(m &gt; n)&#123;        return m;    &#125;else&#123;        return n;    &#125;&#125;public double max(double n, double m)&#123;    if(m &gt; n)&#123;        return m;    &#125;else&#123;        return n;    &#125;&#125;public double max(double n, double m, double q)&#123;    if(m &gt; n)&#123;        if(m &gt; q)&#123;            return m;        &#125;else&#123;            return q;        &#125;    &#125;else&#123;        if(n &gt; q)&#123;            return n;        &#125;else&#123;            return q;        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="VarParameterExercise-java-可变参数练习"><a href="#VarParameterExercise-java-可变参数练习" class="headerlink" title="VarParameterExercise.java 可变参数练习"></a>VarParameterExercise.java 可变参数练习</h3><p>public class VarParameterExercise{</p><pre><code>public static void main(String[] args) &#123;    HspMethod m = new HspMethod();    System.out.println(m.showScore(&quot;ljq&quot;, 19.5, 0.5));&#125;</code></pre><p>}<br>class HspMethod{</p><pre><code>public String showScore(String name, double...nums)&#123;    double sum = 0;    for(int i = 0; i &lt; nums.length; i++)&#123;        sum += nums[i];    &#125;        return name + &quot;总成绩：&quot; + sum;&#125;</code></pre><p>}</p><h3 id="ConstructorExercise-java"><a href="#ConstructorExercise-java" class="headerlink" title="ConstructorExercise.java"></a>ConstructorExercise.java</h3><p>public class ConstructorExercise{</p><pre><code>public static void main(String[] args) &#123;    //第一个无参构造器：利用构造器设置所有人的     //age 属性初始值都为 18     //第二个带 pName 和 pAge 两个参数的构造器：    //使得每次创建 Person     //对象的同时初始化对象的     //age 属性值和 name 属性值。     //分别使用不同的构造器，创建对象    Person t = new Person();    System.out.println(t.name + t.age);    Person t1 = new Person(&quot;ljq&quot;,12);    System.out.println(t1.name + t1.age);&#125;</code></pre><p>}<br>class Person{</p><pre><code>String name;int age;public Person()&#123;    age = 18;&#125;public Person(String pName, int pAge)&#123;    name = pName;    age = pAge;&#125;</code></pre><p>}</p><h3 id="TestPerson-java"><a href="#TestPerson-java" class="headerlink" title="TestPerson.java"></a>TestPerson.java</h3><p>public class TestPerson{</p><pre><code>public static void main(String[] args) &#123;    //定义 Person 类，里面有 name、age 属性，    //并提供 compareTo 比较方法，    //用于判断是否和另一个人相等，提供测试类 TestPerson 用于测试,    // 名字和年龄完全一样，    //就返回 true, 否则返回 false    Person t1 = new Person(&quot;ljq&quot;, 23);    Person t2 = new Person(&quot;ljl&quot;, 23);    System.out.println(t1.compareTo(t2));&#125;</code></pre><p>}<br>class Person{</p><pre><code>String name;int age;public Person(String name, int age)&#123;    this.name = name;    this.age = age;&#125; public boolean compareTo(Person p)&#123;    return this.name.equals(p.name) &amp;&amp; this.age == age;&#125;</code></pre><p>}</p><h3 id="Homework01-java-3"><a href="#Homework01-java-3" class="headerlink" title="Homework01.java"></a>Homework01.java</h3><p>public class Homework01{</p><pre><code>public static void main(String[] args) &#123;    //类A01，方法max    //实现求出某个double数组中的最大值    //并返回    double[] arr = &#123;4.3, 6.4, 2.1, 3.0&#125;;    A01 a = new A01();    Double res = a.max(arr);    if(res != null)&#123;        System.out.println(res);     &#125;else&#123;        System.out.println(&quot;你输入的数组有误，数组不能为null，或&#123;&#125;&quot;);     &#125;&#125;</code></pre><p>}<br>class A01{</p><pre><code>public Double max(double[] arr)&#123;    //保证代码的健壮性    //如果长度小于等于0？？？    //如果输入为null？？？    if(arr != null &amp;&amp; arr.length &gt; 0)&#123;        //定义一个辅助变量,假设他是最大值。        double max = arr[0];        for(int i = 1; i &lt; arr.length ; i++)&#123;            if(max &lt; arr[i])&#123;                max = arr[i];            &#125;        &#125;        return max;    &#125;else&#123;        return null;    &#125;&#125;</code></pre><p>}</p><h3 id="Homework02-java-3"><a href="#Homework02-java-3" class="headerlink" title="Homework02.java"></a>Homework02.java</h3><p>public class Homework02{</p><pre><code>public static void main(String[] args) &#123;    //类A02  方法find  实现：    //查找某字符串是否在数组中，    //并返回索引值，如果找不到返回-1    String[] strs = &#123;&quot;哈哈&quot;, &quot;哈哈哈&quot;, &quot;haha&quot;&#125;;    String str = &quot;哈&quot;;    A02 a = new A02();    if(a.find(strs, str) != -2)&#123;        System.out.println(a.find(strs, str));    &#125;else&#123;        System.out.println(&quot;输入的数组必须不能为空并且长度大于0&quot;);    &#125;&#125;</code></pre><p>}<br>class A02{</p><pre><code>public int find(String[] strs, String str)&#123;    //保证健壮性    //数组为空？？    //数组为null？？    if(strs != null &amp;&amp; strs.length &gt; 0)&#123;        int index = -1;        //遍历查找        for(int i = 0; i &lt; strs.length; i++)&#123;            if(str.equals(strs[i]))&#123;                index = i;            &#125;        &#125;        return index;    &#125;else&#123;        return -2;    &#125;&#125;</code></pre><p>}</p><h3 id="Homework03-java-2"><a href="#Homework03-java-2" class="headerlink" title="Homework03.java"></a>Homework03.java</h3><p>public class Homework03{</p><pre><code>public static void main(String[] args) &#123;    //类Book，方法updatePrice 实现：    //更改某本书的价格，具体：    //如果价格&gt; 150则改为150，    //如果价格&gt; 100则改为100    Book b = new Book(&quot;侠客行&quot;, 180);    b.info();    b.updatePrice();    b.info();&#125;</code></pre><p>}<br>class Book{</p><pre><code>String name;double price;//建立构造器public Book(String name, double price)&#123;    this.name = name;    this.price = price;&#125;//建立更该方法public void updatePrice()&#123;    //运用分支更改    if(price &gt; 150)&#123;        price = 150;    &#125;else if(price &gt; 100)&#123;        price = 100;    &#125;&#125;//打印public void info()&#123;    System.out.println(&quot;name:&quot; + name + &quot;price:&quot; + price);&#125;</code></pre><p>}</p><h3 id="Homework04-java-4"><a href="#Homework04-java-4" class="headerlink" title="Homework04.java"></a>Homework04.java</h3><p>public class Homework04{</p><pre><code>public static void main(String[] args) &#123;    //类A03 实现：数组复制copyArr    //输入旧数组，返回新数组    //元素和旧数组一样    int[] arr = &#123;2, 3, 1, 5, 7, 3&#125;;    for(int i = 0; i &lt; arr.length; i++)&#123;        System.out.print(&quot; &quot; + arr[i]);    &#125;    System.out.println(&quot;&quot;);    A03 a = new A03();    int[] newArr = a.copyArr(arr);    System.out.println(&quot;====返回的新数组====&quot;);    for(int i = 0; i &lt; newArr.length; i++)&#123;        System.out.print(&quot; &quot; + newArr[i]);    &#125;&#125;</code></pre><p>}<br>class A03{</p><pre><code>public int[] copyArr(int[] arr)&#123;    int[] newArr = new int[arr.length];    for(int i = 0; i &lt; arr.length; i++)&#123;        newArr[i] = arr[i];    &#125;    return newArr;&#125;    </code></pre><p>}</p><h3 id="Homework05-java（和老师的不太一样）"><a href="#Homework05-java（和老师的不太一样）" class="headerlink" title="Homework05.java（和老师的不太一样）"></a>Homework05.java（和老师的不太一样）</h3><p>public class Homework05{</p><pre><code>public static void main(String[] args) &#123;    //园类Circle 属性 半径      //提供显示圆周长；    //提供显示圆面积；    double r = 3;    Circle y1 = new Circle(r);    y1.c();    y1.s();&#125;</code></pre><p>}<br>class Circle{</p><pre><code>double r;public Circle(double r)&#123;    this.r = r;&#125;public void c()&#123;    System.out.println(&quot;圆的周长为：&quot; + 2 * Math.PI * r);&#125;public void s()&#123;    System.out.println(&quot;圆的面积为：&quot; + r * Math.PI * r);&#125;    </code></pre><p>}</p><h3 id="Homework06-java-1"><a href="#Homework06-java-1" class="headerlink" title="Homework06.java"></a>Homework06.java</h3><p>public class Homework06{</p><pre><code>public static void main(String[] args) &#123;    //类Cale 在其中定义两个变量，两个操作数    //定义四个方法，实现和，差，乘，商    //（除数为零的话，提示）    //并创建两个对象分别测试    //Sum, difference, product, quotient    Cale c = new Cale(2, 0);    System.out.println(c.sum());    System.out.println(&quot;---&quot;);    System.out.println(c.difference());    System.out.println(&quot;---&quot;);    System.out.println(c.product());    System.out.println(&quot;---&quot;);    Double div = c.quotient();    if(div != null)&#123;        System.out.println(c.quotient());    &#125;&#125;</code></pre><p>}<br>class Cale{</p><pre><code>double num1;double num2;public Cale(double num1,double num2)&#123;    this.num1 = num1;    this.num2 = num2;&#125;public double sum()&#123;    return num1 + num2;&#125;public double difference()&#123;    return num1 - num2;&#125;public double product()&#123;    return num1 * num2;&#125;public Double quotient()&#123;    //除数为零，返回空，定义一个包装类    if(num2 == 0)&#123;                    System.out.println(&quot;除数不能为零&quot;);        return null;    &#125;else&#123;        return num1 / num2;    &#125;&#125;</code></pre><p>}</p><h3 id="Homework07-java-2"><a href="#Homework07-java-2" class="headerlink" title="Homework07.java"></a>Homework07.java</h3><p>public class Homework07{</p><pre><code>public static void main(String[] args) &#123;    //类Dog 属性 name，color，age    //定义输出方法show（）显示信息    //并创建对象进行测试    Dog d1 = new Dog(&quot;ljl&quot;, &quot;黑白花&quot;, 19);    d1.show();&#125;</code></pre><p>}<br>class Dog{</p><pre><code>String name;String color;int age;public Dog(String name, String color, int age)&#123;    this.name = name;    this.color = color;    this.age = age;&#125;public void show()&#123;    System.out.println(&quot;name:&quot; + name + &quot;\tcolor&quot; + color + &quot;\tage:&quot; + age);&#125;</code></pre><p>}</p><h3 id="Homework08-java（解析自查）"><a href="#Homework08-java（解析自查）" class="headerlink" title="Homework08.java（解析自查）"></a>Homework08.java（解析自查）</h3><p>（10，9，10）</p><h3 id="Homework09-java-1"><a href="#Homework09-java-1" class="headerlink" title="Homework09.java"></a>Homework09.java</h3><p>public class Homework09{</p><pre><code>public static void main(String[] args) &#123;    //类 Music ，属性 音乐名name 音乐时长times    //播放play功能， 返回本身信息getInfo    Music m1 = new Music(&quot;一次就好&quot;, 4.35);    m1.play();    System.out.println(m1.getInfo());&#125;</code></pre><p>}<br>class Music{</p><pre><code>String name;double times;public Music(String name, double times)&#123;    this.name = name;    this.times = times;&#125;public void play()&#123;    System.out.println(&quot;音乐&quot; + name + &quot;正在播放中。。。时长为&quot; + times + &quot;秒&quot;);&#125;public String getInfo()&#123;    return name +&quot;\t&quot; + times;&#125;</code></pre><p>}</p><h3 id="Homework10-java（解析自查）"><a href="#Homework10-java（解析自查）" class="headerlink" title="Homework10.java（解析自查）"></a>Homework10.java（解析自查）</h3><ol><li><p>（101，100，101，101）</p><h3 id="Homework11-java"><a href="#Homework11-java" class="headerlink" title="Homework11.java"></a>Homework11.java</h3></li><li><p>public double method(double d1, double d2){…}</p><h3 id="Homework12-java"><a href="#Homework12-java" class="headerlink" title="Homework12.java"></a>Homework12.java</h3><p>public class Homework12{</p><p> public static void main(String[] args) {</p><pre><code> //类 Employee 属性 （名字，性别，年龄，职位，薪水） //提供三个构造器，可以初始化：  //1.（名字，性别，年龄，职位，薪水） //2.（名字，性别，年龄） //3.（职位，薪水） Employee e1 = new Employee(&quot;东方不败&quot;,&quot;不知男女&quot;, 101,&quot;天下第一&quot;,10000.0); e1.info();</code></pre><p> }<br>}<br>class Employee{</p><p> String name;<br> String gender;<br> int age;<br> String position;<br> double pay;<br> //因为要复用构造器，<br> //所以，先从属性少的构造器开始使用；<br> public Employee(String position, double pay){</p><pre><code> this.position = position; this.pay = pay;</code></pre><p> }<br> public Employee(String name, String gender, int age){</p><pre><code> this.name = name; this.gender = gender; this.age = age;</code></pre><p> }<br> public Employee(String name, String gender, int age, String position, double pay){</p><pre><code> this(name, gender, age); this.position = position; this.pay = pay;</code></pre><p> }<br> public void info(){</p><pre><code> System.out.println(name + gender + age + position + pay);</code></pre><p> }<br>}</p><h3 id="Homework13-java"><a href="#Homework13-java" class="headerlink" title="Homework13.java"></a>Homework13.java</h3><p>public class Homework13{</p><p> public static void main(String[] args) {</p><pre><code> //类Circle 属性 radius 方法fingArea（） //返回圆的面积 //类PassObject，方法 printAreas（） //定义:public void printAreas(Circle c,int times) //printAreas 方法中打印1到times之间的每个整数半径值 Circle c = new Circle(); PassObject p1 = new PassObject(); p1.printAreas(c, 5);</code></pre><p> }<br>}<br>class Circle{</p><p> double radius;<br> public Circle(){</p><p> }<br> public Circle(double radius){</p><pre><code> this.radius = radius;</code></pre><p> }<br> public double findArea(){</p><pre><code> return radius * radius * Math.PI;</code></pre><p> }<br> //添加方法，修改半径<br> public void setRadius(int radius){</p><pre><code> this.radius = radius;</code></pre><p> }<br>}<br>class PassObject{</p><p> public void printAreas(Circle c, int times){</p><pre><code> System.out.println(&quot;radius\t&quot; + &quot;Area&quot;); for(int i = 1; i &lt;= times; i++)&#123;     c.setRadius(i);//修改圆的半径属性     System.out.println((double)i + &quot;\t&quot; + c.findArea()); &#125;</code></pre><p> }<br>}</p><h3 id="Homework14-java（纯自己手写，好乱，有瑕疵，老师写的在下面）"><a href="#Homework14-java（纯自己手写，好乱，有瑕疵，老师写的在下面）" class="headerlink" title="Homework14.java（纯自己手写，好乱，有瑕疵，老师写的在下面）"></a>Homework14.java（纯自己手写，好乱，有瑕疵，老师写的在下面）</h3><p>import java.util.Scanner;</p></li></ol><p>import java.util.Random;</p><p>public class Homework14{</p><pre><code>public static void main(String[] args) &#123;    //类 Tom  猜拳游戏    //给出输赢次数    Tom t = new Tom();    CaiQuan c = new CaiQuan();    label1 :    while(true)&#123;        int i = 0;        System.out.println(&quot;第&quot; + (c.count + 1) + &quot;次猜拳&quot;);        while(true)&#123;            int j = 0;            System.out.println(&quot;输入你的手势&quot;);            Scanner myScanner = new Scanner(System.in);            i = myScanner.nextInt();            if(i == 0 || i == 1 || i == 2)&#123;                break;            &#125;else&#123;                System.out.println(&quot;你输的不对，请输入0或1或2&quot;);            &#125;        &#125;        System.out.println(&quot;电脑出&quot; + t.num0);        int numReturn = c.caiQuanNum(t, i);        if(numReturn == 3)&#123;            System.out.println(&quot;你赢了&quot;);        &#125;else if(numReturn == 4)&#123;            System.out.println(&quot;你输了&quot;);        &#125;else if(numReturn == 5)&#123;            System.out.println(&quot;打平&quot;);        &#125;        label2:        while(true)&#123;            System.out.println(&quot;是否继续  y/n?&quot;);            Scanner myScanner = new Scanner(System.in);            char c1 = myScanner.next().charAt(0);            if(c1 == &#39;n&#39;)&#123;                break label1;            &#125;else if(c1 == &#39;y&#39;)&#123;                break label2;            &#125;else&#123;                System.out.println(&quot;你输入的有误，请重新输入  y/n?&quot;);            &#125;        &#125;    &#125;&#125;    </code></pre><p>}<br>class Tom{</p><pre><code>int num;int num0;public Tom()&#123;    this.num = 0;    this.num0 =0;&#125;public void setnum(int num)&#123;    this.num = num;&#125;public int caiQuan()&#123;    //0 = 石头，1 = 剪刀，2 = 布    //返回值，3 = 赢 4 = 输 5 = 平 numReturn    int min = 0;    int max = 2;    Random r = new Random();                                                                          num0 = r.nextInt(3);     if(num0 == this.num)&#123;        return 5;    &#125;else if(this.num == 0 &amp;&amp; num0 == 1)&#123;        return 3;      &#125;else if(this.num == 1 &amp;&amp; num0 == 2)&#123;        return 3;    &#125;else if(this.num == 2 &amp;&amp; num0 == 0)&#123;        return 3;    &#125;else&#123;        return 4;    &#125;&#125;</code></pre><p>}<br>class CaiQuan{</p><pre><code>int count;public int caiQuanNum(Tom t, int num)&#123;    t.setnum(num);    this.count++;    return t.caiQuan();&#125;</code></pre><p>}</p><h3 id="MoraGame-java"><a href="#MoraGame-java" class="headerlink" title="MoraGame.java"></a>MoraGame.java</h3><p>import java.util.Random;<br>import java.util.Scanner;                                                                             </p><p>/*<br>请编写一个猜拳的游戏<br>有个人 Tom，设计他的成员变量. 成员方法, 可以电脑猜拳. 电脑每次都会随机生成 0, 1, 2<br>0 表示 石头 1 表示剪刀 2 表示 布<br>并要可以显示 Tom的输赢次数（清单）, 假定 玩三次.<br> */<br> // 测试类,主类<br>public class MoraGame {                                                                               </p><pre><code>// 测试                                                                                             public static void main(String[] args) &#123;                                                              // 创建一个玩家对象                                                                                       Tom t = new Tom();                                                                                // 用来记录最后输赢的次数                                                                                    int isWinCount = 0;                                                                                                                                                                                 // 创建一个二维数组，用来接收局数，Tom出拳情况以及电脑出拳情况                                                                int[][] arr1 = new int[3][3];                                                                     int j = 0;                                                                                                                                                                                          // 创建一个一维数组，用来接收输赢情况                                                                              String[] arr2 = new String[3];                                                                                                                                                                      Scanner scanner = new Scanner(System.in);                                                         for (int i = 0; i &lt; 3; i++) &#123;   //比赛3次                                                                      // 获取玩家出的拳                                                                                        System.out.println(&quot;请输入你要出的拳（0-拳头，1-剪刀，2-布）：&quot;);                                                   int num = scanner.nextInt();                                                                      t.setTomGuessNum(num);                                                                            int tomGuess = t.getTomGuessNum();                                                                arr1[i][j + 1] = tomGuess;                                                                                                                                                                          // 获取电脑出的拳                                                                                        int comGuess = t.computerNum();                                                                   arr1[i][j + 2] = comGuess;                                                                                                                                                                          // 将玩家猜的拳与电脑做比较                                                                                   String isWin = t.vsComputer();                                                                    arr2[i] = isWin;                                                                                  arr1[i][j] = t.count;                                                                                                                                                                               // 对每一局的情况进行输出                                                                                   System.out.println(&quot;=========================================&quot;);                                   System.out.println(&quot;局数\t玩家的出拳\t电脑的出拳\t输赢情况&quot;);                                                     System.out.println(t.count + &quot;\t&quot; + tomGuess + &quot;\t\t&quot; + comGuess + &quot;\t\t&quot; + t.vsComputer());        System.out.println(&quot;=========================================&quot;);                                  System.out.println(&quot;\n\n&quot;);                                                                       isWinCount = t.winCount(isWin);                                                               &#125;                                                                                                                                                                                                   // 对游戏的最终结果进行输出                                                                                   System.out.println(&quot;局数\t玩家的出拳\t电脑的出拳\t\t输赢情况&quot;);                                                   for (int a = 0; a &lt; arr1.length; a++) &#123;                                                               for (int b = 0; b &lt; arr1[a].length; b++) &#123;                                                            System.out.print(arr1[a][b] + &quot;\t\t\t&quot;);                                                      &#125;                                                                                                                                                                                                   System.out.print(arr2[a]);                                                                        System.out.println();                                                                         &#125;                                                                                                 System.out.println(&quot;你赢了&quot; + isWinCount + &quot;次&quot;);                                                 &#125;                                                                                                                                                                                                   </code></pre><p>}                                                                                                     </p><p>// Tom类<br>class Tom {     // 核心代码<br>    // 玩家出拳的类型<br>    int tomGuessNum; //0,1,2<br>    // 电脑出拳的类型<br>    int comGuessNum; //0,1,2<br>    // 玩家赢的次数<br>    int winCountNum;<br>    // 比赛的次数<br>    int count = 1;   //一共比赛3次                                                                                 </p><pre><code>public void showInfo() &#123;    //....&#125;/**                                                                                                * 电脑随机生成猜拳的数字的方法                                                                                  * @return                                                                                         */                                                                                               public int computerNum() &#123;                                                                            Random r = new Random();                                                                          comGuessNum = r.nextInt(3);      // 方法 返回 0-2的随机数                                                                 // System.out.println(comGuessNum);                                                               return comGuessNum;                                                                           &#125;                                                                                                                                                                                                   /**                                                                                                * 设置玩家猜拳的数字的方法                                                                                    * @param tomGuessNum                                                                              */                                                                                               public void setTomGuessNum(int tomGuessNum) &#123;                                                         if (tomGuessNum &gt; 2 || tomGuessNum &lt; 0) &#123;         //抛出一个异常, 李同学会写，没有处理        throw new IllegalArgumentException(&quot;数字输入错误&quot;);                                                 &#125;                                                                                                 this.tomGuessNum = tomGuessNum;                                                               &#125;                                                                                                                                                                                                   public int getTomGuessNum() &#123;                                                                         return tomGuessNum;                                                                           &#125;                                                                                                                                                                                                   /**                                                                                                * 比较猜拳的结果                                                                                         * @return 玩家赢返回true，否则返回false                                                                     */                                                                                               public String vsComputer() &#123;      //比较巧    if (tomGuessNum == 0 &amp;&amp; comGuessNum == 1) &#123;                                                           return &quot;你赢了&quot;;                                                                                 &#125; else if (tomGuessNum == 1 &amp;&amp; comGuessNum == 2) &#123;                                                    return &quot;你赢了&quot;;                                                                                 &#125; else if (tomGuessNum == 2 &amp;&amp; comGuessNum == 0) &#123;                                                    return &quot;你赢了&quot;;                                                                                 &#125; else if (tomGuessNum == comGuessNum)&#123;                                                               return &quot;平手&quot;;                                                                                  &#125; else &#123;                                                                                              return &quot;你输了&quot;;                                                                                 &#125;                                                                                             &#125;                                                                                                                                                                                                   /**                                                                                                * 记录玩家赢的次数                                                                                        * @return                                                                                         */                                                                                               public int winCount(String s) &#123;                                                                       count++;    //控制玩的次数                                                                                       if (s.equals(&quot;你赢了&quot;)) &#123;     //统计赢的次数                                                                           winCountNum++;                                                                                &#125;                                                                                                 return winCountNum;                                                                           &#125;                                                                                                                                                                                                   </code></pre><p>} </p><h2 id="第八章-面向对象的编程（中级）"><a href="#第八章-面向对象的编程（中级）" class="headerlink" title="第八章 面向对象的编程（中级）"></a>第八章 面向对象的编程（中级）</h2><h3 id="import01-java"><a href="#import01-java" class="headerlink" title="import01.java"></a>import01.java</h3><p>package com.javacode;</p><p>import java.util.Arrays;</p><p>public class Import01 {</p><pre><code>public static void main(String[] args) &#123;    int[] arr = &#123;2,5,1,8,23,7,9&#125;;    Arrays.sort(arr);    for (int i = 0; i &lt; arr.length; i++)&#123;        System.out.print(arr[i] + &quot; &quot;);    &#125;&#125;</code></pre><p>} </p><h3 id="com-javacode-AccountTest-java"><a href="#com-javacode-AccountTest-java" class="headerlink" title="com.javacode===AccountTest.java"></a>com.javacode===AccountTest.java</h3><p>package com.javacode;</p><p>public class AccountTest {</p><pre><code>/** * 类 Account，属性：姓名（长度为2,3,4）如果不满足，给出提示信息和默认值 * 余额(必须大于20)如果不满足，给出提示信息和默认值 * 密码（必须是六位）如果不满足，给出提示信息和默认值 * 通过setXxx的方法给Account赋值。在AccountTest中测试 */public static void main(String[] args) &#123;    Account account = new Account();    account.setName(&quot;哈哈哈&quot;);    account.setBalance(13);    account.setPassword(&quot;123455&quot;);    System.out.println(account.info());&#125;</code></pre><p>}</p><p>class Account {</p><pre><code>private String name;private double balance;private String password;public Account() &#123;&#125;public Account(String name, double balance, String password) &#123;    this.setName(name);    this.setBalance(balance);    this.setPassword(password);&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    if (name.length() &gt;= 2 &amp;&amp; name.length() &lt;= 4) &#123;        this.name = name;    &#125; else &#123;        System.out.println(&quot;你输入的名字需在2-4长度内，已给出默认值有误&quot;);        this.name = &quot;有误&quot;;    &#125;&#125;public double getBalance() &#123;    return balance;&#125;public void setBalance(double balance) &#123;    if (balance &gt; 20) &#123;        this.balance = balance;    &#125; else &#123;        System.out.println(&quot;你输入的余额必须大于20，已给出默认值21&quot;);        this.balance = 21;    &#125;&#125;public String getPassword() &#123;    return password;&#125;public void setPassword(String password) &#123;    if (password.length() == 6) &#123;        this.password = password;    &#125; else &#123;        System.out.println(&quot;你输入的密码有误，已给出默认值000000&quot;);        this.password = &quot;000000&quot;;    &#125;&#125;public String info() &#123;    return &quot;name = &quot; + this.name + &quot;balance =&quot; + this.balance + &quot;password= &quot; + this.password;&#125;</code></pre><p>}</p><h3 id="ExtendExercise-继承练习"><a href="#ExtendExercise-继承练习" class="headerlink" title="ExtendExercise(继承练习)"></a>ExtendExercise(继承练习)</h3><ul><li>package com.javacode.estend;</li></ul><p>/**</p><ul><li>编写 Computer 类，包含 CPU、内存、硬盘等属性，</li><li>getDetails 方法用于返回 Computer 的详细信息</li><li>编写 PC 子类，继承 Computer 类，添加特有属性【品牌 brand】</li><li>编写 NotePad 子类，继承 Computer 类，添加特有属性【color】</li><li>编写 Test 类，在 main 方法中创建 PC 和 NotePad 对象，</li><li>分别给对象中特有的属性赋值，以及从 Computer 类继承的 属性赋值，</li><li>并使用方法并打印输出信息</li><li>/</li></ul><p>public class ExtendsExercise {<br>}</p><ul><li>package com.javacode.estend;</li></ul><p>public class Test {</p><pre><code>//* 编写 Test 类，在 main 方法中创建 PC 和 NotePad 对象，// * 分别给对象中特有的属性赋值，以及从 Computer 类继承的 属性赋值，// * 并使用方法并打印输出信息public static void main(String[] args) &#123;    PC pc = new PC(&quot;jjj牌&quot;,16,1024,&quot;jjj牌&quot;);    NotePad notePad = new NotePad(&quot;jjj牌&quot;,16,1024,&quot;jjj牌&quot;,&quot;红色&quot;);    pc.setBrand(&quot;lll牌&quot;);    notePad.setColor(&quot;蓝色&quot;);    System.out.println(pc.printInfo());    System.out.println(notePad.printInfo2());&#125;</code></pre><p>}</p><ul><li>package com.javacode.estend;</li></ul><p>public class Computer {</p><pre><code>//编写 Computer 类，包含 CPU、内存、硬盘等属性，//getDetails 方法用于返回 Computer 的详细信息private String cpu;private int memory;private int hardDisk;public Computer(String cpu, int memory, int hardDisk) &#123;    this.cpu = cpu;    this.memory = memory;    this.hardDisk = hardDisk;&#125;public String getCpu() &#123;    return cpu;&#125;public void setCpu(String cpu) &#123;    this.cpu = cpu;&#125;public int getMemory() &#123;    return memory;&#125;public void setMemory(int memory) &#123;    this.memory = memory;&#125;public int getHardDisk() &#123;    return hardDisk;&#125;public void setHardDisk(int hardDisk) &#123;    this.hardDisk = hardDisk;&#125;public String getDetails()&#123;    return &quot;cpu=&quot; + cpu + &quot;memory=&quot; + memory + &quot;hardDisk=&quot;+ hardDisk;&#125;</code></pre><p>}</p><ul><li>package com.javacode.estend;</li></ul><p>public class PC extends Computer {</p><pre><code>//* 编写 PC 子类，继承 Computer 类，添加特有属性【品牌 brand】private String brand;public PC(String cpu, int memory, int hardDisk,String brand) &#123;    super(cpu, memory, hardDisk);    this.brand = brand;&#125;public String getBrand() &#123;    return brand;&#125;public void setBrand(String brand) &#123;    this.brand = brand;&#125;public String printInfo()&#123;    return getDetails() + &quot;brand=&quot; + brand;&#125;</code></pre><p>}</p><ul><li>package com.javacode.estend;</li></ul><p>public class NotePad extends PC {</p><pre><code>//* 编写 NotePad 子类，继承 Computer 类，添加特有属性【color】private String color;public NotePad(String cpu, int memory, int hardDisk, String brand, String color) &#123;    super(cpu, memory, hardDisk, brand);    this.color = color;&#125;public String getColor() &#123;    return color;&#125;public void setColor(String color) &#123;    this.color = color;&#125;public String printInfo2()&#123;    return printInfo() + &quot;color=&quot; + color;&#125;</code></pre><p>}</p><h3 id="overrideExercise-重写练习"><a href="#overrideExercise-重写练习" class="headerlink" title="overrideExercise(重写练习)"></a>overrideExercise(重写练习)</h3><p>package com.javacode.override;</p><p>/**</p><ul><li><ol><li>编写一个 Person 类，包括属性/private（name、age），构造器、方法 say(返回自我介绍的字符串）。</li></ol></li><li><ol start="2"><li>编写一个 Student 类，继承 Person 类，增加 id、score 属性/private，以及构造器，定义 say 方法(返回自我介绍的信息)。</li></ol></li><li><ol start="3"><li>在 main 中,分别创建 Person 和 Student 对象，调用 say 方法输出自我介绍</li></ol></li><li>/</li></ul><p>public class overrideExercise {</p><pre><code>public static void main(String[] args) &#123;    Person person = new Person(&quot;哈哈哈&quot;, 18);    Student student = new Student(&quot;哈哈&quot;, 28, &quot;hah&quot;, 99.9);    System.out.println(person.say());    System.out.println(student.say());&#125;</code></pre><p>}</p><p>package com.javacode.override;</p><p>public class Person {</p><pre><code>//编写一个 Person 类，包括属性/private（name、age），// 构造器、方法 say(返回自我介绍的字符串).private String name;private int age;public Person(String name, int age) &#123;    this.name = name;    this.age = age;&#125;public String say()&#123;    return &quot;name= &quot; + name + &quot;age= &quot; + age;&#125;</code></pre><p>}</p><p>package com.javacode.override;</p><p>public class Student extends Person{</p><pre><code>//编写一个 Student 类，继承 Person 类，// 增加 id、score 属性/private，// 以及构造器，定义 say 方法(返回自我介绍的信息)。private  String id;private double score;public Student(String name, int age, String id, double score) &#123;    super(name, age);    this.id = id;    this.score = score;&#125;@Overridepublic String say() &#123;    return super.say() + &quot;id= &quot; + id + &quot;score&quot; + score;&#125;</code></pre><p>}</p><h3 id="多态参数案例"><a href="#多态参数案例" class="headerlink" title="多态参数案例"></a>多态参数案例</h3><p>package com.javacode.polyparameter_;</p><p>public class polyparameter {</p><pre><code>public static void main(String[] args) &#123;    Worker worker= new Worker(&quot;小明&quot;, 3000);    Manager manger = new Manager(&quot;小刘&quot;, 5000, 200000);    polyparameter p = new polyparameter();    p.sBA(worker);    p.sBA(manger);    p.testWork(manger);    p.testWork(worker);&#125;public void sBA(Employee e)&#123;    System.out.println(e.getAnnual());&#125;public void testWork(Employee e)&#123;    if(e instanceof Worker)&#123;        ((Worker) e).work();    &#125;else if(e instanceof Manager)&#123;        ((Manager) e).manage();    &#125;else&#123;        System.out.println(&quot;你输入的类有误&quot;);    &#125;&#125;</code></pre><p>}</p><p>package com.javacode.polyparameter_;</p><p>public class Employee {<br>    private String name;<br>    private  double sal;</p><pre><code>public Employee(String name, double sal) &#123;    this.name = name;    this.sal = sal;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getSal() &#123;    return sal;&#125;public void setSal(double sal) &#123;    this.sal = sal;&#125;public  double getAnnual()&#123;    return 12 * getSal();&#125;</code></pre><p>}</p><p>package com.javacode.polyparameter_;</p><p>public class Worker extends Employee {<br>    public Worker(String name, double sal) {<br>        super(name, sal);<br>    }</p><pre><code>public void work()&#123;    System.out.println(&quot;工人正在工作&quot;);&#125;@Overridepublic double getAnnual() &#123;    return super.getAnnual();&#125;</code></pre><p>}</p><p>package com.javacode.polyparameter_;</p><p>public class Manager extends Employee{<br>    private double bonus;</p><pre><code>public Manager(String name, double sal, double bonus) &#123;    super(name, sal);    this.bonus = bonus;&#125;public void manage()&#123;    System.out.println(&quot;经理 正在管理&quot;);&#125;public double getBonus() &#123;    return bonus;&#125;public void setBonus(double bonus) &#123;    this.bonus = bonus;&#125;@Overridepublic double getAnnual() &#123;    return super.getAnnual() + getBonus();&#125;</code></pre><p>}</p><h3 id="EqualsExercise01（重写equals）"><a href="#EqualsExercise01（重写equals）" class="headerlink" title="EqualsExercise01（重写equals）"></a>EqualsExercise01（重写equals）</h3><p>package com.javacode.Object_;</p><p>public class EqualsExercise {</p><pre><code>//判断两个 Person 对象的内容是否相等，// 如果两个 Person 对象的各个属性值都一样，// 则返回 true，反之 false。public static void main(String[] args) &#123;    Person p1 = new Person(&quot;哈哈哈&quot;, 18);    Person p2 = new Person(&quot;哈哈哈&quot;, 18);    System.out.println(p1.equals(p2));&#125;</code></pre><p>}</p><p>package com.javacode.Object_;</p><p>public class Person {<br>    private String name;<br>    private int age;</p><pre><code>public Person(String name, int age) &#123;    this.name = name;    this.age = age;&#125;//重写equalspublic boolean equals(Object obj) &#123;    if(this == obj)&#123;        return true;    &#125;    if(obj instanceof Person)&#123;        Person p = (Person)obj;        return this.name.equals(p.name) &amp;&amp; this.age == p.age;    &#125;    return false;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;</code></pre><p>}</p><h3 id="Debug-尝试断点调试"><a href="#Debug-尝试断点调试" class="headerlink" title="Debug(尝试断点调试)"></a>Debug(尝试断点调试)</h3><ol><li>package com.javacode.debug_;</li></ol><p>public class Debug {</p><pre><code>public static void main(String[] args) &#123;    int sum = 0;    for (int i = 0; i &lt; 5; i++) &#123;        sum += i;        System.out.println(&quot;i= &quot; + i);        System.out.println(&quot;sum= &quot; + sum);    &#125;    System.out.println(&quot;end.....&quot;);&#125;</code></pre><p>}</p><ol start="2"><li>package com.javacode.debug_;</li></ol><p>public class DebugExercise01 {</p><pre><code>//debug对象创建的过程，加深理解public static void main(String[] args) &#123;    Person person = new Person(&quot;jack&quot;, 20);    System.out.println(person);&#125;</code></pre><p>}</p><p>class Person{<br>    String name;<br>    int age;</p><pre><code>public Person(String name, int age) &#123;    this.name = name;    this.age = age;&#125;@Overridepublic String toString() &#123;    return &quot;Person&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, age=&quot; + age +            &#39;&#125;&#39;;&#125;</code></pre><h3 id="Homework01"><a href="#Homework01" class="headerlink" title="Homework01"></a>Homework01</h3><p>package com.homework.code.h1;</p><p>public class Homework01 {</p><pre><code>//定义一个类Person，&#123;name,age,job&#125;//创建三个对象，按照年龄大小排序；public static void main(String[] args) &#123;    //创建个对象数组    Person[] person = new Person[3];    person[0] = new Person(&quot;jack1&quot;, 20, &quot;java后端工程师1&quot;);    person[1] = new Person(&quot;jack2&quot;, 50, &quot;java后端工程师2&quot;);    person[2] = new Person(&quot;jack3&quot;, 30, &quot;java后端工程师3&quot;);    //排序前    for (int i = 0; i &lt; person.length; i++) &#123;        System.out.println(person[i]);    &#125;    //利用冒泡    Person temp =null;    for (int i = 0; i &lt; person.length - 1; i++) &#123;        for (int j = 0; j &lt; person.length - 1 - i; j++) &#123;            if(person[j].getAge() &lt; person[j + 1].getAge())&#123;                temp =person[j];                person[j] = person[j + 1];                person[j + 1] = temp;            &#125;        &#125;    &#125;    //排序完    for (int i = 0; i &lt; person.length; i++) &#123;        System.out.println(person[i]);    &#125;&#125;</code></pre><p>}</p><p>class Person{</p><pre><code>private String name;private int age;private String job;public Person(String name, int age, String job) &#123;    this.name = name;    this.age = age;    this.job = job;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;public String getJob() &#123;    return job;&#125;public void setJob(String job) &#123;    this.job = job;&#125;@Overridepublic String toString() &#123;    return &quot;Person&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, age=&quot; + age +            &quot;, job=&#39;&quot; + job + &#39;\&#39;&#39; +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><h3 id="Homework02-1"><a href="#Homework02-1" class="headerlink" title="Homework02"></a>Homework02</h3><h3 id="Homework03"><a href="#Homework03" class="headerlink" title="Homework03"></a>Homework03</h3><p>package com.homework.code.h3;</p><p>public class Homework03 {</p><pre><code>public static void main(String[] args) &#123;    Professor professor = new Professor(&quot;hahah&quot;, 29, &quot;高级&quot;, 30000, 1.3);    professor.introduce();&#125;</code></pre><p>}</p><p>package com.homework.code.h3;</p><p>public class Teacher {</p><pre><code>private String name;private int age;private String post;private double sal;private double grade;public Teacher(String name, int age, String post, double sal, double grade) &#123;    this.name = name;    this.age = age;    this.post = post;    this.sal = sal;    this.grade = grade;&#125;public void introduce()&#123;    System.out.println(getName() + getAge() + getPost() + getSal() +getGrade());&#125;public double getGrade() &#123;    return grade;&#125;public void setGrade(double grade) &#123;    this.grade = grade;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;public String getPost() &#123;    return post;&#125;public void setPost(String post) &#123;    this.post = post;&#125;public double getSal() &#123;    return sal;&#125;public void setSal(double sal) &#123;    this.sal = sal;&#125;</code></pre><p>}</p><p>package com.homework.code.h3;</p><p>public class Professor extends Teacher {</p><pre><code>public Professor(String name, int age, String post, double sal, double grade) &#123;    super(name, age, post, sal, grade);&#125;@Overridepublic void introduce() &#123;    System.out.println(&quot;这是教授的信息&quot;);    super.introduce();&#125;</code></pre><p>}</p><h3 id="Homework04"><a href="#Homework04" class="headerlink" title="Homework04"></a>Homework04</h3><p>package com.homework.code.h4;</p><p>public class Homework04 {</p><pre><code>public static void main(String[] args) &#123;    Staff g1 = new GeneralStaff(&quot;hahaha&quot;, 1000, 20,1.0);    Staff g2 = new Manager(&quot;haha&quot;, 1000, 20, 1.2);    Manager g3 = (Manager)g2;    g3.setBonus(1000);    g1.info();    g2.info();&#125;</code></pre><p>}</p><p>package com.homework.code.h4;</p><p>public class Staff {</p><pre><code>private String name;private double daySal;private int day;private double grade;public Staff(String name, double daySal, int day, double grade) &#123;    this.name = name;    this.daySal = daySal;    this.day = day;    this.grade = grade;&#125;public void info()&#123;    System.out.println(&quot;工资为： &quot; + getDaySal() * getDay()*getGrade());&#125;public String getName() &#123;    return name;&#125;public double getGrade() &#123;    return grade;&#125;public void setGrade(double grade) &#123;    this.grade = grade;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getDaySal() &#123;    return daySal;&#125;public void setDaySal(double daySal) &#123;    this.daySal = daySal;&#125;public int getDay() &#123;    return day;&#125;public void setDay(int day) &#123;    this.day = day;&#125;</code></pre><p>}</p><p>package com.homework.code.h4;</p><p>import javax.sound.midi.Soundbank;</p><p>public class GeneralStaff extends Staff{</p><pre><code>public GeneralStaff(String name, double daySal, int day, double grade) &#123;    super(name, daySal, day, grade);&#125;@Overridepublic void info() &#123;    System.out.print(&quot;普通员工&quot;);    super.info();&#125;</code></pre><p>}</p><p>package com.homework.code.h4;</p><p>public class Manager extends Staff{<br>    double bonus;</p><pre><code>public Manager(String name, double daySal, int day, double grade) &#123;    super(name, daySal, day, grade);&#125;public double getBonus() &#123;    return bonus;&#125;public void setBonus(double bonus) &#123;    this.bonus = bonus;&#125;@Overridepublic void info() &#123;    System.out.println(&quot;部门管理的工资为：&quot; +getName() + (bonus + getDaySal()*(double)getDay() * getGrade()));&#125;</code></pre><p>}</p><h3 id="Homework05（特殊属性可以动态赋值，会很灵活。没有分析出隐藏属性，要学会分析）"><a href="#Homework05（特殊属性可以动态赋值，会很灵活。没有分析出隐藏属性，要学会分析）" class="headerlink" title="Homework05（特殊属性可以动态赋值，会很灵活。没有分析出隐藏属性，要学会分析）"></a>Homework05（特殊属性可以动态赋值，会很灵活。没有分析出隐藏属性，要学会分析）</h3><p>package com.homework.code.h5;</p><p>public class Homework05 {</p><pre><code>public static void main(String[] args) &#123;    Worker w = new Worker(&quot;w&quot;, 1000);    Teacher t = new Teacher(&quot;t&quot;, 1000,100,100);    Peasant p = new Peasant(&quot;p&quot;, 1000);    Scientist s = new Scientist(&quot;s&quot;, 1000, 50000);    Waiter wa = new Waiter(&quot;wa&quot;, 1000);    w.info();    t.info();    p.info();    s.info();    wa.info();&#125;</code></pre><p>}</p><p>package com.homework.code.h5;</p><p>public class Employee {</p><pre><code>private String name;private double sal;public Employee(String name, double sal) &#123;    this.name = name;    this.sal = sal;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getSal() &#123;    return sal;&#125;public void setSal(double sal) &#123;    this.sal = sal;&#125;public void info()&#123;    System.out.println(name + &quot;工资为&quot; + sal);&#125;</code></pre><p>}</p><p>package com.homework.code.h5;</p><p>public class Worker extends Employee{</p><pre><code>public Worker(String name, double sal) &#123;    super(name, sal);&#125;@Overridepublic void info() &#123;    System.out.println(&quot;工人&quot;+ getName()+&quot;工资：&quot;);    super.info();&#125;</code></pre><p>}</p><p>package com.homework.code.h5;</p><p>public class Teacher extends Employee{</p><pre><code>private int classDay;private double classSal;public Teacher(String name, double sal, int classDay, double classSal) &#123;    super(name, sal);    this.classDay = classDay;    this.classSal = classSal;&#125;@Overridepublic void info() &#123;    System.out.println(&quot;老师&quot;+ getName() + &quot;的工资为&quot;);    System.out.println(getSal()+classDay*classSal);&#125;</code></pre><p>}</p><p>package com.homework.code.h5;</p><p>public class Peasant extends Employee {</p><pre><code>public Peasant(String name, double sal) &#123;    super(name, sal);&#125;@Overridepublic void info() &#123;    System.out.println(&quot;农民的&quot;+ getName()+&quot;工资为&quot;);    super.info();&#125;</code></pre><p>}</p><p>package com.homework.code.h5;</p><p>public class Scientist extends Employee{</p><pre><code>private double bonus;public Scientist(String name, double sal, double bonus) &#123;    super(name, sal);    this.bonus = bonus;&#125;@Overridepublic void info() &#123;    System.out.println(&quot;科学家&quot;+ getName()+ &quot;的工资为&quot;);    System.out.println(getSal() + bonus);&#125;</code></pre><p>}</p><p>package com.homework.code.h5;</p><p>public class Waiter extends Employee{</p><pre><code>public Waiter(String name, double sal) &#123;    super(name, sal);&#125;@Overridepublic void info() &#123;    System.out.println(&quot;服务员&quot;+ getName() +&quot;的工资&quot;);    super.info();&#125;</code></pre><p>}</p><h3 id="Homework06"><a href="#Homework06" class="headerlink" title="Homework06"></a>Homework06</h3><h3 id="Homework07"><a href="#Homework07" class="headerlink" title="Homework07"></a>Homework07</h3><ol><li>（Test,Demo,Rose,jack,）</li><li>(john,jack)(那里调用this，就是那里的属性)<h3 id="Homework08"><a href="#Homework08" class="headerlink" title="Homework08"></a>Homework08</h3><h3 id="Homework09"><a href="#Homework09" class="headerlink" title="Homework09"></a>Homework09</h3><h3 id="Homework10"><a href="#Homework10" class="headerlink" title="Homework10"></a>Homework10</h3>package com.homework.code.h10;</li></ol><p>public class Homework10 {</p><pre><code>public static void main(String[] args) &#123;    Doctor doctor = new Doctor(&quot;haha&quot;, 28, &quot;牙科&quot;, &#39;女&#39;, 8000);    Doctor doctor2 = new Doctor(&quot;haha&quot;, 28, &quot;骨科&quot;, &#39;女&#39;, 8000);    System.out.println(doctor.equals(doctor2));&#125;</code></pre><p>}</p><p>package com.homework.code.h10;</p><p>import java.util.Objects;</p><p>public class Doctor {</p><pre><code>private String name;private int age;private String job;private char gender;private double sal;public Doctor(String name, int age, String job, char gender, double sal) &#123;    this.name = name;    this.age = age;    this.job = job;    this.gender = gender;    this.sal = sal;&#125;@Overridepublic boolean equals(Object obj) &#123;    //判断是否一个引用    if (this == obj) &#123;        return true;    &#125;    if (!(obj instanceof Doctor)) &#123;        return false;    &#125;    Doctor doctor = (Doctor) obj;    return this.name.equals(doctor.name) &amp;&amp; this.age == doctor.age &amp;&amp; this.job.equals(doctor.job)            &amp;&amp; this.gender == doctor.gender &amp;&amp; this.sal == doctor.sal;&#125;@Overridepublic int hashCode() &#123;    return Objects.hash(name, age, job, gender, sal);&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;public String getJob() &#123;    return job;&#125;public void setJob(String job) &#123;    this.job = job;&#125;public char getGender() &#123;    return gender;&#125;public void setGender(char gender) &#123;    this.gender = gender;&#125;public double getSal() &#123;    return sal;&#125;public void setSal(double sal) &#123;    this.sal = sal;&#125;</code></pre><p>}</p><h3 id="Homework11"><a href="#Homework11" class="headerlink" title="Homework11"></a>Homework11</h3><ol><li>Person p = new Student();</li><li>Person p = new Person();<br>Student s = (Student)p;<h3 id="Homework12"><a href="#Homework12" class="headerlink" title="Homework12"></a>Homework12</h3><h3 id="Homework13"><a href="#Homework13" class="headerlink" title="Homework13"></a>Homework13</h3>package com.homework.code.h13;</li></ol><p>public class Homework13 {</p><pre><code>public static void main(String[] args) &#123;    Teacher teacher = new Teacher(&quot;jack&quot;, 28, &#39;男&#39;, 5);    Student student = new Student(&quot;tom&quot;, 18, &#39;男&#39;, 181818181);    teacher.print();    student.print();    Person[] p = new Person[4];    p[0] = new Teacher(&quot;jack&quot;, 28, &#39;男&#39;, 5);    p[1] = new Teacher(&quot;maik&quot;, 26, &#39;男&#39;, 5);    p[2] = new Student(&quot;wow&quot;, 45, &#39;男&#39;, 5);    p[3] = new Student(&quot;aoa&quot;, 72, &#39;男&#39;, 5);    Homework13 homework13 = new Homework13();    homework13.bubbleSort(p);    for (int i = 0; i &lt; p.length; i++) &#123;        homework13.call(p[i]);    &#125;&#125;public void call(Person p)&#123;    if(p instanceof Student)&#123;        ((Student) p).study();    &#125;else if(p instanceof Teacher)&#123;        ((Teacher) p).teach();    &#125;else&#123;        System.out.println(&quot;do noting....&quot;);    &#125;&#125;public void bubbleSort(Person[] p)&#123;    Person temp = null;    for (int i = 0; i &lt; p.length - 1; i++) &#123;        for (int j = 0; j &lt; p.length - i - 1; j++) &#123;            if (p[j].getAge() &lt; p[j + 1].getAge()) &#123;                temp = p[j];                p[j] = p[j + 1];                p[j + 1] = temp;            &#125;        &#125;    &#125;&#125;</code></pre><p>}</p><p>package com.homework.code.h13;</p><p>public class Person {</p><pre><code>private String name;private int age;private char gender;public Person(String name, int age, char gender) &#123;    this.name = name;    this.age = age;    this.gender = gender;&#125;public void print()&#123;    System.out.println(&quot;姓名：&quot; + getName() +&quot;\n&quot;+ &quot;年龄：&quot;+ getAge()+ &quot;\n&quot; + &quot;性别&quot;+getGender());&#125;public String play()&#123;    return name + &quot;爱玩&quot;;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;public char getGender() &#123;    return gender;&#125;public void setGender(char gender) &#123;    this.gender = gender;&#125;@Overridepublic String toString() &#123;    return &quot;Person&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, age=&quot; + age +            &quot;, gender=&quot; + gender +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><p>package com.homework.code.h13;</p><p>public class Teacher extends Person {</p><pre><code>private int work_age;public Teacher(String name, int age, char gender, int work_age) &#123;    super(name, age, gender);    this.work_age = work_age;&#125;public void teach() &#123;    System.out.println(&quot;我承诺，我会好好教学&quot;);&#125;@Overridepublic void print() &#123;    System.out.println(&quot;老师的信息：&quot;);    super.print();    System.out.println(&quot;工龄：&quot; + work_age);    this.teach();    System.out.println(this.play());    System.out.println(&quot;---------------&quot;);&#125;@Overridepublic String toString() &#123;    return super.toString() + &quot;Teacher&#123;&quot; +            &quot;work_age=&quot; + work_age +            &#39;&#125;&#39;;&#125;@Overridepublic String play() &#123;    return super.play() + &quot;象棋&quot;;&#125;public int getWork_age() &#123;    return work_age;&#125;public void setWork_age(int work_age) &#123;    this.work_age = work_age;&#125;</code></pre><p>}</p><p>package com.homework.code.h13;</p><p>public class Student extends Person {</p><pre><code>private int stu_id;public Student(String name, int age, char gender, int stu_id) &#123;    super(name, age, gender);    this.stu_id = stu_id;&#125;public void study() &#123;    System.out.println(&quot;我承诺，我会好好学习&quot;);&#125;@Overridepublic void print() &#123;    System.out.println(&quot;学生的信息：&quot;);    super.print();    System.out.println(&quot;学号：&quot; + getStu_id());    this.study();    System.out.println(this.play());    System.out.println(&quot;-----------------&quot;);&#125;@Overridepublic String toString() &#123;    return super.toString() + &quot;Student&#123;&quot; +            &quot;stu_id=&quot; + stu_id +            &#39;&#125;&#39;;&#125;@Overridepublic String play() &#123;    return super.play() + &quot;足球&quot;;&#125;public int getStu_id() &#123;    return stu_id;&#125;public void setStu_id(int stu_id) &#123;    this.stu_id = stu_id;&#125;</code></pre><p>}</p><h3 id="Homework14"><a href="#Homework14" class="headerlink" title="Homework14"></a>Homework14</h3><h3 id="Homework15"><a href="#Homework15" class="headerlink" title="Homework15"></a>Homework15</h3><h3 id="Homework16"><a href="#Homework16" class="headerlink" title="Homework16"></a>Homework16</h3><h2 id="第九章，房屋出租系统（看java项目那篇博文）"><a href="#第九章，房屋出租系统（看java项目那篇博文）" class="headerlink" title="第九章，房屋出租系统（看java项目那篇博文）"></a>第九章，房屋出租系统（看java项目那篇博文）</h2><h1 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h1><h2 id="第十章-面向对象的编程（高级）"><a href="#第十章-面向对象的编程（高级）" class="headerlink" title="第十章 面向对象的编程（高级）"></a>第十章 面向对象的编程（高级）</h2><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><ul><li>饿汉式</li></ul><p>package com.ljq.dishi.single_;</p><p>public class Single01 {</p><pre><code>public static void main(String[] args) &#123;    System.out.println(Girlfriend.GetGF());&#125;</code></pre><p>}</p><p>class Girlfriend{</p><pre><code>private String name;private static Girlfriend girlfriend = new Girlfriend(&quot;小红&quot;);private Girlfriend(String name) &#123;    this.name = name;&#125;public static Girlfriend GetGF()&#123;    return girlfriend;&#125;@Overridepublic String toString() &#123;    return &quot;Girlfriend&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><ul><li>懒汉式</li></ul><p>package com.ljq.dishi.single_;</p><p>public class Single02 {</p><pre><code>public static void main(String[] args) &#123;    Cat cat = Cat.GetCat();    System.out.println(cat);&#125;</code></pre><p>}</p><p>class Cat{</p><pre><code>private String name;private static Cat cat;private Cat(String name) &#123;    this.name = name;&#125;public static Cat GetCat()&#123;    if(cat == null)&#123;       return cat = new Cat(&quot;小白&quot;);    &#125;    return cat;&#125;@Overridepublic String toString() &#123;    return &quot;Cat&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><h3 id="FinalExercise"><a href="#FinalExercise" class="headerlink" title="FinalExercise"></a>FinalExercise</h3><p>package com.ljq.dishi.single_;</p><p>public class FinalExercise {</p><pre><code>public static void main(String[] args) &#123;    Circle circle = new Circle(2);    System.out.println(circle.getArea());&#125;</code></pre><p>}</p><p>class Circle{</p><pre><code>private double r;private final double PI = 3.14;//    &#123;//        PI = 3.14;//    &#125;public Circle(double r) &#123;    //PI = 3.14;    this.r = r;&#125;public double getArea()&#123;    return PI*r*r;&#125;</code></pre><p>}</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>package com.ljq.dishi.abstrac_;</p><p>public class AbstractExercise {</p><pre><code>public static void main(String[] args) &#123;    Mangers jack = new Mangers(&quot;jack&quot;, 12345, 5000, 5000);    CommonEmployee heieh = new CommonEmployee(&quot;heieh&quot;, 1234, 3000);    jack.print();    heieh.print();&#125;</code></pre><p>}</p><p>package com.ljq.dishi.abstrac_;</p><p>public abstract class Employee{</p><pre><code>private String name;private int id;private double sal;public Employee(String name, int id, double sal) &#123;    this.name = name;    this.id = id;    this.sal = sal;&#125;public abstract String work();public abstract void print();public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getId() &#123;    return id;&#125;public void setId(int id) &#123;    this.id = id;&#125;public double getSal() &#123;    return sal;&#125;public void setSal(double sal) &#123;    this.sal = sal;&#125;</code></pre><p>}</p><p>package com.ljq.dishi.abstrac_;</p><p>public class Mangers extends Employee {</p><pre><code>private double bonus;public Mangers(String name, int id, double sal, double bonus) &#123;    super(name, id, sal);    this.bonus = bonus;&#125;public String work()&#123;    return &quot;工作中。。。&quot;;&#125;@Overridepublic void print() &#123;    System.out.println(&quot;经理&quot;+ getName()+work());&#125;public double getBonus() &#123;    return bonus;&#125;public void setBonus(double bonus) &#123;    this.bonus = bonus;&#125;</code></pre><p>}</p><p>package com.ljq.dishi.abstrac_;</p><p>public class CommonEmployee extends Employee {</p><pre><code>public CommonEmployee(String name, int id, double sal) &#123;    super(name, id, sal);&#125;@Overridepublic String work() &#123;    return &quot;工作中。。。&quot;;&#125;@Overridepublic void print() &#123;    System.out.println(&quot;员工&quot;+ getName()+work());&#125;</code></pre><p>}</p><h3 id="InnerClassExercise02-局部内部类和匿名内部类"><a href="#InnerClassExercise02-局部内部类和匿名内部类" class="headerlink" title="InnerClassExercise02(局部内部类和匿名内部类)"></a>InnerClassExercise02(局部内部类和匿名内部类)</h3><p>package com.ljq.dishi.innerclass_;</p><p>public class InnerClassExercise02 {</p><pre><code>public static void main(String[] args) &#123;    Cellphone cellphone = new Cellphone();    cellphone.alarmClock(new Bell() &#123;        @Override        public void ring() &#123;            System.out.println(&quot;懒猪起床了&quot;);        &#125;    &#125;);    Bell bell = new Bell()&#123;        @Override        public void ring() &#123;            System.out.println(&quot;小伙伴上课了&quot;);        &#125;    &#125;;    bell.ring();&#125;</code></pre><p>}</p><p>interface Bell{</p><pre><code>void ring();</code></pre><p>}</p><p>class Cellphone{</p><pre><code>public void alarmClock(Bell bell)&#123;    bell.ring();&#125;</code></pre><p>}</p><h3 id="EnumExercise01"><a href="#EnumExercise01" class="headerlink" title="EnumExercise01"></a>EnumExercise01</h3><p>package com.ljq.shiyi.enum_;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li><li>/</li></ul><p>public class EnumExercise01 {</p><pre><code>public static void main(String[] args) &#123;    Week[] weeks = Week.values();    System.out.println(&quot;====所有星期的信息如下====&quot;);    for (Week week : weeks)&#123;        System.out.println(&quot;\t&quot; + week);    &#125;&#125;</code></pre><p>}</p><p>enum Week{</p><pre><code>MONDAY(&quot;星期一&quot;),TUESDAY(&quot;星期二&quot;), WEDNESDAY(&quot;星期三&quot;),THURSDAY(&quot;星期四&quot;), FRIDAY(&quot;星期五&quot;),SATURDAY(&quot;星期六&quot;), SUNDAY(&quot;星期日&quot;);private String name;Week(String name) &#123;    this.name = name;&#125;@Overridepublic String toString() &#123;    return  name ;&#125;</code></pre><p>}</p><h3 id="本章作业（第九章和第十章）"><a href="#本章作业（第九章和第十章）" class="headerlink" title="本章作业（第九章和第十章）"></a>本章作业（第九章和第十章）</h3><h3 id="Homework01-1"><a href="#Homework01-1" class="headerlink" title="Homework01"></a>Homework01</h3><ol><li>9.0 red  100.0 red<h3 id="Homework02-2"><a href="#Homework02-2" class="headerlink" title="Homework02"></a>Homework02</h3>package com.ljq.shiyi.homework02;</li></ol><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li><li>/<br>public class TestFrock {</li></ul><pre><code>public static void main(String[] args) &#123;    System.out.println(Frock.getNextNum());    System.out.println(Frock.getNextNum());    Frock frock1 = new Frock();    System.out.println(frock1.getSerialNumber());    Frock frock2= new Frock();    System.out.println(frock2.getSerialNumber());&#125;</code></pre><p>}</p><p>package com.ljq.shiyi.homework02;</p><p>/**</p><ul><li><p>@author 6+7</p></li><li><p>@version 1.0</p></li><li><p>/<br>public class Frock {</p><p>  private static int currentNum = 100000;<br>  private int serialNumber;</p><p>  public Frock() {</p><pre><code>  this.serialNumber = getNextNum();</code></pre><p>  }</p><p>  public static int getNextNum() {</p><pre><code>  return currentNum += 100;</code></pre><p>  }</p><p>  public int getSerialNumber() {</p><pre><code>  return serialNumber;</code></pre><p>  }</p></li></ul><p>}</p><h3 id="Homework03-1"><a href="#Homework03-1" class="headerlink" title="Homework03"></a>Homework03</h3><p>package com.ljq.shiyi.homework03;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework03 {</p><pre><code>public static void main(String[] args) &#123;    Animal cat = new Cat();    Animal dog = new Dog();    cat.shout();    dog.shout();&#125;</code></pre><p>}</p><p>abstract class Animal{</p><pre><code>public abstract void shout();</code></pre><p>}</p><p>class Cat extends Animal{</p><pre><code>@Overridepublic void shout() &#123;    System.out.println(&quot;猫会喵喵叫&quot;);&#125;</code></pre><p>}</p><p>class Dog extends  Animal{</p><pre><code>@Overridepublic void shout() &#123;    System.out.println(&quot;狗会汪汪叫&quot;);&#125;</code></pre><p>}</p><h3 id="Homework04-1"><a href="#Homework04-1" class="headerlink" title="Homework04"></a>Homework04</h3><p>package com.ljq.shiyi.homrwork04;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework04 {</p><pre><code>public static void main(String[] args) &#123;    Cellphone cellphone = new Cellphone();    cellphone.testWork(new Iwork() &#123;        @Override        public double work(double n1, double n2) &#123;            return n1 + n2;        &#125;    &#125;,33.2,33.2);&#125;</code></pre><p>}</p><p>interface Iwork{</p><pre><code> public double work(double n1, double n2);</code></pre><p>}</p><p>class Cellphone {</p><p>   public void testWork(Iwork iwork,double n1, double n2){</p><pre><code>   double result = iwork.work( n1, n2);   System.out.println(&quot;计算结果为&quot; + result);</code></pre><p>   }</p><p>}</p><h3 id="Homework05"><a href="#Homework05" class="headerlink" title="Homework05"></a>Homework05</h3><p>package com.ljq.shiyi.homework05;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework05 {</p><pre><code>public static void main(String[] args) &#123;    A a = new A();    a.testB();&#125;</code></pre><p>}</p><p>class A{</p><pre><code>private String name = &quot;ljl&quot;;public void testB()&#123;    class B&#123;        private final String NAME = &quot;ljq&quot;;        public void show()&#123;            System.out.println(NAME);            System.out.println(A.this.name);        &#125;    &#125;    B b = new B();    b.show();&#125;</code></pre><p>}</p><h3 id="Homework06-1"><a href="#Homework06-1" class="headerlink" title="Homework06"></a>Homework06</h3><p>package com.ljq.shiyi.homework06;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework06 {</p><pre><code>public static void main(String[] args) &#123;    Person ts = new Person(&quot;唐僧&quot;, new Horse());    ts.common();    ts.passRiver();    ts.common();    ts.passFlameMountain();&#125;</code></pre><p>}</p><p>interface Vehicles{</p><pre><code>public void work();</code></pre><p>}</p><p>public class Factory {</p><pre><code>//一直都是一批马，采用饿汉式单例模式public static Horse horse = new Horse();public static Horse getHorse()&#123;    return horse;&#125;public static Boat getBoat()&#123;    return new Boat();&#125;public static Plane getPlane()&#123;    return new Plane();&#125;</code></pre><p>}</p><p>public class Boat implements Vehicles{</p><pre><code>@Overridepublic void work() &#123;    System.out.println(&quot;河里行驶中。。。&quot;);&#125;</code></pre><p>}</p><p>public class Horse implements Vehicles {</p><pre><code>@Overridepublic void work() &#123;    System.out.println(&quot;一般情况，马儿陆地行驶中。。。&quot;);&#125;</code></pre><p>}</p><p>public class Plane implements Vehicles {</p><pre><code>@Overridepublic void work() &#123;    System.out.println(&quot;正在飞过火焰山。。。&quot;);&#125;</code></pre><p>}</p><p>public class Person {</p><pre><code>private String name;private Vehicles vehicle;public Person(String name, Vehicles vehicle) &#123;    this.name = name;    this.vehicle = vehicle;&#125;public void common()&#123;    //排除传入的vehicle为空，或者不为Horse类型    if(!(vehicle instanceof Horse))&#123;        vehicle = Factory.getHorse();    &#125;    vehicle.work();&#125;public  void passRiver()&#123;    //排除传入的vehicle为空，或者不为Boat类型    if(!(vehicle instanceof Boat))&#123;        vehicle = Factory.getBoat();    &#125;    vehicle.work();&#125;public  void passFlameMountain()&#123;    //排除传入的vehicle为空，或者不为Plane类型    if(!(vehicle instanceof Plane))&#123;        vehicle = Factory.getPlane();    &#125;    vehicle.work();&#125;</code></pre><p>}</p><h3 id="Homework07-1"><a href="#Homework07-1" class="headerlink" title="Homework07"></a>Homework07</h3><p>package com.ljq.shiyi.homework07;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework07 {</p><pre><code>public static void main(String[] args) &#123;    Car car = new Car(55);    car.getAir().flow();    Car car2 = new Car(-11);    car2.getAir().flow();    Car car3 = new Car(11);    car3.getAir().flow();&#125;</code></pre><p>}</p><p>public class Car {</p><pre><code>private double temperature;public Car(double temperature) &#123;    this.temperature = temperature;&#125;public Air getAir()&#123;    return new Air();&#125;class Air&#123;    public void flow()&#123;        if(temperature &gt; 40)&#123;            System.out.println(&quot;空调正在吹冷风&quot;);        &#125;else if(temperature &lt; 0)&#123;            System.out.println(&quot;空调正在吹热风&quot;);        &#125;else&#123;            System.out.println(&quot;温度正常，关闭空调&quot;);        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="Homework08-1"><a href="#Homework08-1" class="headerlink" title="Homework08"></a>Homework08</h3><p>package com.ljq.shiyi.homework08;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework08 {</p><pre><code>public static void main(String[] args) &#123;    Color color = Color.RED;    switch (color)&#123;        case RED:            System.out.println(&quot;匹配到红色&quot;);            break;        case BLUE:            System.out.println(&quot;匹配到蓝色&quot;);            break;        case BLACK:            System.out.println(&quot;匹配到黑色&quot;);            break;        case YELLOW:            System.out.println(&quot;匹配到黄色&quot;);            break;        case GREEN:            System.out.println(&quot;匹配到绿色&quot;);            break;        default:            System.out.println(&quot;没有匹配到颜色&quot;);    &#125;&#125;</code></pre><p>}</p><p>public interface Icolor {</p><pre><code>public void show();</code></pre><p>}</p><p>public enum Color implements Icolor{</p><pre><code>RED(255,0,0),BLUE(0,0,255),BLACK(0,0,0),YELLOW(255,255,0),GREEN(0,255,0);private int redValue;private int greenValue;private int blueValue;Color(int redValue, int greenValue, int blueValue) &#123;    this.redValue = redValue;    this.greenValue = greenValue;    this.blueValue = blueValue;&#125;@Overridepublic void show() &#123;    System.out.println(redValue +&quot; &quot;+ greenValue+ &quot; &quot;+ blueValue);&#125;</code></pre><p>}</p><h3 id="TryCatchExercise-java-try"><a href="#TryCatchExercise-java-try" class="headerlink" title="TryCatchExercise.java(try)"></a>TryCatchExercise.java(try)</h3><p>package com.ljq.shier.trycatch_;</p><p>import java.util.Scanner;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class TryCatchExercise {</p><pre><code>//如果用户输入的不是一个整数，就提示他反复输入，// 直到输入一个整数为止public static void main(String[] args) &#123;    int num1 = 0;    while (true)&#123;        Scanner scanner = new Scanner(System.in);        System.out.println(&quot;请输入一个整数：&quot;);        try &#123;            //如果不能转换成整数型，则抛出异常            //实施catch            num1 = Integer.parseInt(scanner.next());            break;        &#125; catch (Exception e) &#123;            System.out.println(&quot;你输入的不是一个整数，请重新输入&quot;);        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="Homework01-2"><a href="#Homework01-2" class="headerlink" title="Homework01"></a>Homework01</h3><p>package com.ljq.shier.homework01;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework01 {</p><pre><code>public static void main(String[] args) &#123;    try &#123;        if(args.length != 2)&#123;            throw new ArrayIndexOutOfBoundsException(&quot;参数个数不对&quot;);        &#125;        int n1 = Integer.parseInt(args[0]);        int n2 = Integer.parseInt(args[1]);        double res = cal(n1,n2);        System.out.println(&quot;计算结果为：&quot;+ res);    &#125; catch (ArrayIndexOutOfBoundsException e) &#123;        e.printStackTrace();    &#125; catch (NumberFormatException e) &#123;        System.out.println(&quot;参数格式不正确&quot;);    &#125;catch (ArithmeticException e)&#123;        System.out.println(&quot;出现了除零的现象&quot;);    &#125;&#125;public static double cal(int n1, int n2)&#123;    return n1/n2;&#125;</code></pre><p>}</p><h3 id="Homework02-3"><a href="#Homework02-3" class="headerlink" title="Homework02"></a>Homework02</h3><ol><li>Homework02.java</li></ol><h3 id="Homework03-2"><a href="#Homework03-2" class="headerlink" title="Homework03"></a>Homework03</h3><ol><li>Homework03.java BCD<h3 id="Homework04-2"><a href="#Homework04-2" class="headerlink" title="Homework04"></a>Homework04</h3></li><li>Homework04.java BCD<h2 id="第十三章-常用类"><a href="#第十三章-常用类" class="headerlink" title="第十三章 常用类"></a>第十三章 常用类</h2><h3 id="StringBufferExercise"><a href="#StringBufferExercise" class="headerlink" title="StringBufferExercise"></a>StringBufferExercise</h3>package com.ljq.shisan.stringbufferexercise;</li></ol><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class StringBufferExercise {</p><pre><code>public static void main(String[] args) &#123;    String str = &quot;132486237648.76&quot;;    StringBuffer sb = new StringBuffer(str);    for(int i = sb.lastIndexOf(&quot;.&quot;)- 3;i&gt; 0;i-=3)&#123;        sb.insert(i,&quot;,&quot;);    &#125;    System.out.println(sb);&#125;</code></pre><p>}</p><h3 id="ArrayExercise-java"><a href="#ArrayExercise-java" class="headerlink" title="ArrayExercise.java"></a>ArrayExercise.java</h3><p>package com.ljq.shisan.Array;</p><p>import java.util.Arrays;<br>import java.util.Comparator;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class ArrayExercise {</p><pre><code>public static void main(String[] args) &#123;    Book[] books = new Book[5];    books[0] = new Book(&quot;三国演义&quot;,58);    books[1] = new Book(&quot;水浒传&quot;,48);    books[2] = new Book(&quot;西游记&quot;,88);    books[3] = new Book(&quot;红楼梦&quot;,108);    books[4] = new Book(&quot;聊斋&quot;,20);    Arrays.sort(books, new Comparator&lt;Book&gt;() &#123;        @Override        public int compare(Book o1, Book o2) &#123;            Book books1 = (Book)o1;            Book books2 = (Book)o2;            double priceVal = books1.getPrice()- books2.getPrice();            if(priceVal &gt; 0)&#123;                return 1;            &#125;else if(priceVal &lt; 0)&#123;                return -1;            &#125;else&#123;                return 0;            &#125;        &#125;    &#125;);    System.out.println(Arrays.toString(books));    Arrays.sort(books, new Comparator&lt;Book&gt;() &#123;        @Override        public int compare(Book o1, Book o2) &#123;            Book books1 = (Book)o1;            Book books2 = (Book)o2;            double priceVal = books2.getPrice()- books1.getPrice();            if(priceVal &gt; 0)&#123;                return 1;            &#125;else if(priceVal &lt; 0)&#123;                return -1;            &#125;else&#123;                return 0;            &#125;        &#125;    &#125;);    System.out.println(Arrays.toString(books));    Arrays.sort(books, new Comparator&lt;Book&gt;() &#123;        @Override        public int compare(Book o1, Book o2) &#123;            Book books1 = (Book)o1;            Book books2 = (Book)o2;            return books2.getName().length()- books1.getName().length();        &#125;    &#125;);    System.out.println(Arrays.toString(books));&#125;</code></pre><p>}</p><p>public class Book {</p><pre><code>private String name;private double price;public Book(String name, double price) &#123;    this.name = name;    this.price = price;&#125;@Overridepublic String toString() &#123;    return &quot;Book&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, price=&quot; + price +            &#39;&#125;&#39;;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getPrice() &#123;    return price;&#125;public void setPrice(double price) &#123;    this.price = price;&#125;</code></pre><p>}</p><h3 id="Homework01-3"><a href="#Homework01-3" class="headerlink" title="Homework01"></a>Homework01</h3><p>package com.ljq.shisan.homework01;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework01 {</p><pre><code>public static void main(String[] args) &#123;    //编写方法实现字符串指定部分翻转    String str = &quot;abcdefg&quot;;    String str2 = null;    try &#123;        str2 = reverse(str,1,4);    &#125; catch (Exception e) &#123;        System.out.println(e.getMessage());        return;    &#125;    System.out.println(str2);&#125;public static String reverse(String str, int start, int end)&#123;    //保持代码的健壮性    if(!(str != null))&#123;        throw new RuntimeException(&quot;字符串不能为空&quot;);    &#125;else if(!(start &gt;= 0))&#123;        throw new RuntimeException(&quot;起始值要大于等于零&quot;);    &#125;else if(!(start &lt; end))&#123;        throw new RuntimeException(&quot;起始值要小于结束值&quot;);    &#125;else if(!(end &lt; str.length()))&#123;        throw new RuntimeException(&quot;结束值不能超过字符串长度&quot;);    &#125;    //字符串型不能更改，转换为char数组    char[] chars = str.toCharArray();    char temp = &#39; &#39;;    //当start大于或者等于end时，停止交换    for (int i = start, j = end; i &lt; j; i++,j--) &#123;        temp = chars[i];        chars[i] = chars[j];        chars[j] = temp;    &#125;    String s = new String(chars);    return s;&#125;</code></pre><p>}</p><h3 id="Homework02-和老师的不一样"><a href="#Homework02-和老师的不一样" class="headerlink" title="Homework02(和老师的不一样)"></a>Homework02(和老师的不一样)</h3><p>package com.ljq.shisan.homework02;</p><p>import java.util.Scanner;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework02 {</p><pre><code>public static void main(String[] args) &#123;    try &#123;        register();    &#125; catch (Exception e) &#123;        System.out.println(e.getMessage());    &#125;&#125;public static void register()&#123;    Scanner scanner = new Scanner(System.in);    System.out.println(&quot;请输入你的用户名&quot;);    String str = scanner.next();    if(!(str.length() &gt;= 2 &amp;&amp; str.length() &lt;= 4))&#123;        throw new RuntimeException(&quot;用户名有误&quot;);    &#125;    System.out.println(&quot;请输入你的密码&quot;);    String str2 = scanner.next();    if(!(str2.length() == 6))&#123;        throw new RuntimeException(&quot;密码长度有误&quot;);    &#125;    char[] chars = str2.toCharArray();    for (int i = 0; i &lt; chars.length; i++) &#123;        if(!(Character.isDigit(chars[i])))&#123;            throw new RuntimeException(&quot;必须输入数字&quot;);        &#125;    &#125;    System.out.println(&quot;请输入你的邮箱&quot;);    String str3 = scanner.next();    if(!(str3.indexOf(&quot;@&quot;) &lt; str3.indexOf(&quot;.&quot;)))&#123;        throw new RuntimeException(&quot;必须有“@”和“.”，且前者在前，后者在后&quot;);    &#125;    System.out.println(&quot;你已经完成注册!~&quot;);&#125;</code></pre><p>}</p><h3 id="Homework03（和老师的不一样）"><a href="#Homework03（和老师的不一样）" class="headerlink" title="Homework03（和老师的不一样）"></a>Homework03（和老师的不一样）</h3><p>package com.ljq.shisan.homework03;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class Homework03 {<br>    public static void main(String[] args) {</p><pre><code>    String str = &quot;Liusad Jiaadsad Qiadsad&quot;;    printStr(str);&#125;public static void printStr(String str)&#123;    if(str == null)&#123;        System.out.println(&quot;输入的字符串不能为空&quot;);        return;    &#125;    int i1 = str.indexOf(&quot; &quot;);    String substring = str.substring(i1 + 1, i1 + 2);    String[] s = str.split(&quot; &quot;);    if(s.length != 3)&#123;        System.out.println(&quot;格式不正确，应为 Xxx Xxx Xxx&quot;);        return;    &#125;    System.out.println(s[2] +&quot;,&quot; + s[0]+ &quot;.&quot;+substring);    //老师的方法：    String format = String.format(&quot;%s,%s.%c&quot;, s[2], s[0], s[1].toUpperCase().charAt(0));    System.out.println(format);&#125;</code></pre><p>}</p><h3 id="Homework04（和老师的不一样）"><a href="#Homework04（和老师的不一样）" class="headerlink" title="Homework04（和老师的不一样）"></a>Homework04（和老师的不一样）</h3><p>public class Homework04 {</p><pre><code>public static void main(String[] args) &#123;    String str = &quot;123ABCabCc&quot;;    judge(str);&#125;public static void judge(String str)&#123;    if(str == null)&#123;        System.out.println(&quot;字符串不能为空&quot;);        return;    &#125;    char[] chars = str.toCharArray();    int count1 = 0;    int count2 = 0;    int count3 = 0;    for (int i = 0; i &lt; chars.length; i++) &#123;        if(Character.isDigit(chars[i]))&#123;            count1 += 1;        &#125;else if(Character.isUpperCase(chars[i]))&#123;            count2 += 1;        &#125;else if(Character.isLowerCase(chars[i]))&#123;            count3 += 1;        &#125;    &#125;    System.out.println(&quot;数字个数：&quot;+ count1+ &quot;大写字母个数：&quot;+count2+            &quot;小写字母个数：&quot;+ count3);&#125;</code></pre><p>}</p><h3 id="Homework05-1"><a href="#Homework05-1" class="headerlink" title="Homework05"></a>Homework05</h3><p><img src="https://ftp.bmp.ovh/imgs/2021/06/116af7ef98f3d6cf.png"><br>f,f,t,f,f,t</p><h2 id="第十四章-集合"><a href="#第十四章-集合" class="headerlink" title="第十四章 集合"></a>第十四章 集合</h2><h3 id="CollectionIterator"><a href="#CollectionIterator" class="headerlink" title="CollectionIterator"></a>CollectionIterator</h3><p>package com.ljq.shisi.collection;</p><p>import java.util.ArrayList;<br>import java.util.Iterator;<br>import java.util.List;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>@SuppressWarnings({“all”})<br>public class CollectionIterator {</p><pre><code>public static void main(String[] args) &#123;    List list = new ArrayList();    list.add(new Book(&quot;6+7的幸福生活&quot;,&quot;6 + 7&quot;,99.9));    list.add(new Book(&quot;6+7的妖孽人生&quot;,&quot;6 + 7&quot;,999.9));    list.add(new Book(&quot;6+7&quot;,&quot;6 + 7&quot;,9.9));    Iterator iterator = list.iterator();//构建迭代器    while (iterator.hasNext()) &#123;        Object next =  iterator.next();        System.out.println(next);    &#125;    //想再次遍历的话，需要重置迭代器    iterator = list.iterator();    System.out.println(&quot;====第二次调用====&quot;);    while (iterator.hasNext()) &#123;        Object next =  iterator.next();        System.out.println(next);    &#125;&#125;</code></pre><p>}</p><p>class Book{<br>    private String name;<br>    private String author;<br>    private double price;</p><pre><code>public Book(String name, String author, double price) &#123;    this.name = name;    this.author = author;    this.price = price;&#125;@Overridepublic String toString() &#123;    return &quot;Book&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, author=&#39;&quot; + author + &#39;\&#39;&#39; +            &quot;, price=&quot; + price +            &#39;&#125;&#39;;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public String getAuthor() &#123;    return author;&#125;public void setAuthor(String author) &#123;    this.author = author;&#125;public double getPrice() &#123;    return price;&#125;public void setPrice(double price) &#123;    this.price = price;&#125;</code></pre><p>}</p><h3 id="CollectionExercise"><a href="#CollectionExercise" class="headerlink" title="CollectionExercise"></a>CollectionExercise</h3><p>package com.ljq.shisi.collection;</p><p>import java.util.ArrayList;<br>import java.util.Iterator;<br>import java.util.List;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/<br>public class CollectionExercise {</p><pre><code>public static void main(String[] args) &#123;    List list = new ArrayList();    list.add(new Dog(&quot;小花&quot;,3));    list.add(new Dog(&quot;小黑&quot;,2));    list.add(new Dog(&quot;小黄&quot;,4));    Iterator iterator = list.iterator();    while (iterator.hasNext()) &#123;        Object next =  iterator.next();        System.out.println(next);    &#125;    System.out.println(&quot;增强for循环&quot;);    for (Object o : list) &#123;        System.out.println(o);    &#125;&#125;</code></pre><p>}</p><p>public class Dog {</p><pre><code>private String name;private int age;public Dog(String name, int age) &#123;    this.name = name;    this.age = age;&#125;@Overridepublic String toString() &#123;    return &quot;Dog&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, age=&quot; + age +            &#39;&#125;&#39;;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;</code></pre><p>}</p><h3 id="ListExercise"><a href="#ListExercise" class="headerlink" title="ListExercise"></a>ListExercise</h3><p>package com.ljq.shisi.list_;</p><p>import java.util.ArrayList;<br>import java.util.Iterator;<br>import java.util.List;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class ListExercise {</p><pre><code>public static void main(String[] args) &#123;    List list = new ArrayList();    list.add(&quot;holle0&quot;);    list.add(&quot;holle1&quot;);    list.add(&quot;holle2&quot;);    list.add(&quot;holle3&quot;);    list.add(&quot;holle4&quot;);    list.add(&quot;holle5&quot;);    list.add(&quot;holle6&quot;);    list.add(&quot;holle7&quot;);    list.add(&quot;holle8&quot;);    list.add(&quot;holle9&quot;);    list.add(1,&quot;韩顺平教育&quot;);    System.out.println(list.get(5));    System.out.println(list);    list.remove(4);    System.out.println(list);    list.set(6,&quot;wow&quot;);    Iterator iterator = list.iterator();    while (iterator.hasNext()) &#123;        Object next =  iterator.next();        System.out.println(next);    &#125;    for (Object o : list) &#123;        System.out.println(o);    &#125;&#125;</code></pre><p>}</p><h3 id="ListExercise02"><a href="#ListExercise02" class="headerlink" title="ListExercise02"></a>ListExercise02</h3><p>package com.ljq.shisi.list_;</p><p>import java.util.ArrayList;<br>import java.util.List;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class ListExercise02 {</p><pre><code>public static void main(String[] args) &#123;    List list = new ArrayList();    list.add(new Book(&quot;6+7的幸福生活&quot;, 99.9, &quot;6+7&quot;));    list.add(new Book(&quot;6+7的妖孽人生&quot;, 19.9, &quot;6+7&quot;));    list.add(new Book(&quot;6+7的国度&quot;, 39.9, &quot;6+7&quot;));    for (int i = 0; i &lt; list.size(); i++) &#123;        System.out.println(list.get(i));    &#125;    sort(list);    System.out.println(&quot;++++排序后++++&quot;);    for (Object o : list) &#123;        System.out.println(o);    &#125;&#125;public static void sort(List list) &#123;    int size = list.size();    for (int i = 0; i &lt; size - 1; i++) &#123;        for (int j = 0; j &lt; size - i - 1; j++) &#123;            Book book1 = (Book) list.get(j);            Book book2 = (Book) list.get(j + 1);            if (book1.getPrice() &gt; book2.getPrice()) &#123;                list.set(j, book2);                list.set(j + 1, book1);            &#125;        &#125;    &#125;&#125;</code></pre><p>}</p><p>public class Book {</p><pre><code>private String name;private double price;private String author;public Book(String name, double price, String author) &#123;    this.name = name;    this.price = price;    this.author = author;&#125;@Overridepublic String toString() &#123;    return            &quot;书名：&quot; + name  +            &quot;\t 价格：&quot; + price +            &quot;\t 作者：&quot; + author            ;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getPrice() &#123;    return price;&#125;public void setPrice(double price) &#123;    this.price = price;&#125;public String getAuthor() &#123;    return author;&#125;public void setAuthor(String author) &#123;    this.author = author;&#125;</code></pre><p>}</p><h3 id="ArraylistDebug"><a href="#ArraylistDebug" class="headerlink" title="ArraylistDebug"></a>ArraylistDebug</h3><p>package com.ljq.shisi.arraylist;</p><p>import java.util.ArrayList;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class ArraylistDebug {</p><pre><code>public static void main(String[] args) &#123;    ArrayList arrayList1 = new ArrayList();    ArrayList arrayList2 = new ArrayList(8);    for (int i = 1; i &lt; 20; i++) &#123;        arrayList1.add(i);    &#125;    for (int i = 1; i &lt; 20; i++) &#123;        arrayList2.add(i);    &#125;&#125;</code></pre><p>}</p><h3 id="HashSetExercise"><a href="#HashSetExercise" class="headerlink" title="HashSetExercise"></a>HashSetExercise</h3><p>package com.ljq.shisi.hashset;</p><p>import java.util.HashSet;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li><li>/</li></ul><p>public class HashSetExercise {</p><pre><code>public static void main(String[] args) &#123;    HashSet hashSet = new HashSet();    hashSet.add(new Employee(&quot;wow&quot;,18));    hashSet.add(new Employee(&quot;ww&quot;,28));    hashSet.add(new Employee(&quot;wow&quot;,18));    System.out.println(hashSet);&#125;</code></pre><p>}</p><p>public class Employee {</p><pre><code>private String name;private int age;public Employee(String name, int age) &#123;    this.name = name;    this.age = age;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;@Overridepublic String toString() &#123;    return &quot;Employee&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, age=&quot; + age +            &#39;&#125;&#39;;&#125;@Overridepublic boolean equals(Object o) &#123;    if (this == o) return true;    if (o == null || getClass() != o.getClass()) return false;    Employee employee = (Employee) o;    return age == employee.age &amp;&amp;            Objects.equals(name, employee.name);&#125;@Overridepublic int hashCode() &#123;    return Objects.hash(name, age);&#125;</code></pre><p>}</p><h3 id="HashSetExercise02-java"><a href="#HashSetExercise02-java" class="headerlink" title="HashSetExercise02.java"></a>HashSetExercise02.java</h3><p>package com.ljq.shisi.hashset;</p><p>import java.util.HashSet;<br>import java.util.Objects;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class HashSetExercise02 {</p><pre><code>public static void main(String[] args) &#123;    HashSet hashSet = new HashSet();    hashSet.add(new Employee02(&quot;wow&quot;,2888.8,new MyDate(1999,4,4)));    hashSet.add(new Employee02(&quot;woow&quot;,2888.8,new MyDate(1999,4,4)));    hashSet.add(new Employee02(&quot;wow&quot;,2888.8,new MyDate(1999,4,4)));    System.out.println(hashSet);&#125;</code></pre><p>}</p><p>class Employee02{</p><pre><code>private String name;private double sal;private MyDate birthday;public Employee02(String name, double sal, MyDate birthday) &#123;    this.name = name;    this.sal = sal;    this.birthday = birthday;&#125;@Overridepublic String toString() &#123;    return &quot;Employee02&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, sal=&quot; + sal +            &quot;, birthday=&quot; + birthday +            &#39;&#125;&#39;;&#125;@Overridepublic boolean equals(Object o) &#123;    if (this == o) return true;    if (o == null || getClass() != o.getClass()) return false;    Employee02 that = (Employee02) o;    return Objects.equals(name, that.name) &amp;&amp;            Objects.equals(birthday, that.birthday);&#125;@Overridepublic int hashCode() &#123;    return Objects.hash(name, birthday);&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getSal() &#123;    return sal;&#125;public void setSal(double sal) &#123;    this.sal = sal;&#125;public MyDate getBirthday() &#123;    return birthday;&#125;public void setBirthday(MyDate birthday) &#123;    this.birthday = birthday;&#125;</code></pre><p>}</p><p>class MyDate{</p><pre><code>private int year;private int month;private int day;public MyDate(int year, int month, int day) &#123;    this.year = year;    this.month = month;    this.day = day;&#125;@Overridepublic String toString() &#123;    return  year +            &quot;-&quot; + month +            &quot;-&quot; + day ;&#125;@Overridepublic boolean equals(Object o) &#123;    if (this == o) return true;    if (o == null || getClass() != o.getClass()) return false;    MyDate myDate = (MyDate) o;    return year == myDate.year &amp;&amp;            month == myDate.month &amp;&amp;            day == myDate.day;&#125;@Overridepublic int hashCode() &#123;    return Objects.hash(year, month, day);&#125;public int getYear() &#123;    return year;&#125;public void setYear(int year) &#123;    this.year = year;&#125;public int getMonth() &#123;    return month;&#125;public void setMonth(int month) &#123;    this.month = month;&#125;public int getDay() &#123;    return day;&#125;public void setDay(int day) &#123;    this.day = day;&#125;</code></pre><p>}</p><h3 id="LinkedHashSetExercise"><a href="#LinkedHashSetExercise" class="headerlink" title="LinkedHashSetExercise"></a>LinkedHashSetExercise</h3><p>package com.ljq.shisi.linkedhashset;</p><p>import java.util.LinkedHashSet;</p><p>import java.util.Objects;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class LinkedHashSetExercise {</p><pre><code>public static void main(String[] args) &#123;    LinkedHashSet linkedHashSet = new LinkedHashSet();    linkedHashSet.add(new Car(&quot;五菱&quot;,20000));    linkedHashSet.add(new Car(&quot;三菱&quot;,20000));    linkedHashSet.add(new Car(&quot;五菱&quot;,20000));    System.out.println(linkedHashSet);&#125;</code></pre><p>}</p><p>class Car{</p><pre><code>private String name;private double price;public Car(String name, double price) &#123;    this.name = name;    this.price = price;&#125;@Overridepublic boolean equals(Object o) &#123;    if (this == o) return true;    if (o == null || getClass() != o.getClass()) return false;    Car car = (Car) o;    return Double.compare(car.price, price) == 0 &amp;&amp;            Objects.equals(name, car.name);&#125;@Overridepublic int hashCode() &#123;    return Objects.hash(name, price);&#125;@Overridepublic String toString() &#123;    return &quot;Car&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, price=&quot; + price +            &#39;&#125;&#39;;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getPrice() &#123;    return price;&#125;public void setPrice(double price) &#123;    this.price = price;&#125;</code></pre><p>}</p><p>package com.ljq.shisi.map;</p><p>import java.security.KeyStore;<br>import java.util.*;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class MapExercise {</p><pre><code>public static void main(String[] args) &#123;    Map hashMap = new HashMap();    hashMap.put(1,new Employee(&quot;jack1&quot;,2000,1));    hashMap.put(2,new Employee(&quot;jack2&quot;,3000,2));    hashMap.put(3,new Employee(&quot;jack3&quot;,40000,3));    Set set = hashMap.keySet();    for (Object o : set) &#123;        Employee e = (Employee)hashMap.get(o);        if(e.getSal()&gt;18000)&#123;            System.out.println(e);        &#125;    &#125;    Collection values = hashMap.values();    Iterator iterator = values.iterator();    while (iterator.hasNext()) &#123;        Object next = iterator.next();        Employee e = (Employee)next;        if(e.getSal()&gt;18000)&#123;            System.out.println(e);        &#125;    &#125;    Set set1 = hashMap.entrySet();    for (Object o : set1) &#123;        Map.Entry e = (Map.Entry)o;        Employee emp = (Employee) e.getValue();        if(emp.getSal()&gt;1800)&#123;            System.out.println(emp);        &#125;    &#125;&#125;</code></pre><p>}</p><p>public class Employee {</p><pre><code>private String name;private double sal;private int id;public Employee(String name, double sal, int id) &#123;    this.name = name;    this.sal = sal;    this.id = id;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getSal() &#123;    return sal;&#125;public void setSal(double sal) &#123;    this.sal = sal;&#125;public int getId() &#123;    return id;&#125;public void setId(int id) &#123;    this.id = id;&#125;@Overridepublic String toString() &#123;    return &quot;Employee&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, sal=&quot; + sal +            &quot;, id=&quot; + id +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><h3 id="Homework01-4"><a href="#Homework01-4" class="headerlink" title="Homework01"></a>Homework01</h3><p>package com.ljq.shisi.homework01;</p><p>import jdk.nashorn.internal.ir.CallNode;</p><p>import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.Collection;<br>import java.util.Collections;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class Homework01 {</p><pre><code>public static void main(String[] args) &#123;    News news1 = new News(&quot;新闻一：新冠肺炎疫情日益严重，印度疫情最为严重，引起各国人民担心!!!!&quot;);    News news2 = new News(&quot;新闻二：震惊！！！&quot;);    ArrayList arrayList = new ArrayList();    arrayList.add(news1);    arrayList.add(news2);    //下面是自己做的 ，麻烦至极，看完老师的重做了一份    //        Collections.reverse(arrayList);    //        for (Object o : arrayList) &#123;    //            News o1 = (News) o;    //            char[] chars = o1.getTitle().toCharArray();    //            char[] chars1 = new char[15];    //            if(chars.length &gt;= 15)&#123;    //                for (int i = 0; i &lt; chars1.length; i++) &#123;    //                    chars1[i] = chars[i];    //                &#125;    //    //                System.out.println( String.valueOf(chars1) + &quot;...&quot;);    //            &#125;else &#123;    //                System.out.println(o);    //            &#125;    //        &#125;    int size = arrayList.size();    for (int i = size - 1; i &gt;= 0 ; i--) &#123;        News n = (News) arrayList.get(i);        System.out.println(processTitle(n.getTitle()));    &#125;&#125;public static String processTitle(String title)&#123;    if(title != null)&#123;        if(title.length() &gt; 15)&#123;            return title.substring(0,15)+&quot;...&quot;;        &#125;else&#123;            return title;        &#125;    &#125;    return null;&#125;</code></pre><p>}</p><p>public class News {<br>    private String title;<br>    private String content;</p><pre><code>public News(String title) &#123;    this.title = title;&#125;@Overridepublic String toString() &#123;    return  title ;&#125;public String getTitle() &#123;    return title;&#125;public void setTitle(String title) &#123;    this.title = title;&#125;public String getContent() &#123;    return content;&#125;public void setContent(String content) &#123;    this.content = content;&#125;</code></pre><p>}</p><h3 id="Homework02-4"><a href="#Homework02-4" class="headerlink" title="Homework02"></a>Homework02</h3><p>package com.ljq.shisi.homework02;</p><p>import com.sun.prism.impl.shape.BasicRoundRectRep;</p><p>import java.util.ArrayList;<br>import java.util.Iterator;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class Homework02 {</p><pre><code>public static void main(String[] args) &#123;    ArrayList arrayList = new ArrayList();    Car car1 = new Car(&quot;奔驰&quot;, 400000);    arrayList.add(car1);    Car car2 = new Car(&quot;宝马&quot;, 1400000);    arrayList.add(car2);    Car car3 = new Car(&quot;宾利&quot;, 1500000);    arrayList.add(car3);    arrayList.remove(1);    System.out.println(arrayList.contains(car3));    System.out.println(arrayList.size());    System.out.println(arrayList.isEmpty());    arrayList.clear();    ArrayList arrayList2 = new ArrayList();    arrayList.add(car1);    arrayList.add(car2);    arrayList.add(car3);    arrayList.addAll(arrayList2);    arrayList.containsAll(arrayList2);    //arrayList.removeAll(arrayList);    for (Object o : arrayList) &#123;        System.out.println(o);    &#125;    Iterator iterator = arrayList.iterator();    while (iterator.hasNext()) &#123;        Object next =  iterator.next();        System.out.println(next);    &#125;    System.out.println(arrayList);&#125;</code></pre><p>}</p><p>public class Car {</p><pre><code>private String name;private double price;public Car(String name, double price) &#123;    this.name = name;    this.price = price;&#125;@Overridepublic String toString() &#123;    return &quot;\nCar&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, price=&quot; + price +            &#39;&#125;&#39;;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getPrice() &#123;    return price;&#125;public void setPrice(double price) &#123;    this.price = price;&#125;</code></pre><p>}</p><h3 id="Homework03-3"><a href="#Homework03-3" class="headerlink" title="Homework03"></a>Homework03</h3><p>package com.ljq.shisi.homework03;</p><p>import java.util.*;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class Homework03 {</p><pre><code>public static void main(String[] args) &#123;    Map m = new HashMap();    m.put(&quot;jack&quot;,650);    m.put(&quot;tom&quot;,1200);    m.put(&quot;smith&quot;,2900);    m.put(&quot;jack&quot;,2600);    payRise(m);    Set set = m.keySet();    for (Object o : set) &#123;        System.out.println(o);    &#125;    Set set1 = m.entrySet();    Iterator iterator = set.iterator();    while (iterator.hasNext()) &#123;        Object next =  iterator.next();        System.out.println(m.get(next));    &#125;&#125;public static void payRise(Map m)&#123;    Set set = m.keySet();    Collection values = m.values();    for (Object o : set) &#123;        m.put(o,((Integer)m.get(o)+100));    &#125;&#125;</code></pre><p>}</p><h3 id="Homework04-3"><a href="#Homework04-3" class="headerlink" title="Homework04"></a>Homework04</h3><h3 id="Homework05-2"><a href="#Homework05-2" class="headerlink" title="Homework05"></a>Homework05</h3><h3 id="Homework06-2"><a href="#Homework06-2" class="headerlink" title="Homework06"></a>Homework06</h3><h2 id="第十五章-泛型"><a href="#第十五章-泛型" class="headerlink" title="第十五章 泛型"></a>第十五章 泛型</h2><h3 id="GenericExercise01"><a href="#GenericExercise01" class="headerlink" title="GenericExercise01"></a>GenericExercise01</h3><p>package com.ljq.shiwu.generic;</p><p>import java.util.HashMap;<br>import java.util.Iterator;<br>import java.util.Map;<br>import java.util.Set;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class GenericExercise01 {</p><pre><code>public static void main(String[] args) &#123;    HashMap&lt;String, Student&gt; stringStudentHashMap = new HashMap&lt;&gt;();    stringStudentHashMap.put(&quot;jack&quot;,new Student(&quot;jack&quot;));    stringStudentHashMap.put(&quot;tom&quot;,new Student(&quot;jack&quot;));    stringStudentHashMap.put(&quot;shims&quot;,new Student(&quot;jack&quot;));    System.out.println(stringStudentHashMap);    Set&lt;String&gt; strings = stringStudentHashMap.keySet();    Iterator&lt;String&gt; iterator = strings.iterator();    while (iterator.hasNext()) &#123;        String next =  iterator.next();        System.out.println(next + stringStudentHashMap.get(next));    &#125;    Set&lt;Map.Entry&lt;String, Student&gt;&gt; entries = stringStudentHashMap.entrySet();    for (Map.Entry&lt;String, Student&gt; entry : entries) &#123;        System.out.println(entry.getKey()+ entry.getValue());    &#125;&#125;</code></pre><p>}</p><p>class Student{</p><pre><code>private String name;public Student(String name) &#123;    this.name = name;&#125;@Overridepublic String toString() &#123;    return &quot;Student&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><h3 id="GenericExercise02"><a href="#GenericExercise02" class="headerlink" title="GenericExercise02"></a>GenericExercise02</h3><p>package com.ljq.shiwu.generic;</p><p>import java.util.ArrayList;<br>import java.util.Comparator;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class GenericExercise02 {</p><pre><code>public static void main(String[] args) &#123;    ArrayList&lt;Employee&gt; employees = new ArrayList&lt;&gt;();    employees.add(new Employee(&quot;aaa&quot;,4000,new MyDate(1999,4,5)));    employees.add(new Employee(&quot;bbb&quot;,4000,new MyDate(1999,4,5)));    employees.add(new Employee(&quot;aaa&quot;,4000,new MyDate(1999,4,15)));    System.out.println(employees);    employees.sort(new Comparator&lt;Employee&gt;() &#123;        @Override        public int compare(Employee o1, Employee o2) &#123;            int i = o1.getName().compareTo(o2.getName());            int j = o2.getBirthday().compareTo(o1.getBirthday());            if(i==0)&#123;                return j;            &#125;            return i;        &#125;    &#125;);    System.out.println(employees);&#125;</code></pre><p>}</p><p>class Employee{</p><pre><code>private String name;private double sal;private MyDate birthday;public Employee(String name, double sal, MyDate birthday) &#123;    this.name = name;    this.sal = sal;    this.birthday = birthday;&#125;@Overridepublic String toString() &#123;    return &quot;Employee&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, sal=&quot; + sal +            &quot;, birthday=&quot; + birthday +            &#39;&#125;&#39;;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getSal() &#123;    return sal;&#125;public void setSal(double sal) &#123;    this.sal = sal;&#125;public MyDate getBirthday() &#123;    return birthday;&#125;public void setBirthday(MyDate birthday) &#123;    this.birthday = birthday;&#125;</code></pre><p>}</p><p>class MyDate implements Comparable&lt;MyDate&gt;{</p><pre><code>private int year;private int month;private int day;public MyDate(int year, int month, int day) &#123;    this.year = year;    this.month = month;    this.day = day;&#125;@Overridepublic int compareTo( MyDate o) &#123;    return Integer.parseInt(year + &quot;&quot; + month + &quot;&quot; + day)            - Integer.parseInt((o.getYear() +&quot;&quot; + o.getMonth() + &quot;&quot; + o.getDay()));&#125;@Overridepublic String toString() &#123;    return year +&quot; &quot; + month + &quot; &quot; + day;&#125;public int getYear() &#123;    return year;&#125;public void setYear(int year) &#123;    this.year = year;&#125;public int getMonth() &#123;    return month;&#125;public void setMonth(int month) &#123;    this.month = month;&#125;public int getDay() &#123;    return day;&#125;public void setDay(int day) &#123;    this.day = day;&#125;</code></pre><p>}</p><h3 id="Homework01-5"><a href="#Homework01-5" class="headerlink" title="Homework01"></a>Homework01</h3><p>package com.ljq.shiwu.homework01;</p><p>import org.junit.jupiter.api.Test;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class Homework01 {</p><pre><code>public static void main(String[] args) &#123;&#125;@Testpublic void testUser()&#123;    DAO&lt;User&gt; dao = new DAO&lt;&gt;();    dao.save(&quot;1&quot;,new User(&quot;jack&quot;,1,18));    dao.save(&quot;2&quot;,new User(&quot;tom&quot;,2,38));    dao.save(&quot;3&quot;,new User(&quot;smith&quot;,3,28));    System.out.println(dao);    System.out.println(&quot;==============&quot;);    System.out.println(dao.get(&quot;2&quot;));    dao.update(&quot;1&quot;,new User(&quot;aaa&quot;,111,48));    System.out.println(&quot;====================&quot;);    System.out.println(dao);    dao.delete(&quot;2&quot;);    System.out.println(&quot;============&quot;);    System.out.println(dao);    System.out.println(&quot;============&quot;);    System.out.println(dao.list());&#125;</code></pre><p>}</p><p>public class DAO&lt;T&gt; {</p><pre><code>private Map&lt;String ,T&gt; map = new HashMap();public void save(String id, T entity)&#123;    map.put(id,entity);&#125;public T get(String id)&#123;    return map.get(id);&#125;public void update(String id, T entity)&#123;    Set&lt;String&gt; set = map.keySet();    for (String o : set) &#123;        if(o.equals(id))&#123;            map.put(id,entity);            return;        &#125;    &#125;    System.out.println(&quot;没有找到你要替换的id&quot;);&#125;public List&lt;?&gt; list()&#123;    ArrayList&lt;Object&gt; objects = new ArrayList&lt;&gt;();    objects.addAll(map.values());    return objects;&#125;public void delete(String id)&#123;    map.remove(id);&#125;@Overridepublic String toString() &#123;    return &quot;DAO&#123;&quot; +            &quot;map=&quot; + map +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><p>public class User {</p><pre><code>private String name;private int id;private int age;public User(String name, int id, int age) &#123;    this.name = name;    this.id = id;    this.age = age;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getId() &#123;    return id;&#125;public void setId(int id) &#123;    this.id = id;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;@Overridepublic String toString() &#123;    return &quot;User&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, id=&quot; + id +            &quot;, age=&quot; + age +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><h2 id="第十六章-坦克大战【1】"><a href="#第十六章-坦克大战【1】" class="headerlink" title="第十六章 坦克大战【1】"></a>第十六章 坦克大战【1】</h2><h3 id="DrawCircles"><a href="#DrawCircles" class="headerlink" title="DrawCircles"></a>DrawCircles</h3><p>package com.ljq.drawcircles;</p><p>import javax.swing.*;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class DrawCircles extends JFrame {</p><pre><code>private MyPanel mp = null;public static void main(String[] args) &#123;    new DrawCircles();&#125;public DrawCircles()&#123;    mp = new MyPanel();    this.add(mp);    this.setSize(500,500);    this.setVisible(true);    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#125;</code></pre><p>}</p><p>public class MyPanel extends JPanel {</p><pre><code>@Overridepublic void paint(Graphics g) &#123;    super.paint(g);    g.drawOval(20,20,100,100);&#125;</code></pre><p>}</p><h3 id="BallMove"><a href="#BallMove" class="headerlink" title="BallMove"></a>BallMove</h3><p>package com.ljq.event_;</p><p>import javax.swing.<em>;<br>import java.awt.</em>;<br>import java.awt.event.KeyEvent;<br>import java.awt.event.KeyListener;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class BallMove extends JFrame{</p><pre><code>MyPanel mp = null;public static void main(String[] args) &#123;    BallMove ballMove = new BallMove();&#125;public BallMove()&#123;    mp = new MyPanel();    this.add(mp);    this.addKeyListener(mp);    this.setSize(500,500);    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    this.setVisible(true);&#125;</code></pre><p>}</p><p>class MyPanel extends JPanel implements KeyListener {</p><pre><code>int x = 100,y = 100;@Overridepublic void paint(Graphics g) &#123;    super.paint(g);    g.fillOval(x,y,20,20);&#125;@Overridepublic void keyTyped(KeyEvent e) &#123;&#125;@Overridepublic void keyPressed(KeyEvent e) &#123;    if(e.getKeyCode() == KeyEvent.VK_DOWN)&#123;        y++;        y++;    &#125;else if(e.getKeyCode() == KeyEvent.VK_UP)&#123;        y--;    &#125;else if(e.getKeyCode() == KeyEvent.VK_LEFT)&#123;        x--;    &#125;else if(e.getKeyCode() == KeyEvent.VK_RIGHT)&#123;        x++;    &#125;    this.repaint();&#125;@Overridepublic void keyReleased(KeyEvent e) &#123;&#125;</code></pre><p>}</p><h3 id="本章作业-（写在项目里了）"><a href="#本章作业-（写在项目里了）" class="headerlink" title="本章作业 （写在项目里了）"></a>本章作业 （写在项目里了）</h3><h2 id="第十七章-多线程基础"><a href="#第十七章-多线程基础" class="headerlink" title="第十七章 多线程基础"></a>第十七章 多线程基础</h2><h3 id="Thread01"><a href="#Thread01" class="headerlink" title="Thread01"></a>Thread01</h3><p>package com.ljq.threaduse;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li><li>演示通过Thread类创建线程</li></ul><p>*/</p><p>public class Thread01 {</p><pre><code>public static void main(String[] args) &#123;    Cat cat = new Cat();    cat.start();&#125;</code></pre><p>}</p><p>class Cat extends Thread{</p><pre><code>private int times = 0;@Overridepublic void run() &#123;    while(true) &#123;        System.out.println(&quot;我是小猫咪，喵喵喵~&quot;+ (++ times));        try &#123;            sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        if(times == 8)&#123;            break;        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="Thread03"><a href="#Thread03" class="headerlink" title="Thread03"></a>Thread03</h3><p>package com.ljq.runnableuse;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li><li>main线程开两个子线程</li></ul><p>*/</p><p>public class Thread03 {</p><pre><code>public static void main(String[] args) &#123;    Cat cat = new Cat();    Thread thread = new Thread(cat);    thread.start();    Dog dog = new Dog();    Thread thread1 = new Thread(dog);    thread1.start();&#125;</code></pre><p>}</p><p>class Cat implements Runnable{</p><pre><code>private int counts = 0;@Overridepublic void run() &#123;    while(true)&#123;        System.out.println(&quot;hello,world&quot;+ ++counts);        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        if (counts == 100)&#123;            break;        &#125;    &#125;&#125;</code></pre><p>}</p><p>class Dog implements Runnable{<br>    private int counts = 0;<br>    @Override<br>    public void run() {<br>        while (true){<br>            System.out.println(“hi” + ++counts);<br>            try {<br>                Thread.sleep(1000);<br>            } catch (InterruptedException e) {<br>                e.printStackTrace();<br>            }<br>            if (counts == 50 ){<br>                break;<br>            }<br>        }<br>    }<br>}</p><h3 id="ThreadMethod"><a href="#ThreadMethod" class="headerlink" title="ThreadMethod"></a>ThreadMethod</h3><p>package com.ljq.threadmethod;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li><li>/</li></ul><p>public class ThreadMethod {</p><pre><code>public static void main(String[] args) throws InterruptedException &#123;    T t = new T();    Thread thread = new Thread(t);    thread.start();    for (int i = 0; i &lt; 20; i++) &#123;        System.out.println(&quot;hi&quot; + (i+1));        Thread.sleep(1000);        if(i == 4)&#123;            thread.join();        &#125;    &#125;&#125;</code></pre><p>}</p><p>class T implements Runnable{</p><pre><code>private int counts = 0;@Overridepublic void run() &#123;    while(true)&#123;        System.out.println(&quot;hello&quot; + ++counts);        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        if (counts == 20)&#123;            break;        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="ThreadMethodExercise"><a href="#ThreadMethodExercise" class="headerlink" title="ThreadMethodExercise"></a>ThreadMethodExercise</h3><p>package com.ljq.threadmethod;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class ThreadMethodExercise {</p><pre><code>public static void main(String[] args) throws InterruptedException &#123;    T2 t2 = new T2();    Thread thread = new Thread(t2);    for (int i = 0; i &lt; 10; i++) &#123;        System.out.println(&quot;hi&quot; + (i + 1));        Thread.sleep(1000);        if (i == 4)&#123;            thread.start();            thread.join();        &#125;    &#125;&#125;</code></pre><p>}</p><p>class T2 implements Runnable{</p><pre><code>private int counts = 0;@Overridepublic void run() &#123;    while(true)&#123;        System.out.println(&quot;hello&quot; + ++counts);        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        if (counts == 10)&#123;            break;        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="Homework01-6"><a href="#Homework01-6" class="headerlink" title="Homework01"></a>Homework01</h3><p>package com.ljq.homework01;</p><p>import java.util.Scanner;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class Homework01 {</p><pre><code>public static void main(String[] args) &#123;    T t = new T();    T2 t2 = new T2(t);    Thread thread = new Thread(t);    Thread thread1 = new Thread(t2);    thread.start();    thread1.start();&#125;</code></pre><p>}</p><p>class T implements Runnable{</p><pre><code>private boolean loop = true;@Overridepublic void run() &#123;    while (loop)&#123;        System.out.println((int)(Math.random()*(100 + 1)));        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;public void setLoop(boolean loop) &#123;    this.loop = loop;&#125;</code></pre><p>}</p><p>class T2 implements Runnable{</p><pre><code>private T t = null;public T2(T t) &#123;    this.t = t;&#125;@Overridepublic void run() &#123;    Scanner scanner = new Scanner(System.in);    while (true)&#123;        System.out.println(&quot;请输入【Q】来结束线程&quot;);        char c = scanner.next().toUpperCase().charAt(0);        if(c == &#39;Q&#39;)&#123;            t.setLoop(false);            break;        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="Homework02-5"><a href="#Homework02-5" class="headerlink" title="Homework02"></a>Homework02</h3><p>package com.ljq.homework02;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class Homework02 {</p><pre><code>public static void main(String[] args) &#123;    M m = new M();    Thread thread = new Thread(m);    thread.setName(&quot;t取走：&quot;);    Thread thread1 = new Thread(m);    thread1.setName(&quot;t1取走：&quot;);    thread.start();    thread1.start();&#125;</code></pre><p>}</p><p>class M implements Runnable{</p><pre><code>private double balance = 10000;@Overridepublic void run() &#123;    while (true)&#123;        synchronized (this) &#123;            if (balance &lt; 1000) &#123;                System.out.println(&quot;余额不足&quot;);                break;            &#125;            System.out.println(Thread.currentThread().getName() + (balance -= 1000));        &#125;        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>}</p><h2 id="第十九章-IO"><a href="#第十九章-IO" class="headerlink" title="第十九章 IO"></a>第十九章 IO</h2><h3 id="FileCreate"><a href="#FileCreate" class="headerlink" title="FileCreate"></a>FileCreate</h3><p>package com.ljq.file;</p><p>import org.junit.jupiter.api.Test;</p><p>import java.io.File;<br>import java.io.IOException;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class FileCreate {</p><pre><code>public static void main(String[] args) &#123;&#125;//创建文件的方法1@Testpublic void create01() &#123;    File file = new File(&quot;e:\\&quot;);    String str1 = &quot;news1.txt&quot;;    File file1 = new File(file, str1);    try &#123;        file1.createNewFile();        System.out.println(&quot;你已创建成功&quot;);    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125;&#125;//创建文件的方法2@Testpublic void create2() &#123;    String str1 = &quot;e:\\&quot;;    String str2 = &quot;news2.txt&quot;;    File file = new File(str1, str2);    try &#123;        file.createNewFile();        System.out.println(&quot;你已创建成功&quot;);    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125;&#125;//方式三@Testpublic void create3() &#123;    File file = new File(&quot;e:\\news03.txt&quot;);    try &#123;        file.createNewFile();        System.out.println(&quot;你已经创建成功&quot;);    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125;&#125;</code></pre><p>}</p><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><p>package com.ljq.inputstream;</p><p>import org.junit.jupiter.api.Test;</p><p>import java.io.FileNotFoundException;<br>import java.io.IOException;</p><p>/**</p><ul><li>@author 6+7</li><li>@version 1.0</li></ul><p>*/</p><p>public class FileInputStream {</p><pre><code>public static void main(String[] args) &#123;&#125;@Testpublic void readFile01()&#123;    java.io.FileInputStream fileInputStream = null;    int readData = 0;    String str = &quot;e:\\hello.txt&quot;;    try &#123;        fileInputStream = new java.io.FileInputStream(str);        while ((readData = fileInputStream.read()) != -1)&#123;            System.out.print((char) readData);        &#125;    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        try &#123;            fileInputStream.close();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;@Testpublic void readFile02()&#123;    java.io.FileInputStream fileInputStream = null;    int readLen = 0;    String str = &quot;e:\\hello.txt&quot;;    byte[] b = new byte[8];    try &#123;        fileInputStream = new java.io.FileInputStream(str);        while ((readLen = fileInputStream.read(b)) != -1)&#123;            System.out.print(new String(b,0,readLen));        &#125;    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        try &#123;            fileInputStream.close();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="FileOutputStream01"><a href="#FileOutputStream01" class="headerlink" title="FileOutputStream01"></a>FileOutputStream01</h3><p>package com.ljq.outputstream;</p><p>import org.junit.jupiter.api.Test;</p><p>import java.io.FileOutputStream;<br>import java.io.IOException;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li></ul><p>*/</p><p>public class FileOutputStream01 {</p><pre><code>public static void main(String[] args) &#123;&#125;@Testpublic void writeFile()&#123;    FileOutputStream fileOut = null;    String file = &quot;e:\\hello.txt&quot;;    try &#123;        fileOut = new FileOutputStream(file,true);        String str = &quot;hello,world!&quot;;        fileOut.write(str.getBytes());    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        try &#123;            fileOut.close();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="FileCopy"><a href="#FileCopy" class="headerlink" title="FileCopy"></a>FileCopy</h3><p>package com.ljq.filecopy;</p><p>import org.junit.jupiter.api.Test;</p><p>import java.io.FileInputStream;<br>import java.io.FileOutputStream;<br>import java.io.IOException;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li></ul><p>*/</p><p>public class FileCopy {</p><pre><code>public static void main(String[] args) &#123;&#125;@Testpublic void fileCopy()&#123;    FileInputStream fis = null;    FileOutputStream fos = null;    String copyStr = &quot;C:\\Users\\DELL\\Pictures\\Saved Pictures\\git.jpg&quot;;    String pasteStr = &quot;e:\\git.jpg&quot;;    try &#123;        fis = new FileInputStream(copyStr);        fos = new FileOutputStream(pasteStr);        //定义一个字节数组，不然效率太低了        byte[] buf = new byte[1024];        int readLen = 0;        while ((readLen = fis.read(buf)) != -1)&#123;            fos.write(buf,0,readLen);        &#125;    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        try &#123;            if(fis != null)&#123;                fis.close();            &#125;            if (fos != null)&#123;                fis.close();            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader_"></a>FileReader_</h3><p>package com.ljq.reader_;</p><p>import org.junit.jupiter.api.Test;</p><p>import java.io.FileReader;<br>import java.io.IOException;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li></ul><p>*/</p><p>public class FileReader_ {</p><pre><code>public static void main(String[] args) &#123;&#125;@Testpublic void fileReader()&#123;    FileReader fr = null;    String str = &quot;e:\\hello.txt&quot;;    int data = 0;    try &#123;        fr = new FileReader(str);        while((data = fr.read()) != -1)&#123;            System.out.print((char)data);        &#125;    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        try &#123;            if(fr != null)&#123;                fr.close();            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;// 用char数组的方式@Testpublic void fileReader02()&#123;    System.out.println(&quot;char方式~&quot;);    FileReader fr = null;    String str = &quot;e:\\hello.txt&quot;;    char[] c = new char[8];    int readLen = 0;    try &#123;        fr = new FileReader(str);        while((readLen = fr.read(c)) != -1)&#123;            System.out.print(new String(c,0,readLen));        &#125;    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        try &#123;            if(fr != null)&#123;                fr.close();            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter_"></a>FileWriter_</h3><p>package com.ljq.writer;</p><p>import org.junit.jupiter.api.Test;</p><p>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li></ul><p>*/</p><p>public class FileWriter_ {<br>    public static void main(String[] args) {</p><pre><code>&#125;@Testpublic void fileWriter()&#123;    FileWriter fw = null;    String filePath = &quot;e:\\hello.txt&quot;;    char[] c = &#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;&#125;;    try &#123;        fw = new FileWriter(filePath);        fw.write(&quot;H&quot;);        fw.write(c,0,1);        fw.write(&quot;ljq最最npasdsadasd&quot;,3,5);        fw.write(&quot;ljq最最np&quot;.toCharArray());    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        try &#123;            fw.close();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader_"></a>BufferedReader_</h3><p>package com.ljq.reader_;</p><p>import java.io.BufferedReader;<br>import java.io.FileReader;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li></ul><p>*/</p><p>public class BufferedReader_ {</p><pre><code>public static void main(String[] args) throws Exception&#123;    String filePath = &quot;e:\\hello.txt&quot;;    //建立字节流    FileReader fileReader = new FileReader(filePath);    //建立处理流    BufferedReader bufferedReader = new BufferedReader(fileReader);    String line;    while((line = bufferedReader.readLine()) != null) &#123;        System.out.println(line);    &#125;    bufferedReader.close();&#125;</code></pre><p>}</p><h3 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter_"></a>BufferedWriter_</h3><p>package com.ljq.writer;</p><p>import java.io.BufferedWriter;<br>import java.io.FileWriter;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li></ul><p>*/</p><p>public class BufferedWriter_ {</p><pre><code>public static void main(String[] args) throws Exception&#123;    String filePath = &quot;e:\\hello.txt&quot;;    //建立一个处理流    BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(filePath,true));    bufferedWriter.write(&quot;哈哈哈哈哈&quot;);    bufferedWriter.newLine();    bufferedWriter.write(&quot;哇哦&quot;);    bufferedWriter.newLine();    bufferedWriter.write(&quot;哇哦，我最帅&quot;);    bufferedWriter.newLine();    bufferedWriter.close();&#125;</code></pre><p>}</p><h3 id="CopyBufferedOutputStream"><a href="#CopyBufferedOutputStream" class="headerlink" title="CopyBufferedOutputStream"></a>CopyBufferedOutputStream</h3><p>package com.ljq.outputstream;</p><p>import java.io.*;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li><li>/</li></ul><p>public class CopyBufferedOutputStream {</p><pre><code>public static void main(String[] args) &#123;    String cFilePath = &quot;e:\\git.jpg&quot;;    String pFilePath = &quot;e:\\git2.jpg&quot;;    BufferedInputStream bi = null;    BufferedOutputStream bo = null;    try &#123;        bi = new BufferedInputStream(new FileInputStream(cFilePath));        bo = new BufferedOutputStream(new FileOutputStream(pFilePath));        int readLen = 0;        byte[] buf = new byte[1024];        while ((readLen = bi.read(buf)) != -1)&#123;            bo.write(buf,0,readLen);        &#125;        System.out.println(&quot;拷贝成功~&quot;);    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125; finally &#123;        try &#123;            bi.close();            bo.close();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream_"></a>ObjectInputStream_</h3><p>package com.ljq.ObjectInputStream;</p><p>import com.ljq.ObjeckOutputStream.Dog;</p><p>import java.io.FileInputStream;<br>import java.io.ObjectInputStream;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li><li>/</li></ul><p>public class ObjectInputStream_ {</p><pre><code>public static void main(String[] args) throws Exception&#123;    String filePath = &quot;e:\\hello.txt&quot;;    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filePath));    System.out.println(ois.readInt());    System.out.println(ois.readUTF());    Object o = ois.readObject();    System.out.println(o);    Dog dog2 = (Dog)o;    System.out.println(dog2.getName());    ois.close();&#125;</code></pre><p>}</p><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream_"></a>ObjectOutputStream_</h3><p>package com.ljq.ObjeckOutputStream;</p><p>import java.io.FileOutputStream;<br>import java.io.ObjectOutputStream;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li><li>/</li></ul><p>public class ObjectOutputStream_ {</p><pre><code>public static void main(String[] args) throws Exception&#123;    String str = &quot;e:\\hello.txt&quot;;    ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(str));    objectOutputStream.writeInt(1234);    objectOutputStream.writeUTF(&quot;哈哈哈哈哈哈哈&quot;);    objectOutputStream.writeObject(new Dog(&quot;小花&quot;,14));    objectOutputStream.close();&#125;</code></pre><p>}</p><p>public class Dog implements Serializable {<br>    private String name;<br>    private int age;</p><pre><code>public Dog(String name, int age) &#123;    this.name = name;    this.age = age;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;@Overridepublic String toString() &#123;    return &quot;Dog&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, age=&quot; + age +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties_"></a>Properties_</h3><p>package com.ljq.properties;</p><p>import java.io.FileOutputStream;<br>import java.io.FileReader;<br>import java.io.IOException;<br>import java.util.Properties;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li><li>/</li></ul><p>public class Properties_ {</p><pre><code>public static void main(String[] args) throws IOException &#123;    //先建立对象    Properties properties = new Properties();    //加载这个Properties对象，指定配置文件，    properties.load(new FileReader(&quot;src\\mysql.properties&quot;));    String user = properties.getProperty(&quot;user&quot;);    System.out.println(user);    String pwd = properties.getProperty(&quot;pwd&quot;);    System.out.println(pwd);    properties.list(System.out);    Properties properties1 = new Properties();    properties1.setProperty(&quot;user&quot;,&quot;金毛狮王&quot;);    properties1.setProperty(&quot;id&quot;,&quot;111.111.111.0&quot;);    properties1.setProperty(&quot;pwd&quot;,&quot;abc111111&quot;);    properties1.store(new FileOutputStream(&quot;src\\mysql2.properties&quot;),null);&#125;</code></pre><p>}</p><h3 id="homework01"><a href="#homework01" class="headerlink" title="homework01"></a>homework01</h3><p>package com.ljq.homework01;</p><p>import java.io.File;<br>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li><li>/</li></ul><p>public class Homework01 {</p><pre><code>public static void main(String[] args) &#123;    File file = new File(&quot;e:\\mytemp&quot;);    if(!(file.exists()))&#123;        if(file.mkdir())&#123;            System.out.println(&quot;创建成功&quot;);        &#125;else&#123;            System.out.println(&quot;创建失败&quot;);        &#125;    &#125;else&#123;        System.out.println(&quot;目录已经存在&quot;);    &#125;    File file1 = new File(&quot;e:\\mytemp\\hello.txt&quot;);    if(!(file1.exists()))&#123;        try &#123;            if(file1.createNewFile())&#123;                FileWriter fileWriter = new FileWriter(&quot;e:\\mytemp\\hello.txt&quot;);                fileWriter.write(&quot;hello,world~&quot;);                fileWriter.close();                System.out.println(&quot;你创建成功&quot;);            &#125;else&#123;                System.out.println(&quot;你创建失败&quot;);            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;else&#123;        System.out.println(&quot;文件已经存在~，创建你失败&quot;);    &#125;&#125;</code></pre><p>}</p><h3 id="homework02"><a href="#homework02" class="headerlink" title="homework02"></a>homework02</h3><p>package com.ljq.homework02;</p><p>import java.io.*;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li><li>/</li></ul><p>public class Homework02 {</p><pre><code>public static void main(String[] args) throws IOException &#123;    String filePath = &quot;e:\\hello2.txt&quot;;    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(filePath),&quot;gbk&quot;));    String line = null;    int i = 1;    while((line = bufferedReader.readLine()) != null)&#123;        System.out.println(i + &quot;.&quot; + line);        i++;    &#125;    if(bufferedReader != null) &#123;        bufferedReader.close();    &#125;&#125;</code></pre><p>}</p><h3 id="homework03"><a href="#homework03" class="headerlink" title="homework03"></a>homework03</h3><p>package com.ljq.homework03;</p><p>import java.io.*;<br>import java.util.Properties;</p><p>/**</p><ul><li>@author 6+7~</li><li>@version 1.0</li><li>/</li></ul><p>public class Homework03 {</p><pre><code>public static void main(String[] args) throws IOException &#123;    Properties properties = new Properties();    properties.load(new FileReader(&quot;src\\dog.properties&quot;));    Dog dog = new Dog(properties.getProperty(&quot;name&quot;), Integer.parseInt(properties.getProperty(&quot;age&quot;)),            properties.getProperty(&quot;color&quot;));    System.out.println(dog);    String Path = &quot;e:\\dog.dat&quot;;    int readLen = 0;    ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(Path));    objectOutputStream.writeObject(dog);    objectOutputStream.close();&#125;</code></pre><p>}</p><p>class Dog implements Serializable {</p><pre><code>private String name;private int age;private String color;public Dog(String name, int age, String color) &#123;    this.name = name;    this.age = age;    this.color = color;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;public String getColor() &#123;    return color;&#125;public void setColor(String color) &#123;    this.color = color;&#125;@Overridepublic String toString() &#123;    return &quot;Dog&#123;&quot; +            &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +            &quot;, age=&quot; + age +            &quot;, color=&#39;&quot; + color + &#39;\&#39;&#39; +            &#39;&#125;&#39;;&#125;</code></pre><p>}</p><h2 id="第二十章-坦克大战3（写在项目那篇博文）"><a href="#第二十章-坦克大战3（写在项目那篇博文）" class="headerlink" title="第二十章 坦克大战3（写在项目那篇博文）"></a>第二十章 坦克大战3（写在项目那篇博文）</h2><h2 id="第二十一章-网络编程"><a href="#第二十一章-网络编程" class="headerlink" title="第二十一章 网络编程"></a>第二十一章 网络编程</h2><h3 id="API"><a href="#API" class="headerlink" title="API_"></a>API_</h3><p>package com.ljq.api;</p><p>import java.net.InetAddress;<br>import java.net.UnknownHostException;</p><p>/**</p><ul><li>@author 刘嘉祺~</li><li>@version 1.0</li></ul><p>*/</p><p>public class API_ {<br>    public static void main(String[] args) throws UnknownHostException {<br>        //获得本机的InetAddress对象<br>        InetAddress localHost =InetAddress.getLocalHost();<br>        System.out.println(localHost);//DESKTOP-MUR50HE/192.168.0.103</p><pre><code>    //根据本机名称返回InetAddress对象    InetAddress byName = InetAddress.getByName(&quot;DESKTOP-MUR50HE&quot;);    System.out.println(byName);//DESKTOP-MUR50HE/192.168.0.103    //根据域名返回InetAddress对象，比如百度、    InetAddress byName1 = InetAddress.getByName(&quot;www.baidu.com&quot;);    System.out.println(byName1);//www.baidu.com/110.242.68.4    //通过InetAddress对象获取地址    String hostAddress = byName1.getHostAddress();    System.out.println(hostAddress);//110.242.68.3    //通过InetAddress对象获取主机名/域名    String hostName = byName1.getHostName();    System.out.println(hostName);&#125;</code></pre><p>}</p><h3 id="SocketTCP01Server、SocketTCP01XClient"><a href="#SocketTCP01Server、SocketTCP01XClient" class="headerlink" title="SocketTCP01Server、SocketTCP01XClient"></a>SocketTCP01Server、SocketTCP01XClient</h3><p>public class SocketTCP01Server {</p><pre><code>public static void main(String[] args) throws IOException &#123;    //在本机（服务端）9999端口监听    ServerSocket serverSocket = new ServerSocket(9999);    System.out.println(&quot;服务器，在9999端口监听，等待连接。。。&quot;);    //没有客户端接入9999接口时，程序会阻塞，等待接入    //如果有，返回socket对象，程序继续    Socket socket = serverSocket.accept();    System.out.println(socket.getClass());    //得到和socket关联的输入流    InputStream inputStream = socket.getInputStream();    byte[] buf = new byte[1024];    int readLen = 0;    while((readLen = inputStream.read(buf)) != -1)&#123;        System.out.println(new String(buf,0,readLen));    &#125;    //关闭所有的流（避免资源浪费）    inputStream.close();    socket.close();    serverSocket.close();&#125;</code></pre><p>}</p><p>public class SocketTCP01XClient {</p><pre><code>public static void main(String[] args) throws IOException &#123;    //链接服务器（ip ，端口），如果连接成功返回socket对象    Socket socket = new Socket(InetAddress.getLocalHost(),9999);    System.out.println(socket.getClass());    //得到和socket关联的输出流    OutputStream outputStream = socket.getOutputStream();    //写入    outputStream.write(&quot;hello,ljq~&quot;.getBytes());    //关闭，一定要记得关闭    outputStream.close();&#125;</code></pre><p>}</p><h3 id="SocketTCP03Server、"><a href="#SocketTCP03Server、" class="headerlink" title="SocketTCP03Server、"></a>SocketTCP03Server、</h3><p>package com.ljq.socket;</p><p>import java.io.*;</p><p>import java.net.ServerSocket;</p><p>import java.net.Socket;</p><p>/**</p><ul><li>@author 刘嘉祺~</li><li>@version 1.0</li><li>/</li></ul><p>public class SocketTCP03Server {</p><pre><code>public static void main(String[] args) throws IOException &#123;    ServerSocket serverSocket = new ServerSocket(9999);    Socket socket = serverSocket.accept();    InputStream inputStream = socket.getInputStream();    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));    String s = null;    while((s = bufferedReader.readLine()) != null) &#123;        System.out.println(s);    &#125;    OutputStream outputStream = socket.getOutputStream();    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream));    bufferedWriter.write(&quot;hello,client~&quot;);    bufferedWriter.newLine();//换行表示此行结束    bufferedWriter.flush();//注意手动刷新    bufferedReader.close();    bufferedReader.close();    socket.close();    serverSocket.close();&#125;</code></pre><p>}</p><p>public class SocketTCP03XClient {</p><pre><code>public static void main(String[] args) throws IOException &#123;    Socket socket = new Socket(InetAddress.getLocalHost(),9999);    OutputStream outputStream = socket.getOutputStream();    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream));    bufferedWriter.write(&quot;hello,Server~&quot;);    bufferedWriter.newLine();    bufferedWriter.flush();    socket.shutdownOutput();    InputStream inputStream = socket.getInputStream();    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));    String s = bufferedReader.readLine();    System.out.println(s);    bufferedReader.close();    bufferedWriter.close();    socket.close();&#125;</code></pre><p>}</p><h3 id="SocketUploadServer、"><a href="#SocketUploadServer、" class="headerlink" title="SocketUploadServer、"></a>SocketUploadServer、</h3><p>package com.ljq.upload;</p><p>import java.io.*;</p><p>import java.net.ServerSocket;</p><p>import java.net.Socket;</p><p>/**</p><ul><li>@author 刘嘉祺~</li><li>@version 1.0</li><li>/</li></ul><p>public class SocketUploadServer {</p><pre><code>public static void main(String[] args) throws Exception &#123;    ServerSocket serverSocket = new ServerSocket(8888);    Socket socket = serverSocket.accept();    BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());    byte[] bytes = StreamUtils.streamToByteArray(bis);    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;src\\git.jpg&quot;));    bos.write(bytes);    bos.close();    //    OutputStream outputStream1 = socket.getOutputStream();    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(outputStream1));    bw.write(&quot;上传成功&quot;);    bw.newLine();    bw.flush();    bw.close();    outputStream1.close();    bis.close();    socket.close();    serverSocket.close();&#125;</code></pre><p>}</p><p>public class SocketUploadClient {</p><pre><code>public static void main(String[] args) throws Exception &#123;    Socket socket = new Socket(InetAddress.getLocalHost(), 8888);    String filePath = &quot;e:\\git.jpg&quot;;    BufferedInputStream bis = new BufferedInputStream(new FileInputStream(filePath));    byte[] bytes = StreamUtils.streamToByteArray(bis);    OutputStream outputStream = socket.getOutputStream();    outputStream.write(bytes);    socket.shutdownOutput();//设置写入数据的结束标记    bis.close();    InputStream inputStream = socket.getInputStream();    String s = StreamUtils.streamToString(inputStream);    System.out.println(s);    inputStream.close();    socket.close();    outputStream.close();&#125;</code></pre><p>}</p><h3 id="UDPReceiverA-、UDPSenderB"><a href="#UDPReceiverA-、UDPSenderB" class="headerlink" title="UDPReceiverA 、UDPSenderB"></a>UDPReceiverA 、UDPSenderB</h3><p>package com.ljq.udp;</p><p>import java.io.IOException;</p><p>import java.net.DatagramPacket;</p><p>import java.net.DatagramSocket;</p><p>import java.net.InetAddress;</p><p>/**</p><ul><li>@author 刘嘉祺~</li><li>@version 1.0</li></ul><p>*/</p><p>public class UDPReceiverA {</p><pre><code>public static void main(String[] args) throws IOException &#123;    //监听    DatagramSocket socket = new DatagramSocket(9999);    //创建packet准备接受数据    byte[] buf = new byte[1024];    DatagramPacket packet = new DatagramPacket(buf, buf.length);    socket.receive(packet);    //拆包    int length = packet.getLength();//得到的packet实际长度    byte[] data = packet.getData();    String s = new String(data, 0, length);    System.out.println(s);    //发送内容    byte[] bytes = &quot;好的，知道了&quot;.getBytes();    DatagramPacket packet2 =            new DatagramPacket(bytes, bytes.length,                    InetAddress.getByName(&quot;192.168.142.1&quot;), 9998);    socket.send(packet2);    socket.close();&#125;</code></pre><p>}</p><p>public class UDPSenderB {</p><pre><code>public static void main(String[] args) throws IOException &#123;    DatagramSocket socket = new DatagramSocket(9998);    //打包发送的内容    byte[] bytes = &quot;hello,明天去吃火锅&quot;.getBytes();    DatagramPacket packet =            new DatagramPacket(bytes, bytes.length,                    InetAddress.getByName(&quot;192.168.142.1&quot;), 9999);    socket.send(packet);    //接受内容    byte[] buf2 = new byte[1024];    DatagramPacket packet2 = new DatagramPacket(buf2, buf2.length);    socket.receive(packet2);    //拆包    int length = packet.getLength();//得到的packet实际长度    byte[] data = packet2.getData();    String s = new String(data, 0, length);    System.out.println(s);    socket.close();&#125;</code></pre><p>}</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=434902428&auto=1&height=66"></iframe>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java自学练习及作业&quot;&gt;&lt;a href=&quot;#Java自学练习及作业&quot; class=&quot;headerlink&quot; title=&quot;Java自学练习及作业&quot;&gt;&lt;/a&gt;Java自学练习及作业&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java自学笔记</title>
    <link href="http://example.com/2021/04/27/java%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0-0/"/>
    <id>http://example.com/2021/04/27/java%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0-0/</id>
    <published>2021-04-27T09:27:33.000Z</published>
    <updated>2021-08-12T11:27:09.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java自学笔记"><a href="#Java自学笔记" class="headerlink" title="Java自学笔记"></a>Java自学笔记</h1><span id="more"></span><h1 id="《《文章很长，目录在右下角》》"><a href="#《《文章很长，目录在右下角》》" class="headerlink" title="《《文章很长，目录在右下角》》"></a>《《文章很长，目录在右下角》》</h1><p>座右铭：</p><ul><li>基础不牢，地动山摇。</li><li>再牛的程序员都是从小白开始，既然开始了，就全心投入学好技术。</li><li>我亦无他，唯手熟尔。</li><li>动手去做，就会一步步走向成功</li><li>听懂了，为什么题（项目）还是不会做？  听懂 ！= 灵活运用 （练习）</li><li>每个人都可以活得更精彩，不要让惰性毁了你</li><li>韩愈：业精于勤，荒于嬉</li><li>成为一个编程高手的秘诀：思考-编程-思考-编程</li><li>纸上得来终觉浅，觉知此事要躬行</li><li>读代码破万行，写代码如有神</li></ul><p>自学资源：<a href="https://www.bilibili.com/video/BV1fh411y7R8?from=search&seid=12793922141114309925">java自学所用视频</a></p><h1 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h1><h2 id="第一章-内容介绍"><a href="#第一章-内容介绍" class="headerlink" title="第一章 内容介绍"></a>第一章 内容介绍</h2><h3 id="就业方向"><a href="#就业方向" class="headerlink" title="就业方向"></a>就业方向</h3><ul><li>Java基础=》Javase</li></ul><ol><li>JavaEE软件工程师，电商，团购，众筹，sns，教育，金融，搜索。</li><li>大数据软件工程师<br>应用工程师<br>算法工程师<br>分析和挖掘</li><li>Android软件工程师<br>开发场景举例：SSM，Android，大数据Hadoop。</li></ol><h3 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h3><ul><li><p>企业级应用</p></li><li><p>Android平台应用</p></li><li><p>移动领域：消费，嵌入式领域。。。</p><h2 id="第二章-Java概述"><a href="#第二章-Java概述" class="headerlink" title="第二章 Java概述"></a>第二章 Java概述</h2><h3 id="程序：有序指令的集合"><a href="#程序：有序指令的集合" class="headerlink" title="程序：有序指令的集合"></a>程序：有序指令的集合</h3><h3 id="Java诞生：。。"><a href="#Java诞生：。。" class="headerlink" title="Java诞生：。。"></a>Java诞生：。。</h3></li><li><p>8和11 。。</p></li><li><p>Java之父–詹姆斯·高斯林 。。</p></li><li><p>甲骨文公司</p><h3 id="平台体系-SE（标准版），EE（企业版），ME（小型版）"><a href="#平台体系-SE（标准版），EE（企业版），ME（小型版）" class="headerlink" title="平台体系: SE（标准版），EE（企业版），ME（小型版）"></a>平台体系: SE（标准版），EE（企业版），ME（小型版）</h3><h3 id="Java特点："><a href="#Java特点：" class="headerlink" title="Java特点："></a>Java特点：</h3></li><li><p>对象（oop）</p></li><li><p>Java 语言是健壮的。Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证</p></li><li><p>Java 语言是<em>跨平台性</em>的。（即: 一个编译好的.class 文件可以在多个系统下运行，这种特性称为跨平台性）</p></li><li><p>Java 语言是解释型的(了解)</p></li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li>editplus，notepad++</li><li>[Sublime Text] <a href="https://www.sublimetext.com/3">https://www.sublimetext.com/3</a></li><li>IDEA</li><li>eclipse</li><li>选择：工具选择 如何选择开发工具 我们先选择用文本编辑器本 sublime，到大家对 java 有一定了解后，我们再使用 IDEA 和 Eclipse 开发工具。 可以<br>更深刻的理解 java 技术,培养代码感。<br>【面试时，往往程序员手写代码】 有利于公司面试<h3 id="Java-运行机制及运行过程"><a href="#Java-运行机制及运行过程" class="headerlink" title="Java 运行机制及运行过程"></a>Java 运行机制及运行过程</h3></li><li>Java 语言的特点：跨平台性</li><li>Java 核心机制-Java 虚拟机 (JVM java virtual machine)  </li></ul><ol><li>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在 JDK 中. </li><li>对于不同的平台，有不同的虚拟机。</li><li>Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行” (说明)</li></ol><ul><li>原理：test.java=&gt;编译Javac=&gt;test.class=&gt;运行=&gt;JVM for linux,JVM for Windows,JVM for Mac<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3></li><li>JDK 的全称(Java Development Kit  Java 开发工具包) JDK = JRE + java 的开发工具 （java，javac,javadoc,javap） 等</li><li>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独 安装 JRE 了<h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3></li><li>JRE(Java Runtime Environment  Java 运行环境) JRE = JVM + Java 的核心类库（类）</li><li>包括 Java 虚拟机(JVM Java Virtual Machine)和 Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序， 计算机中只需要安装 JRE 即可。</li><li>JDK,JRE,JVM</li></ul><ol><li>JDK = JRE + 开发工具集（例如 Javac,java 编译工具等)  </li><li>JRE = JVM + Java SE 标准类库（java 核心类库）  </li><li>如果只想运行开发好的 .class 文件 只需要 JRE<h3 id="安装jdk，配置变量path"><a href="#安装jdk，配置变量path" class="headerlink" title="安装jdk，配置变量path"></a>安装jdk，配置变量path</h3></li></ol><ul><li></li></ul><ol><li>我的电脑-属性-高级系统设置-环境变量</li><li>增加环境</li><li>编辑 path 环境变量</li><li>检查：javac<h3 id="Java-快速入门"><a href="#Java-快速入门" class="headerlink" title="Java 快速入门"></a>Java 快速入门</h3></li></ol><ul><li>hello.Java</li><li>ljq</li><li>运行原理：.java（源文件）=&gt;编译javac（字节码文件）=&gt;.class=&gt;运行java=&gt;…<h3 id="Java开发注意事项和原则"><a href="#Java开发注意事项和原则" class="headerlink" title="Java开发注意事项和原则"></a>Java开发注意事项和原则</h3><img src="https://i.loli.net/2021/05/04/CHqlnz3Q5bKIuYw.jpg"><h2 id="如何学"><a href="#如何学" class="headerlink" title="如何学"></a>如何学</h2><img src="https://i.loli.net/2021/05/04/zn7k96pZDK5C1Ow.png"><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3></li></ul><ol><li>\t 一个制表位 实现对齐</li><li>\n 换行符</li><li>\\ 输出 \</li><li>\“ 输出 “</li><li>\‘ </li><li>\r 一个回车<h3 id="初学java常见错误"><a href="#初学java常见错误" class="headerlink" title="初学java常见错误"></a>初学java常见错误</h3><img src="https://i.loli.net/2021/05/04/lj4Fn2hI6f7qgpk.png"><h3 id="注释（comment）"><a href="#注释（comment）" class="headerlink" title="注释（comment）"></a>注释（comment）</h3></li><li>解释代码的（好习惯）</li><li>单行注释： //<br>多行注释：/* */</li><li>注释不会被执行，不能嵌套<h3 id="文档注释-…"><a href="#文档注释-…" class="headerlink" title="文档注释 /**….*/"></a>文档注释 /**….*/</h3><img src="https://i.loli.net/2021/05/04/eQUhj5t1zLOXZrg.png"><br>javadoc标签<br><img src="https://i.loli.net/2021/05/04/4O6go7JpscYAwV5.png"><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><img src="https://i.loli.net/2021/05/04/iIYGUCgBvM9Qn3k.png"><h3 id="DOS命令（了解）"><a href="#DOS命令（了解）" class="headerlink" title="DOS命令（了解）"></a>DOS命令（了解）</h3><img src="https://i.loli.net/2021/05/04/IkyVseMi7LATx1S.png"></li><li>查看当前目录是有什么内容 dir dir dir d:\abc2\test200 </li><li>切换到其他盘下：盘符号 cd : change directory 案例演示：切换到 c 盘 cd /D c: </li><li>切换到当前盘的其他目录下 (使用相对路径和绝对路径演示), ..\表示上一级目录 案例演示： cd d:\abc2\test200 cd ....\abc2\test200 </li><li>切换到上一级： 案例演示： cd .. </li><li>切换到根目录：cd \ 案例演示：cd \ </li><li>查看指定的目录下所有的子级目录 tree </li><li>清屏 cls [苍老师] </li><li>退出 DOS exit </li><li>(md[创建目 录],rd[删除目录],copy[拷贝文件],del[删除文件],echo[输入内容到文件],type,move[剪切]) =&gt; Linux,<h3 id="相对路径，绝对路径"><a href="#相对路径，绝对路径" class="headerlink" title="相对路径，绝对路径"></a>相对路径，绝对路径</h3><img src="https://i.loli.net/2021/05/04/XUonVZkACfNJPbw.png"><h3 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h3><img src="https://i.loli.net/2021/05/04/PAB7qDhTbWV4Mmk.png"><h2 id="第三章-变量"><a href="#第三章-变量" class="headerlink" title="第三章 变量"></a>第三章 变量</h2><h3 id="变量的介绍"><a href="#变量的介绍" class="headerlink" title="变量的介绍"></a>变量的介绍</h3></li><li>一个程序就是一个世界,变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房 间，而通过变量名可以访问到变量(值)</li><li>变量是程序的基本组成单位（基本要素：类型+名称+值）</li><li>原理示意图<br><img src="https://i.loli.net/2021/05/05/A2h5Be7kjJCEl3a.png"><h3 id="变量快速入门"><a href="#变量快速入门" class="headerlink" title="变量快速入门"></a>变量快速入门</h3></li></ol><ul><li>Var01(作品)</li><li>Var02<h3 id="变量注意事项"><a href="#变量注意事项" class="headerlink" title="变量注意事项"></a>变量注意事项</h3><img src="https://i.loli.net/2021/05/05/pESdnrg2qaZOJoi.png"></li><li>VarDetail(作品)<h3 id="号的使用"><a href="#号的使用" class="headerlink" title="+号的使用"></a>+号的使用</h3><img src="https://i.loli.net/2021/05/05/N4koPfzEDauh1MB.png"><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3></li><li>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间(字节)。</li><li><img src="https://i.loli.net/2021/05/05/3FkreBR8pguIACz.png"></li><li>老韩说，要背下来</li></ul><ol><li>java 数据类型分为两大类 基本数据类型， 引用类型 </li><li>基本数据类型有 8 中 数值型 [byte , short , int , long , float ,double] char , boolean </li><li>引用类型 [类，接口， 数组]</li></ol><ul><li>整数类型</li></ul><ol><li>byte 1字节 -128~127</li><li>short 2字节 -(2^15)~2^15-1</li><li>int 4字节 -2^31~2^31-1</li><li>long 8字节 -2^63~2^63-1</li></ol><ul><li>细节<br><img src="https://i.loli.net/2021/05/06/MufIkl7wzgVXZFx.png"></li><li>浮点类型</li></ul><ol><li>单精度float 4字节</li><li>双精度double</li><li>说明：1) 关于浮点数在机器中存放形式的简单说明,浮点数=符号位+指数位+尾数位 2) 尾数部分可能丢失，造成精度损失(小数都是近似值)。</li></ol><ul><li>细节<br><img src="https://i.loli.net/2021/05/06/pnSTy8mdzXA9ujx.png"></li><li>字符类型</li></ul><ol><li>char两个字节 多个字符，string</li><li>char01</li></ol><ul><li>细节</li></ul><ol><li><img src="https://i.loli.net/2021/05/06/WinzBgD75UrZouh.png"></li><li>CharDetail<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3></li></ol><ul><li>ASCLL码-&gt;Unicode码（包容前者）-&gt;UTF-8(Unicode改进) </li><li>boolean（布尔类型） Boolean01</li></ul><ol><li>true false 表示真假</li><li>占一字节</li><li>逻辑运算</li></ol><ul><li>细节</li></ul><ol><li>不可以用0或非零，和c不一样<h3 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h3></li><li>自动类型转换</li><li>（背）char-&gt;int-&gt;long-&gt;float-&gt;double**********byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double   Autoconvert.java</li><li><img src="https://i.loli.net/2021/05/07/IHj7RfpyuBOovxi.png"></li></ol><ul><li>转换细节</li></ul><ol><li>AutoconvertDetail.java</li><li><img src="https://i.loli.net/2021/05/07/lIKuNGM1QbFD2in.png"></li></ol><ul><li>强制转换（有意）</li></ul><ol><li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符 ( )，但可能造成 精度降低或溢出,格外要注意。</li><li>强制转换细节<br><img src="https://i.loli.net/2021/05/07/lM6yDINEc7dWZAn.png"></li><li>(代码)ForceConvert.java</li><li>ForceConvertDetail.java</li></ol><ul><li>基本和String转换</li></ul><ol><li>+” “ 转String</li><li>XX.parseXX 转 基本</li><li>StringToBasic.java</li></ol><ul><li>注意事项 StringToBasicDetail.java</li></ul><ol><li>在将 String 类型转成 基本数据类型时，要确保String类型能够转成有效的数据 ，比如 我们可以把 “123” , 转成一 个整数，但是不能把 “hello” 转成一个整数。</li><li>如果格式不正确，就会抛出异常，程序就会终止， 这个问题在异常处理章节中，会处理<h3 id="本章作业-1"><a href="#本章作业-1" class="headerlink" title="本章作业"></a>本章作业</h3><h2 id="第四章-运算符"><a href="#第四章-运算符" class="headerlink" title="第四章 运算符"></a>第四章 运算符</h2><h3 id="运算符介绍"><a href="#运算符介绍" class="headerlink" title="运算符介绍"></a>运算符介绍</h3></li><li>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</li><li><ol><li>算术运算符 2) 赋值运算符 3) 关系运算符 （比较运算符） 4) 逻辑运算符 5) 位运算符 （需要二进制基础） 6) 三元运算符<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><img src="https://i.loli.net/2021/05/08/WPUJHxlDX4BV15c.png"></li></ol></li></ol><ul><li>ArithmeticOperator.java</li></ul><ol><li>/ :（10/4）java中去掉小数点（2）。（10.0/4）不去掉（2.5）。（double = 10/4（2.0））</li><li>% ：a%b=a-a/b*b</li><li>++ :独立使用前，后一样，作为表达使用，前++先自增后复制，后++先赋值后自增。</li><li>– :同上</li><li>ArithmeticOperatorExer.java</li><li>ArithmeticOperatorExer01.java</li><li>ArithmeticOperatorExer02.java<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3></li><li>boolean true 或 false</li><li>RelationalOperator.java<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3></li><li><img src="https://i.loli.net/2021/05/09/H7pjUJLZ23cnCdG.png"></li></ol><ul><li>&amp;&amp; &amp;</li></ul><ol><li>&amp;&amp;（短路与） 和 &amp;（逻辑与）  特点一样（两个条件都为true，结果为true）====Logicperator01.java</li><li>对于短路与（&amp;&amp;）第一个条件为false则后面不会执行，对于逻辑与（&amp;）第一个条件为false则后面依然会执行。</li></ol><ul><li>||  |</li></ul><ol><li>短路或||，只要有一个成立结果为true，否则false。逻辑或 | ,(同上)。====Logicperator02.java</li><li>对于短路或 || ，如果第一个为true，则第二个条件不会判断，最终为true，效率高。</li></ol><ul><li>!</li></ul><ol><li>本身成立（true），则输出false====InverseOperator.java</li></ol><ul><li>^</li></ul><ol><li>异或：条件不同，则结果为true，否则为false</li></ol><ul><li>Test.java   Test02.java<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3></li><li>赋值运算符就是将某个运算后的之，赋给指定的变量</li></ul><ol><li>a+=b  ==  a = a + b;(后面一样)</li><li>AssignOperator.java</li></ol><ul><li>特点</li></ul><ol><li>运算顺序从右往左（先运算后赋值）</li><li>左边只能是变量，右边变量，表达式，常量值，</li><li>复合赋值运算符会进行类型转换。byte b = 2; b += 3; b++;<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3></li></ol><ul><li>基本语法</li></ul><ol><li>条件表达式?表达式1:表达式2;</li></ol><ul><li>运算规则：</li></ul><ol><li>如果条件表达式为true，运算的结果是表达式1；</li><li>如果条件表达式为false，运算的结果是表达式2；</li><li>口诀（一灯大师：一真大师）</li><li>TernaryOperator.java</li></ol><ul><li>运算细节</li></ul><ol><li>表达式 1 和表达式 2 要为可以赋给接收变量的类型(或可以自动转换) ====TernaryOperatorDetail.java</li><li>三元运算符可以转成 if–else 语句</li><li>TernaryOperatorExercise.java<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3></li><li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如右表，上一行运算符总优先于下一行。 </li><li>只有单目运算符、赋值运算符是从右向左运算的。 </li><li>一览表, 不要背，使用多了，就熟悉了.<br><img src="https://i.loli.net/2021/05/10/bFrlxZCfqSkgpd4.png"><h3 id="标识符的命名规则和规范"><a href="#标识符的命名规则和规范" class="headerlink" title="标识符的命名规则和规范"></a>标识符的命名规则和规范</h3></li></ol><ul><li>规则<br><img src="https://i.loli.net/2021/05/10/x3nOlzeIp4L9KVr.png"></li><li>规范</li></ul><ol><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc //比如 com.hsp.crm </li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz [大驼峰] 比如： TankShotGame </li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz [小驼峰， 简称 驼峰法] 比如： tankShotGame </li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ 比如 ：定义一个所得税率 TAX_RATE </li><li>后面我们学习到 类，包，接口，等时，我们的命名规范要这样遵守,更加详细的看文档</li></ol><ul><li>关键字</li></ul><ol><li>被赋予特殊含义，有专门用途，（都是小写）</li></ol><ul><li>保留字</li></ul><ol><li>以后的版本可能用，要避免使用</li></ol><ul><li>键盘输入语句</li></ul><ol><li>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。Input.java , 需要一个 扫描器(对象), 就是 Scanner====Input.java</li></ol><ul><li>步骤</li></ul><ol><li>导入该类的所在包, java.util.* </li><li>创建该类对象（声明变量） </li><li> 调用里面的功能<h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3></li></ol><ul><li>进制的介绍</li></ul><ol><li>二进制：0,1 ，满 2 进 1.以 0b 或 0B 开头。 </li><li>十进制：0-9 ，满 10 进 1。 </li><li>八进制：0-7 ，满 8 进 1. 以数字 0 开头表示。 </li><li>十六进制：0-9 及 A(10)-F(15)，满 16 进 1. 以 0x 或 0X 开头表示。此处的 A-F 不区分大小写<h3 id="进制的转换（基本功）"><a href="#进制的转换（基本功）" class="headerlink" title="进制的转换（基本功）"></a>进制的转换（基本功）</h3></li></ol><ul><li>第一组： </li><li>二进制转十进制 </li></ul><ol><li>规则：从低位起，每个位上的数乘以2的（位数-1）的次方<br>的和</li></ol><ul><li>八进制转十进制</li></ul><ol><li>从低位起，每个位上的数乘以8的（位数-1）的次方的和 </li></ol><ul><li>十六进制转十进制</li></ul><ol><li>从低位起，每个位上的数乘以16的（位数-1）的次方的和</li></ol><ul><li>第二组： </li><li>十进制转二进制 </li></ul><ol><li>不断除以2，直到商为零，将余数倒序。</li></ol><ul><li>十进制转八进制</li></ul><ol><li>不断除以8，直到商为零，将余数倒序。</li></ol><ul><li>十进制转十六进制 </li></ul><ol><li>不断除以16，直到商为零，将余数倒序。</li></ol><ul><li>第三组: </li><li>二进制转八进制</li></ul><ol><li>规则：从低位开始,将二进制数每三位一组，转成对应的八进制数即可。</li></ol><ul><li>二进制转十六进制 </li></ul><ol><li>规则：从低位开始,将二进制数每四位一组，转成对应的十六进制数即可。</li></ol><ul><li>第四组:</li><li>八进制转二进制 </li></ul><ol><li>规则：将八进制数每 1 位，转成对应的一个 3 位的二进制数即可。</li></ol><ul><li>十六进制转二进制</li></ul><ol><li>规则：将十六进制数每 1 位，转成对应的一个 4 位的二进制数即可。<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3></li></ol><ul><li>二进制在运算中的说明<br><img src="https://i.loli.net/2021/05/11/3OqsZWp6QawPvAi.png"></li><li>原码，反码，补码（重点难点）<br><img src="https://i.loli.net/2021/05/11/m1DMJ8xeIkfuVZj.png"></li><li>位运算符<br><img src="https://i.loli.net/2021/05/11/jGm5SVkq2YpZhMn.png"></li></ul><ol><li>BitOperator.java(练习题里找)</li></ol><ul><li>三个 &gt;&gt;、&lt;&lt; 和 &gt;&gt;&gt; , 运算规则:</li></ul><ol><li>算术右移 &gt;&gt;：低位溢出,符号位不变,并用符号位补溢出的高位 </li><li>算术左移 &lt;&lt;: 符号位不变,低位补 0 </li><li>‘ &gt;&gt;&gt;’ 逻辑右移也叫无符号右移,运算规则是: 低位溢出，高位补 0 </li><li>特别说明：没有 &lt;&lt;&lt; 符号</li></ol><ul><li>案例</li></ul><ol><li>int a=1&gt;&gt;2; //1 =&gt; 00000001 =&gt; 00000000 本质 1 / 2 / 2 =0 </li><li>int c=1&lt;&lt;2; //1 =&gt; 00000001 =&gt; 00000100 本质 1 * 2 * 2 = 4<h3 id="本章作业-2"><a href="#本章作业-2" class="headerlink" title="本章作业"></a>本章作业</h3><h2 id="第五章-控制结构"><a href="#第五章-控制结构" class="headerlink" title="第五章 控制结构"></a>第五章 控制结构</h2><h3 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h3></li></ol><ul><li>从上到下，没有判断和跳转</li><li>注意事项</li></ul><ol><li>向前引用（先定义后引用）<h4 id="分支控制-if-else"><a href="#分支控制-if-else" class="headerlink" title="分支控制 if-else"></a>分支控制 if-else</h4></li></ol><ul><li>让程序有选择地执行</li></ul><ol><li>单分支 If01.java<br><img src="https://i.loli.net/2021/05/11/hHUzXkRlBxyYP8T.png"></li><li>双分支 If02.java<br><img src="https://i.loli.net/2021/05/11/9tDhGogu3F2Ed8R.png"></li><li>IfExercise01.java</li><li>多分支 If03.java<br><img src="https://i.loli.net/2021/05/11/q9WbnwsNU6ZEefo.png"><br><img src="https://i.loli.net/2021/05/11/P8cGYQ2r4H3BETe.png"></li></ol><ul><li>嵌套分支    </li></ul><ol><li>在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外 层分支。老师建议: 不要超过 3 层 （可读性不好）</li><li>NestedIf.java</li><li>NestedIfExercise01.java 出票系统<h3 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h3></li><li>基本语法<br><img src="https://i.loli.net/2021/05/12/9yRtLxwoelj5CPf.png"></li><li>流程图(注意“穿透”)<br><img src="https://i.loli.net/2021/05/12/zhAm1KFERCDMLT4.png"></li><li>快速入门（Switch01.java）</li><li>细节讨论<br><img src="https://i.loli.net/2021/05/12/w68zmcpSbiM1sRg.png"><h3 id="for循环控制"><a href="#for循环控制" class="headerlink" title="for循环控制"></a>for循环控制</h3></li></ol><ul><li>基本语法<br><img src="https://i.loli.net/2021/05/13/1cXQJlkrDwtdA8q.png"></li></ul><ol><li>for 关键字，表示循环控制 </li><li>for 有四要素: (1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代 </li><li>循环操作 , 这里可以有多条语句，也就是我们要循环执行的代码 </li><li>如果 循环操作(语句) 只有一条语句，可以省略 {}, 建议不要省略</li></ol><ul><li>for流程分析<br><img src="https://i.loli.net/2021/05/13/ntjSfQJ68B7UdxI.png"></li><li>注意事项和细节说明 ForDetail.java </li></ul><ol><li>循环条件是返回一个布尔值的表达式 </li><li>for(;循环判断条件;) 中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略。 </li><li>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代 语句，中间用逗号隔开</li></ol><ul><li>课堂练习</li></ul><ol><li>ForExercise.java</li><li>ForExercise02.java<h3 id="while循环控制"><a href="#while循环控制" class="headerlink" title="while循环控制"></a>while循环控制</h3></li></ol><ul><li>基本语法<br><img src="https://i.loli.net/2021/05/14/xStujalk8BG7zNL.png"></li><li>流程图<br><img src="https://i.loli.net/2021/05/14/egi5ANdwFKQ3vbx.png"></li><li>注意事项，细节说明</li></ul><ol><li>循环条件是返回一个布尔值的表达式 </li><li>while 循环是先判断再执行语句</li></ol><ul><li>课堂练习</li></ul><ol><li>WhileExercise.java</li><li>WhileExercise02.java<h3 id="do-while循环控制"><a href="#do-while循环控制" class="headerlink" title="do..while循环控制"></a>do..while循环控制</h3></li></ol><ul><li>基本语法</li></ul><p>循环变量初始化; </p><p>do{ </p><pre><code>    循环体(语句);     循环变量迭代; </code></pre><p>}while(循环条件)</p><ol><li>do while 是关键字 </li><li>也有循环四要素, 只是位置不一样 </li><li>先执行，再判断，也就是说，一定会至少执行一次 </li><li>最后 有一个 分号 ; </li><li>while 和 do..while 区别举例: 要账</li></ol><ul><li>do…while流程图<br><img src="https://i.loli.net/2021/05/14/2HowcPFM4mJqYei.png"><h3 id="多重控制循环（难点，重点）"><a href="#多重控制循环（难点，重点）" class="headerlink" title="多重控制循环（难点，重点）"></a>多重控制循环（难点，重点）</h3></li></ul><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for ,while ,do…while 均可以作为外层循环和内层循环。 【建议一般使用两层，最多不要超过 3 层, 否则，代码的可读性很差】 </li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为 false 时，才会完全跳出内 层循环，才可结束外层的当次循环，开始下一次的循环。 </li><li>设外层循环次数为 m 次，内层为 n 次，则内层循环体实际上需要执行 m*n 次。</li></ol><ul><li>练习</li></ul><ol><li>MulForExercise01.java</li><li>MulForExercise02.java</li><li>Stars.java 空心金字塔</li><li>Stars02.java 空心金字塔 while</li><li>Stars03.java 空心菱形<h3 id="跳转控制语句-break"><a href="#跳转控制语句-break" class="headerlink" title="跳转控制语句  break"></a>跳转控制语句  break</h3></li></ol><ul><li>break 语句用于终止某个语句块的执行，一般使用在 switch 或者循环[for , while , do-while]中</li><li>break，流程<br><img src="https://i.loli.net/2021/05/16/G98omKTDnJUtYuF.png"></li><li>快速入门<br>Break01.java</li><li>注意事项和细节<br><img src="https://i.loli.net/2021/05/16/CmVgknb43pwQSaY.png"></li><li>课堂练习</li></ul><ol><li>BreakExercise01.java</li><li>BreakExercise02.java<h3 id="跳转控制语句-continue"><a href="#跳转控制语句-continue" class="headerlink" title="跳转控制语句 continue"></a>跳转控制语句 continue</h3></li></ol><ul><li>基本介绍</li></ul><ol><li>continue 语句用于结束本次循环，继续执行下一次循环。 </li><li>continue 语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环 , 这个和前面的标签的 使用的规则一样</li></ol><ul><li>continue 流程示意图<br><img src="https://i.loli.net/2021/05/16/dakSeNKP9cBrWoU.png"></li><li>快速入门</li></ul><ol><li>Continue01.java</li></ol><ul><li>细节案例分析</li></ul><ol><li>ContinueDetail.java<h3 id="跳转控制语句-return"><a href="#跳转控制语句-return" class="headerlink" title="跳转控制语句 return"></a>跳转控制语句 return</h3></li></ol><ul><li>介绍</li></ul><ol><li>return 使用在方法，表示跳出所在的方法，在讲解方法的时候，会详细的介绍，这里我们简单的提一下。注意：如果return 写在 main 方法，退出程序..Return01.java<h3 id="本章作业-3"><a href="#本章作业-3" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>Homework01.java</li><li>Homework02.java</li><li>Homework03.java</li><li>Homework04.java</li><li></li><li>Homework06.java</li><li>Homework07.java</li><li>Homework08.java</li><li>Homework09.java<h2 id="第六章-数组，排序和查找"><a href="#第六章-数组，排序和查找" class="headerlink" title="第六章 数组，排序和查找"></a>第六章 数组，排序和查找</h2><h3 id="为什么需要数组-需求"><a href="#为什么需要数组-需求" class="headerlink" title="为什么需要数组(需求)"></a>为什么需要数组(需求)</h3></li></ol><ul><li>Array01.java</li><li>数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型。 即：数(数据)组(一组)就是一组数据<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3></li><li>Array01.java<h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3></li><li>. <img src="https://i.loli.net/2021/05/17/7proqP9aKvhncHD.png"></li><li></li></ul><ol><li><p>先声明数组 语法:数据类型 数组名[]; 也可以 数据类型[] 数组名; int a[]; 或者 int[] a; </p></li><li><p>创建数组 语法: 数组名=new 数据类型[大小]; a=new int[10]; </p></li><li><p>案例演示【前面修改即可】</p></li></ol><ul><li></li></ul><ol><li> <img src="https://i.loli.net/2021/05/17/NfqGBtRydJ8VLSr.png"><h3 id="数组使用注意事项和细节-ArrayDetail-java"><a href="#数组使用注意事项和细节-ArrayDetail-java" class="headerlink" title="数组使用注意事项和细节 ArrayDetail.java"></a>数组使用注意事项和细节 ArrayDetail.java</h3></li></ol><ul><li>数组是多个相同类型数据的组合，实现对这些数据的统一管理 </li><li> 数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。 </li><li>数组创建后，如果没有赋值，有默认值 int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null </li><li>使用数组的步骤 </li></ul><ol><li>声明数组并开辟空间 </li><li>给数组各个元素赋值 </li><li>使用数组 </li></ol><ul><li>数组的下标是从 0 开始的。 </li><li>数组下标必须在指定范围内使用，否则报：下标越界异常，比如int [] arr=new int[5]; 则有效下标为 0-4 </li><li>数组属引用类型，数组型数据是对象(object)<h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3></li><li>基本数据类型赋值，这个值就是具体的数据，而且相互不影响。 int n1 = 2; int n2 = n1; </li><li> 数组在默认情况下是引用传递，赋的值是地址。 看一个案例，并分析数组赋值的内存图(重点, 难点. )。 //代码 ArrayAssign.java</li><li>值传递与引用传递的区别<br><img src="https://i.loli.net/2021/05/18/f6ZRXuUJeGV1lt5.png"><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3></li><li>编写代码 实现数组拷贝(内容复制) ArrayCopy.java<h3 id="数组添加"><a href="#数组添加" class="headerlink" title="数组添加"></a>数组添加</h3></li><li>要求：实现动态的给数组添加元素效果，实现对数组扩容。ArrayAdd.java </li></ul><ol><li>原始数组使用静态分配 int[] arr = {1,2,3} </li><li> 增加的元素 4，直接放在数组的最后 arr = {1,2,3,4} </li><li>用户可以通过如下方法来决定是否继续添加，添加成功，是否继续？y/n ArrayAdd02.java</li><li>课后练习  ArrayReduce.java<h3 id="排序的介绍"><a href="#排序的介绍" class="headerlink" title="排序的介绍"></a>排序的介绍</h3></li></ol><ul><li>排序是将多个数据，依指定的顺序进行排列的过程。</li><li>内部排序: 指将需要处理的所有数据都加载到内部存储器中进行排序。包括(交换式排序法、选择 式排序法和插入式排序法)</li><li>外部排序法： 数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法和直接合并排序法)。<h3 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h3></li><li>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素 的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。</li><li>冒泡排序法案例： BubbleSort.java 下面我们举一个具体的案例来说明冒泡法。我们将五个无序：24,69,80,57,13 使用冒泡排序法将其排成一个从小到大的有 序数列。 思路-&gt;走代码<h3 id="分析冒泡排序"><a href="#分析冒泡排序" class="headerlink" title="分析冒泡排序"></a>分析冒泡排序</h3></li><li><img src="https://i.loli.net/2021/05/20/826phjHMDuliBSG.png"><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3></li><li>在 java 中，我们常用的查找有两种: </li></ul><ol><li>顺序查找 SeqSearch.java </li><li>二分查找【二分法，放在算法学】</li></ol><ul><li>案例演示： </li></ul><ol><li>SeqSearch.java  有一个数列：白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王猜数游戏：从键盘中任意输入一个名称，判断数列中是否 包含此名称【顺序查找】 要求: 如果找到了，就提示找到，并给出下标值。</li><li>SeqSearch01.java   请对一个有序数组进行二分查找 {1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标， 如果没有就提示”没有这个数”。<h3 id="二维数组使用"><a href="#二维数组使用" class="headerlink" title="二维数组使用"></a>二维数组使用</h3></li></ol><ul><li>快速入门</li></ul><ol><li>TwoDimensionalArray01.java</li></ol><ul><li>动态初始化</li></ul><ol><li>TwoDimensionalArray02.java</li><li> 语法: 类型【】【】 数组名=new 类型【大小】【大小】 </li><li> 比如: int a【】【】=new int【2】【3】</li><li>使用演示 </li><li>二维数组在内存的存在形式(!!画图)<br><img src="https://i.loli.net/2021/05/21/Tw3vzMJYVq9ER1B.png"></li></ol><ul><li>第二种使用方式<br>先声明：类型 数组名【】【】; TwoDimensionalArray02.java 再定义(开辟空间) 数组名 = new 类型【大小】【大小】赋值(有默认值，比如 int 类型的就是 0)</li><li>第三种使用方式</li></ul><ol><li>列数不确定</li></ol><ul><li>第四种使用方式</li></ul><ol><li>静态使用</li></ol><ul><li>解读</li></ul><ol><li>定义了一个二维数组 arr</li><li>arr 有三个元素(每个元素都是一维数组) </li><li>第一个一维数组有 3 个元素 , 第二个一维数组有 3 个元素, 第三个一维数组有 1 个元素</li><li>课堂练习<br>TwoDimensionalArray05.java<h3 id="二维数组使用细节"><a href="#二维数组使用细节" class="headerlink" title="二维数组使用细节"></a>二维数组使用细节</h3></li><li>一维数组的声明方式有: int【】 x 或者 int x【】 </li><li>二维数组的声明方式有: int【】【】 y 或者 int【】 y【】 或者 int y【】【】 </li><li>二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同。<h3 id="本章作业-4"><a href="#本章作业-4" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>Homework01.java</li><li>Homework02.java</li><li>Homework03.java</li><li>Homework04.java</li><li>Homework05.java</li><li>Homework06.java</li><li>Homework07.java<h2 id="第七章-面向对象的编程（基础）"><a href="#第七章-面向对象的编程（基础）" class="headerlink" title="第七章 面向对象的编程（基础）"></a>第七章 面向对象的编程（基础）</h2><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3></li></ol><ul><li>看一个养猫猫问题 张老太养了两只猫猫:一只名字叫小白,今年 3 岁,白色。还有一只叫小花,今年 100 岁,花色。请编写一个程序，当用户 输入小猫的名字时，就显示该猫的名字，年龄，颜色。如果用户输入的小猫名错误，则显示 张老太没有这只猫猫。 </li><li>使用现有技术解决 Object01.java </li></ul><ol><li>单独的定义变量解决 </li><li>使用数组解决 </li></ol><ul><li>现有技术解决的缺点分析 不利于数据的管理 效率低===》 引出我们的新知识点 类与对象 哲学, 道家思想 java 设计者 引入 类与对象(OOP) ，根本原因就是现有的技术，不能完美的解决新的新的需求</li><li>一个程序就是一个世界，有很多事物(对象[属性, 行为])</li><li>类与对象示意图<br><img src="https://i.loli.net/2021/05/23/TcXBwCfIY5F4xiS.png"><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3></li><li>Object01.java<h3 id="类和对象的区别和联系"><a href="#类和对象的区别和联系" class="headerlink" title="类和对象的区别和联系"></a>类和对象的区别和联系</h3></li><li>通过上面的案例和讲解我们可以看出: </li></ul><ol><li>类是抽象的，概念的，代表一类事物,比如人类,猫类.., 即它是数据类型. </li><li>对象是具体的，实际的，代表一个具体事物, 即 是实例. </li><li>类是对象的模板，对象是类的一个个体，对应一个实例<h3 id="对象在内存中的形式（重要）"><a href="#对象在内存中的形式（重要）" class="headerlink" title="对象在内存中的形式（重要）"></a>对象在内存中的形式（重要）</h3><img src="https://i.loli.net/2021/05/23/Ci6N8S2KMgoAa5R.png"><h3 id="属性-成员变量"><a href="#属性-成员变量" class="headerlink" title="属性/成员变量"></a>属性/成员变量</h3></li></ol><ul><li>从概念或叫法上看： 成员变量 = 属性 = field(字段) （即 成员变量是用来表示属性的，授课中，统一叫 属性) 案例演示：Car(name,price,color) Object02.java</li><li>属性是类的一个组成部分，一般是基本数据类型,也可是引用类型(对象，数组)。比如我们前面定义猫类 的 int age 就 是属性 </li><li>注意事项和细节说明 PropertiesDetail.java </li></ul><ol><li>属性的定义语法同变量，示例：访问修饰符 属性类型 属性名; 这里老师简单的介绍访问修饰符： 控制属性的访问范围 有四种访问修饰符 public, proctected, 默认, private ,后面我会详细介绍 </li><li>属性的定义类型可以为任意类型，包含基本类型或引用类型 </li><li>属性如果不赋值，有默认值，规则和数组一致。具体说: int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000， boolean false，String null 案例演示：[Person 类]<h3 id="如何创建对象"><a href="#如何创建对象" class="headerlink" title="如何创建对象"></a>如何创建对象</h3></li><li>先声明再创建 Cat cat ; //声明对象 cat cat = new Cat(); //创建 </li><li>直接创建 Cat cat = new Cat();</li></ol><ul><li>如何访问属性<br>基本语法 对象名.属性名;<br>案例演示赋值和输出<br>cat.name ;<br>cat.age;<br>cat.color;</li><li> 类和对象的内存分配机制(重要)<br><img src="https://i.loli.net/2021/05/23/flJuxqVTGjIrDKy.png"><br><img src="https://i.loli.net/2021/05/23/JyHTD6iYEVZ8e9k.png"></li><li>Java 内存的结构分析 </li></ul><ol><li>栈： 一般存放基本数据类型(局部变量) </li><li>堆： 存放对象(Cat cat , 数组等) </li><li>方法区：常量池(常量，比如字符串)， 类加载信息 </li><li>示意图 [Cat (name, age, price)] </li></ol><ul><li>Java 创建对象的流程简单分析 Person p = new Person(); </li></ul><p>p.name = “jack”; </p><p>p.age = 10 </p><ol><li>先加载 Person 类信息(属性和方法信息, 只会加载一次) </li><li>在堆中分配空间, 进行默认初始化(看规则) </li><li>把地址赋给 p , p 就指向对象</li><li>进行指定初始化， 比如 p.name =”jack” p.age = 10</li><li>练习题<br><img src="https://i.loli.net/2021/05/24/qH1czrfF73YN5Th.png"><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3></li></ol><ul><li>基本介绍</li></ul><ol><li>在某些情况下，我们要需要定义成员方法(简称方法)。比如人类:除了有一些属性外( 年龄，姓名..),我们人类还有一 些行为比如:可以说话、跑步..,通过学习，还可以做算术题。这时就要用成员方法才能完成。现在要求对 Person 类完善。</li></ol><ul><li>成员方法快速入门 Method01.java </li></ul><ol><li>添加 speak 成员方法,输出 “我是一个好人” </li><li>添加 cal01 成员方法,可以计算从 1+..+1000 的结果 </li><li>添加 cal02 成员方法,该方法可以接收一个数 n，计算从 1+..+n 的结果 </li><li>添加 getSum 成员方法,可以计算两个数的和 代码</li></ol><ul><li>方法的调用机制原理<br><img src="https://i.loli.net/2021/05/24/JrBMWaXU5qGfYTm.png"></li><li>成员方法的必要性<br>Method02.java </li></ul><ol><li>看一个需求： 请遍历一个数组 , 输出数组的各个元素值。</li><li>解决思路 1，传统的方法，就是使用单个 for 循环，将数组输出，大家看看问题是什么？</li><li> 解决思路 2: 定义一个类 MyTools ,然后写一个成员方法，调用方法实现,看看效果又如何。 </li></ol><ul><li>成员方法的定义<br><img src="https://i.loli.net/2021/05/24/yMgaZ8BtPHudWXN.png"></li></ul><ol><li>形参列表：表示成员方法输入 cal(int n) ， getSum(int num1, int num2)  </li><li>返回数据类型：表示成员方法输出, void 表示没有返回值 </li><li>方法主体：表示为了实现某一功能代码块 </li><li>return 语句不是必须的。 </li><li>老韩提示: 结合前面的题示意图,<h3 id="方法的注意事项和细节"><a href="#方法的注意事项和细节" class="headerlink" title="方法的注意事项和细节"></a>方法的注意事项和细节</h3></li></ol><ul><li>访问修饰符 (作用是控制 方法使用的范围) 如果不写默认访问，[有四种: public, protected, 默认, private], 具体在后面说 </li><li>返回数据类型 </li></ul><ol><li>一个方法最多有一个返回值 [思考，如何返回多个结果 返回数组 ] </li><li>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象) </li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值; 而且要求返回值类型必须和 return 的 值类型一致或兼容 </li><li>如果方法是 void，则方法体中可以没有 return 语句，或者 只写 return ; </li></ol><ul><li>方法名 遵循驼峰命名法，最好见名知义，表达出该功能的意思即可, 比如 得到两个数的和 getSum, 开发中按照规范<br><img src="https://i.loli.net/2021/05/24/QkNxb8g9mASXCUP.png"><br><img src="https://i.loli.net/2021/05/24/LcVSpUfQ5HOWqXG.png"></li><li>课堂练习</li></ul><ol><li>MethodExercise01.java</li><li>MethodExercise02.java<h3 id="成员方法的传参机制（非常重要）"><a href="#成员方法的传参机制（非常重要）" class="headerlink" title="成员方法的传参机制（非常重要）"></a>成员方法的传参机制（非常重要）</h3></li></ol><ul><li>基本数据类型的传参机制<br><img src="https://i.loli.net/2021/05/24/9gAnqEuLmZclxPJ.png"></li><li>引用数据类型的传参机制<br><img src="https://i.loli.net/2021/05/24/ma7TfUgOJD6ucXy.png"><br><img src="https://i.loli.net/2021/05/24/XcQTsi8WYyB2g6a.png"></li><li>课堂练习</li></ul><ol><li>MethodExercise03.java<h3 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h3></li></ol><ul><li>基本介绍</li></ul><ol><li>简单的说: 递归就是方法自己调用自己,每次调用时传入不同的变量.递归有助于编程者解决复杂问题,同时可以让代码变 得简洁</li></ol><ul><li>递归机制<br>列举两个小案例,来帮助大家理解递归调用机制 </li></ul><ol><li>打印问题 </li><li>阶乘问题</li><li>Recursion01.java<br><img src="https://i.loli.net/2021/05/25/9Ck7oLODMpey5Qd.png"><br><img src="https://i.loli.net/2021/05/25/doRnQtOamhpu62U.png"></li></ol><ul><li>递归的重要规则<br><img src="https://i.loli.net/2021/05/25/H5uwbSZkCWxvf93.png"></li><li>递归练习</li></ul><ol><li>RecursionExercise01.java</li></ol><ul><li>递归调用应用实例-迷宫问题</li></ul><ol><li>MiGong.java</li></ol><ul><li>递归调用应用实例-迷宫问题</li></ul><ol><li>HanoiTower.java</li></ol><h3 id="方法重载（OverLoad）"><a href="#方法重载（OverLoad）" class="headerlink" title="方法重载（OverLoad）"></a>方法重载（OverLoad）</h3><ul><li>基本介绍 </li></ul><ol><li>java 中允许同一个类中，多个同名方法的存在，但要求 形参列表不一致！ 比如：System.out.println(); out 是 PrintStream 类型 OverLoad01.java </li></ol><ul><li>重载的好处 </li></ul><ol><li>减轻了起名的麻烦 </li><li>减轻了记名的麻烦 </li></ol><ul><li>快速入门案例 </li></ul><ol><li>OverLoad01.java</li></ol><ul><li>注意事项和细节</li></ul><ol><li>方法名，必须相同</li><li>形参列表，必须不同（个数，顺序，类型，参数名无要求（不构成方法重载））</li><li>返回类型，无要求（不构成方法重载）</li></ol><ul><li>课堂练习 OverLoadExercise.java<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3></li><li>java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。 就可以通过可变参数实现</li><li>基本语法</li></ul><ol><li>访问修饰符 返回类型 方法名(数据类型… 形参名) { }</li></ol><ul><li>快速入门</li></ul><ol><li>VarParameter01.java</li></ol><ul><li>注意事项和细节<br><img src="https://i.loli.net/2021/05/27/yM1KCSn7OwfhuXV.png"> </li><li>课堂练习</li></ul><ol><li>VarParameterExercise.java<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3></li></ol><ul><li>基本使用<br><img src="https://i.loli.net/2021/05/27/7RSHXVZ4jObowBL.png"></li><li>注意事项和使用细节<br><img src="https://i.loli.net/2021/05/27/lLITY6kegv5VHWs.png"><h3 id="构造方法-构造器"><a href="#构造方法-构造器" class="headerlink" title="构造方法/构造器"></a>构造方法/构造器</h3></li><li>需求<br>我们来看一个需求：前面我们在创建人类的对象时，是先把一个对象创建好后，再给他的年龄和姓名属性赋值，如 果现在我要求，在创建人类的对象时，就直接指定这个对象的年龄和姓名，该怎么做? 这时就可以使用构造器。</li><li>基本介绍：<br>构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对新对象的初始化。它有几个特点： </li></ul><ol><li> 方法名和类名相同 </li><li> 没有返回值 </li><li> 在创建对象时，系统会自动的调用该类的构造器完成对象的初始化</li></ol><ul><li>基本语法</li></ul><ol><li>构造器的修饰符可以默认， 也可以是 public protected private </li><li>构造器没有返回值 </li><li>方法名 和类名字必须一样 </li><li>参数列表 和 成员方法一样的规则 </li><li>构造器的调用, 由系统完成</li></ol><ul><li>快速入门</li></ul><ol><li>Constructor01.java</li></ol><ul><li>注意事项和细节<br><img src="https://i.loli.net/2021/05/27/KU23MlJZ4HTcOS6.png"></li><li>课堂练习</li></ul><ol><li>ConstructorExercise.java<h3 id="对象创建流程的分析"><a href="#对象创建流程的分析" class="headerlink" title="对象创建流程的分析"></a>对象创建流程的分析</h3><img src="https://i.loli.net/2021/05/27/u4jVCr9beEpvd2Q.png"><br><img src="https://i.loli.net/2021/05/27/EKwodrJAkTgy5VU.png"><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3></li></ol><ul><li>引出</li></ul><ol><li><img src="https://i.loli.net/2021/05/27/meok3FJPg7fGrvh.png"></li><li>This01.java</li></ol><ul><li>深入理解</li></ul><ol><li><img src="https://i.loli.net/2021/05/27/KErL659AuDHRcOG.png"></li><li>This01.java </li></ol><ul><li>this注意事项和使用细节</li></ul><ol><li>this 关键字可以用来访问本类的属性、方法、构造器 </li><li>this 用于区分当前类的属性和局部变量 </li><li>访问成员方法的语法：this.方法名(参数列表);</li><li>访问构造器语法：this(参数列表); 注意只能在构造器中使用(即只能在构造器中访问另外一个构造器, 必须放在第一 条语句) </li><li>this 不能在类定义的外部使用，只能在类定义的方法中使用。</li><li>ThisDetail.java</li></ol><ul><li>课堂案例</li></ul><ol><li>TestPerson.java<h3 id="本章作业-5"><a href="#本章作业-5" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>Homework01.java</li><li>Homework02.java</li><li>Homework03.java</li><li>Homework04.java</li><li>Homework05.java</li><li>Homework06.java</li><li>Homework07.java</li><li>Homework08.java</li><li>Homework09.java</li><li>Homework10.java</li><li>Homework11.java</li><li>Homework12.java</li><li>Homework13.java</li><li>Homework14.java</li><li>MoraGame.java<h2 id="第八章-面向对象（中级）"><a href="#第八章-面向对象（中级）" class="headerlink" title="第八章 面向对象（中级）"></a>第八章 面向对象（中级）</h2><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3></li><li>IDEA 全称 IntelliJ IDEA </li><li>在业界被公认为最好的 Java 开发工具 </li><li>IDEA 是 JetBrains 公司的产品，总部位于捷克的首都布拉格 </li><li>除了支持 Java 开发，还支持 HTML，CSS，PHP，MySQL，Python 等<h3 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h3></li><li>Eclipse 是一个开放源代码的、基于 Java 的可扩展开发平台。 </li><li>最初是由 IBM 公司耗资 3000 万美金开发的下一代 IDE 开发环境 </li><li> 2001 年 11 月贡献给开源社区 </li><li>Eclipse 是目前最优秀的 Java 开发 IDE 之一<h3 id="IDEA-使用技巧和经验（看另一篇博闻）"><a href="#IDEA-使用技巧和经验（看另一篇博闻）" class="headerlink" title="IDEA 使用技巧和经验（看另一篇博闻）"></a>IDEA 使用技巧和经验（看另一篇博闻）</h3></li></ol><ul><li>课堂练习</li></ul><ol><li>使用 IDEA 开发一个 java 项目 testpro01，创建一个类 MyTools, 编写一个方法，可以完成对 int 数组冒泡排序的功能 学员练习 ， 使用快捷键的开发项目</li><li><img src="https://i.loli.net/2021/05/31/Dyp5P8HEOjTiqhL.png"></li><li>练习老师讲过的快捷键，这是作为一个程序员的必备技能<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3></li></ol><ul><li><img src="https://i.loli.net/2021/05/31/E89vrFp1WGazkiS.png"></li><li>快速入门</li></ul><ol><li>com.xiaoming</li><li>com.xiaoqiang</li><li>use</li></ol><ul><li>包的命名<br><img src="https://i.loli.net/2021/05/31/jIbef4Xi2sdS3pE.png"></li><li>常用的包</li></ul><ol><li>java.lang.* //lang 包是基本包，默认引入，不需要再引入. </li><li>java.util.* //util 包，系统提供的工具包, 工具类，使用 Scanner </li><li>java.net.* //网络包，网络开发 </li><li>java.awt.* //是做 java 的界面开发，GUI</li></ol><ul><li>如何引入包<br><img src="https://i.loli.net/2021/05/31/gX53tLqTh8Ax4M1.png"></li></ul><ol start="2"><li>com.hspedu.pkg Import01.java</li></ol><ul><li>注意事项和细节</li></ul><ol><li><img src="https://i.loli.net/2021/05/31/oxmlAMeUqvZa91W.png"><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3></li></ol><ul><li>基本介绍==<br>java 提供四种访问控制修饰符号，用于控制方法和属性(成员变量)的访问权限（范围）: </li></ul><ol><li>公开级别:用 public 修饰,对外公开 </li><li>受保护级别:用 protected 修饰,对子类和同一个包中的类公开 </li><li>默认级别:没有修饰符号,向同一个包的类公开. </li><li>私有级别:用 private 修饰,只有类本身可以访问,不对外公开</li></ol><ul><li>各种访问修饰符的访问范围<br><img src="https://i.loli.net/2021/05/31/Lt94T1O8HMVxXzZ.png"></li><li>使用注意事项<br><img src="https://i.loli.net/2021/05/31/LelGNgksICXB53J.png"><h3 id="三大特征（重要）"><a href="#三大特征（重要）" class="headerlink" title="三大特征（重要）"></a>三大特征（重要）</h3><h3 id="封装"><a href="#封装" class="headerlink" title="*封装"></a>*封装</h3></li><li>封装介绍</li></ul><ol><li><img src="https://i.loli.net/2021/06/01/MZUgHxSfenD1EkK.png"></li></ol><ul><li>封装的理解和好处</li></ul><ol><li><img src="https://i.loli.net/2021/06/01/9mBAFJLCZjSst1r.png"></li></ol><ul><li>封装实现的步骤</li></ul><ol><li><img src="https://i.loli.net/2021/06/01/6gTWmIV5kw49bGn.png"></li></ol><ul><li>快速入门</li></ul><ol><li><img src="https://i.loli.net/2021/06/01/b3PYqFHfVouWRyZ.png"></li><li>可以将构造器和setXxx结合</li></ol><ul><li>课堂练习</li></ul><ol><li>com.javacode===AccountTest.java <h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3></li></ol><ul><li>为什么需要继承<br><img src="https://i.loli.net/2021/06/01/rnhOCD7bRsc61GW.png"></li><li>继承的基本介绍和示意图<br><img src="https://i.loli.net/2021/06/01/x4V3YCuWt9kNcms.png"></li><li>继承的基本语法<br><img src="https://i.loli.net/2021/06/01/wfL2mEYz4gT19NO.png"></li><li>快速入门</li></ul><ol><li>Extend01.java 改进</li></ol><ul><li>继承给编程带来了便利</li></ul><ol><li>代码的复用性提高了 </li><li> 代码的扩展性和维护性提高了</li></ol><ul><li>继承的深入讨论、细节问题</li></ul><ol><li>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问, 但是私有属性和方法不能在子类直接访 问，要通过父类提供公共的方法去访问 </li><li>子类必须调用父类的构造器， 完成父类的初始化 </li><li>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无 参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过(怎么理解。) [举例说明]</li><li>如果希望指定去调用父类的某个构造器，则显式的调用一下 : super(参数列表) </li><li>super 在使用时，必须放在构造器第一行(super 只能在构造器中使用) </li><li>super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器 </li><li>java 所有类都是 Object 类的子类, Object 是所有类的基类. </li><li>父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类(顶级父类) </li><li>子类最多只能继承一个父类(指直接继承)，即 java 中是单继承机制。 思考：如何让 A 类继承 B 类和 C 类？ 【A 继承 B， B 继承 C】 </li><li>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</li></ol><ul><li>继承的本质</li></ul><ol><li><img src="https://i.loli.net/2021/06/01/eAuqDUskx4HQhbI.png"></li><li>ExtendsTheory.java</li></ol><ul><li>课堂练习</li></ul><ol><li>ExtendsExercise01.java<br><img src="https://i.loli.net/2021/06/01/3iCGvShRPQOawI2.png"></li><li>ExtendsExercise02.java</li><li>ExtendsExercise03.java<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3></li></ol><ul><li>基本介绍 </li></ul><p>super 代表父类的引用，用于访问父类的属性、方法、构造器</p><ul><li>基本语法</li></ul><ol><li><img src="https://i.loli.net/2021/06/02/wuySA7Mkj8Bvhd6.png"></li><li>com.hspedu.super_</li></ol><ul><li>super给编程带来的好处、细节</li></ul><ol><li><img src="https://i.loli.net/2021/06/02/bgRA69MJUTajvuV.png"></li><li>com.hspedu.super_</li></ol><ul><li>super和this的比较<br><img src="https://i.loli.net/2021/06/02/PyYKANfE4WUTVDa.png"><h3 id="方法重写-覆盖（override）"><a href="#方法重写-覆盖（override）" class="headerlink" title="方法重写/覆盖（override）"></a>方法重写/覆盖（override）</h3></li><li>基本介绍<br><img src="https://i.loli.net/2021/06/02/Yia97IZX6StpOjq.png"></li><li>快速入门</li></ul><ol><li>com.hspedu.override_</li></ol><ul><li>注意事项和使用细节<br><img src="https://i.loli.net/2021/06/02/mFez3jUn7AtwWkG.png"></li><li>课堂练习</li></ul><ol><li><img src="https://i.loli.net/2021/06/02/NmoWktdDxevYHZ6.png"></li><li>OverrideExercise.java<h3 id="多态（重点，难点）"><a href="#多态（重点，难点）" class="headerlink" title="多态（重点，难点）"></a>多态（重点，难点）</h3></li></ol><ul><li>先看一个问题 </li></ul><ol><li>使用传统的方法来解决（private 属性） </li><li>传统的方法带来的问题是什么? 如何解决? 问题是： 代码的复用性不高，而且不利于代码维护<br>解决方案： 引出我们要讲解的多态</li><li>com.hspedu.poly_</li></ol><ul><li>多[多种]态[状态]基本介绍 </li></ul><ol><li>方法或对象具有多种形态。是面向对象的第三大特征，多态是建立在封装和继承基础之上的</li></ol><ul><li>多态的具体体现 </li></ul><ol><li>方法的多态 PloyMethod.java 重写和重载就体现多态 [案例说明：] package com.hspedu.poly_;</li><li>对象的多态 (核心，困难，重点)<br><img src="https://i.loli.net/2021/06/02/Dkcql6sVEQxSeyd.png"></li></ol><ul><li>快速入门</li></ul><ol><li>使用多态的机制来解决主人喂食物的问题，走代码。 Poly01.java</li></ol><ul><li>多态注意事项和细节讨论 com.hspedu.poly_.detail_ 包 : PolyDetail.java </li></ul><ol><li> 多态的前提是：两个对象(类)存在继承关系 </li><li>多态的向上转型</li></ol><p><img src="https://i.loli.net/2021/06/02/8I4fzGCjysgeKQc.png"> </p><ol start="3"><li>多态向下转型</li></ol><p><img src="https://i.loli.net/2021/06/02/vbBrAqWuU9l324k.png"><br>4.  属性没有重写之说！属性的值看编译类型 PolyDetail02.java<br>5. instanceOf 比较操作符，用于判断对象的运行类型是否为 XX 类型或 XX 类型的子类型【举例说明】PolyDetail03.java</p><ul><li>课堂练习</li></ul><ol><li><img src="https://i.loli.net/2021/06/02/LWitYIN71SJOGHm.png"></li><li><img src="https://i.loli.net/2021/06/02/DdAhuQ2WM96VZnq.png"></li></ol><ul><li>java动态绑定机制（非常非常重要*************************）<br><img src="https://i.loli.net/2021/06/03/h2FgWNzRjMsGtli.png"></li><li>多态的应用</li></ul><ol><li>多态数组 com.hspedu.poly_.polyarr_ 包 PloyArray.java 数组的定义类型为父类类型，里面保存的实际元素类型为子类类型 </li><li>应用实例:现有一个继承结构如下：要求创建 1 个 Person 对象、2 个 Student 对象和 2 个 Teacher 对象, 统一放在数组 中，并调用每个对象<br>say 方法. </li><li>应用实例升级：如何调用子类特有的方法，比如 Teacher 有一个 teach , Student 有一个 study 怎么调用？ 代码:</li><li>多态参数</li></ol><p>package com.hspedu.poly_.polyparameter_;</p><h3 id="Object详解"><a href="#Object详解" class="headerlink" title="Object详解"></a>Object详解</h3><ul><li>equals方法<br><img src="https://i.loli.net/2021/06/03/sbLXcxQ9yU8OrtG.png"></li><li>如何重写equals方法</li></ul><ol><li>EqualsExercise01</li><li>EqualsExercise02（f,t,f,t,f,）</li><li>EqualsExercise03(t,t,t,f,t,编译报错)</li></ol><ul><li>hashCode方法</li></ul><ol><li>提高具有哈希结构的容器的效率！ </li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的！ </li><li>两个引用，如果指向的是不同对象，则哈希值是不一样的 </li><li>哈希值主要根据地址号来的！， 不能完全将哈希值等价于地址。</li><li>案例演示[HashCode_.java]: obj.hashCode() [测试：A obj1 = new A(); A obj2 = new A(); A obj3 = obj1] </li><li>后面在集合，中 hashCode 如果需要的话，也会重写, 在讲解集合时，老韩在说如何重写 hashCode() 代码</li></ol><ul><li>toString 方法</li></ul><ol><li>基本介绍 默认返回：全类名+@+哈希值的十六进制，【查看 Object 的 toString 方法】 子类往往重写 toString 方法，用于返回对象的属性信息 </li><li>重写 toString 方法，打印对象或拼接对象时，都会自动调用该对象的 toString 形式案例演示：Monster [name, job, sal] 案例: ToString_.java </li><li>当直接输出一个对象时，toString 方法会被默认的调用, 比如 System.out.println(monster)； 就会默认调用 monster.toString()</li></ol><ul><li>Finalize方法</li></ul><ol><li>当对象被回收时，系统自动调用该对象的 finalize 方法。子类可以重写该方法，做一些释放资源的操作【演示】 </li><li>什么时候被回收：当某个对象没有任何引用时，则 jvm 就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来 销毁该对象，在销毁该对象前，会先调用 finalize 方法。 </li><li>垃圾回收机制的调用，是由系统来决定(即有自己的 GC 算法), 也可以通过 System.gc() 主动触发垃圾回收机制，测 试：Car [name] 老韩提示： 我们在实际开发中，几乎不会运用 finalize , 所以更多就是为了应付面试<h3 id="断点调试（debug）"><a href="#断点调试（debug）" class="headerlink" title="断点调试（debug）"></a>断点调试（debug）</h3></li></ol><ul><li>一个需求<br><img src="https://i.loli.net/2021/06/04/gBPr37vhM1zLdU4.png"></li><li>断点调试介绍<br><img src="https://i.loli.net/2021/06/04/1v56rGiuNBzYdap.png"></li><li>快捷键<br><img src="https://i.loli.net/2021/06/04/6kJl791jMIHVsEQ.png"></li><li>断点应用案例</li></ul><ol><li>案例 1 com.hspedu.debug_ 包 Debug01.java 看一下变量的变化情况等</li><li>案例 2 看一下数组越界的异常 Debug02.java</li><li>案例 3 演示如何追源码，看看 java 设计者是怎么实现的。(提高编程思想)。 小技巧：将光标放在某个变量上，可以看到最新的数据。 Debug03.java </li><li>案例 4 演示如何直接执行到下一个断点 F9 resume。 老韩小技巧: 断点可以在 debug 过程中，动态的下断点<h3 id="项目-零钱通"><a href="#项目-零钱通" class="headerlink" title="项目-零钱通"></a>项目-零钱通</h3></li><li>SmallChangeSys.java<h3 id="本章作业-6"><a href="#本章作业-6" class="headerlink" title="本章作业"></a>本章作业</h3></li></ol><ul><li>Homework01</li><li>Homework02</li><li>Homework03</li><li>Homework04</li><li>Homework05</li><li>Homework06</li><li>Homework07</li><li>Homework08</li><li>Homework09</li><li>Homework10</li><li>Homework11</li><li>Homework12</li><li>Homework13</li><li>Homework14</li><li>Homework15</li><li>Homework16<h2 id="第九章-项目-房屋出租（代码实现在项目那篇博文）"><a href="#第九章-项目-房屋出租（代码实现在项目那篇博文）" class="headerlink" title="第九章 项目-房屋出租（代码实现在项目那篇博文）"></a>第九章 项目-房屋出租（代码实现在项目那篇博文）</h2><h3 id="房屋出租系统-需求"><a href="#房屋出租系统-需求" class="headerlink" title="房屋出租系统-需求"></a>房屋出租系统-需求</h3></li><li>项目需求说明</li></ul><ol><li>实现基于文本界面的《房屋出租软件》。 </li><li>能够实现对房屋信息的添加、修改和删除（用数组实现），并能够打印房屋明细表<h3 id="房屋出租系统-界面（详情见代码实现）"><a href="#房屋出租系统-界面（详情见代码实现）" class="headerlink" title="房屋出租系统-界面（详情见代码实现）"></a>房屋出租系统-界面（详情见代码实现）</h3></li></ol><ul><li><p>项目界面 - 主菜单</p></li><li><p>项目界面- 新增房源</p></li><li><p>项目界面- 查找房源</p></li><li><p>项目界面- 删除房源</p></li><li><p>项目界面- 修改房源</p></li><li><p>项目界面- 房屋列表</p></li><li><p>项目界面- 退出系统</p></li></ul><h3 id="房屋出租系统-设计"><a href="#房屋出租系统-设计" class="headerlink" title="房屋出租系统-设计(!!)"></a>房屋出租系统-设计(!!)</h3><p><img src="https://i.loli.net/2021/06/09/ustH2VDpKvCzPWY.png"></p><h3 id="房屋出租系统-实现"><a href="#房屋出租系统-实现" class="headerlink" title="房屋出租系统-实现"></a>房屋出租系统-实现</h3><ul><li>准备工具类 Utility，提高开发效率====在实际开发中，公司都会提供相应的工具类和开发库，可以提高开发效率，程序员也需要能够看懂别人写的代码， 并能够正确的调用。</li></ul><ol><li>了解 Utility 类的使用</li><li>测试 Utility 类</li></ol><ul><li>项目功能实现-完成 House 类</li></ul><ol><li>编号 房主 电话 地址 月租 状态(未出租/已出租</li></ol><ul><li>项目功能实现-显示主菜单和完成退出软件功能</li></ul><ol><li>老师说明：实现功能的三部曲 [明确完成功能-&gt;思路分析-&gt;代码实现] </li><li>功能说明: 用户打开软件， 可以看到主菜单，可以退出软件. </li><li>思路分析: 在 HouseView.java 中，编写一个方法 mainMenu,显示菜单. </li><li>代码实现：</li></ol><ul><li>项目功能实现-完成显示房屋列表的功能<br><img src="https://i.loli.net/2021/06/09/Wei2DwZUJRvcsM1.png"></li><li>项目功能实现-添加房屋信息的功能<br><img src="https://i.loli.net/2021/06/09/pQhCbeFan5zsjRU.png"></li><li>项目功能实现-完成删除房屋信息的功能<br><img src="https://i.loli.net/2021/06/09/2ZhroO61taFR3Np.png"></li><li>项目功能实现-完善退出确认功能（课堂作业）<br><img src="https://i.loli.net/2021/06/09/McGailE76obdNSA.png"></li><li>项目功能实现-完成根据 id 查找房屋信息的功能（课后作业）<br><img src></li><li>项目功能实现-完成修改房屋信息的功能（课后作业）<br><img src="https://i.loli.net/2021/06/09/SNY1agJADjVrQ27.png"><h1 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h1><h2 id="第十章-面向对象的编程（高级）"><a href="#第十章-面向对象的编程（高级）" class="headerlink" title="第十章 面向对象的编程（高级）"></a>第十章 面向对象的编程（高级）</h2><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3></li><li>提出问题</li></ul><ol><li>提出问题的主要目的就是让大家思考解决之道，从而引出我要讲的知识点. 说：有一群小孩在玩堆雪人,不时有新的小孩加入,请问如何知道现在共有多少人在玩?，编写程序解决。</li></ol><ul><li>传统方法解决<br><img src="https://i.loli.net/2021/06/09/O5dymVKHn3DB7Cq.png"></li><li>快速入门</li></ul><ol><li>如果,设计一个 int count 表示总人数,我们在创建一个小孩时，就把 count 加 1,并且 count 是所有对象共享的 就 ok 了!，我们使用类变量来解决 ChildGame.java 改进</li></ol><ul><li>类变量内存布局<br><img src="https://i.loli.net/2021/06/09/jQbZCPmgBXcJl72.png"></li><li>什么事类变量</li></ul><ol><li><img src="https://i.loli.net/2021/06/09/5qZ9RXpBSLWVAPl.png"></li></ol><ul><li>如何定义变量</li></ul><ol><li><img src="https://i.loli.net/2021/06/09/kFyhQRVYnlji28w.png"></li></ol><ul><li>如何访问对象<br><img src="https://i.loli.net/2021/06/09/5d3QOYTGVoIg2PJ.png"></li><li>类变量使用注意事项和细节讨论 StaticDetail.java</li></ul><ol><li><img src="https://i.loli.net/2021/06/09/GSzRgyF62Z84dqI.png"><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3></li></ol><ul><li>类方法基本介绍<br><img src="https://i.loli.net/2021/06/09/dwUCXFlBQKzNRLp.png"></li><li>类方法的调用<br><img src="https://i.loli.net/2021/06/09/w3VEmNKSFhuDUG1.png"></li><li>类方法应用案例 StaticMethod.java</li><li>类方法经典的使用场景<br><img src="https://i.loli.net/2021/06/09/2t5alHibPWQ3mR8.png"></li><li>类方法使用注意事项和细节讨论 StaticMethodDetail.java<br><img src="https://i.loli.net/2021/06/09/3bTsXuKe8BFqQUo.png"></li><li>课堂练习<br>StaticExercise01.java（题一，题二，题三）<h3 id="理解main方法"><a href="#理解main方法" class="headerlink" title="理解main方法"></a>理解main方法</h3></li><li>深入理解<br><img src="https://i.loli.net/2021/06/10/Xi5Y2peUuPCN17K.png"></li><li>特别提示： </li></ul><ol><li>在 main()方法中，我们可以直接调用 main 方法所在类的静态方法或静态属性。 </li><li>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静 态成员，[举例说明] Main01.java </li><li>代码 package com.hspedu.main_;</li></ol><ul><li>案例演示<br><img src="https://i.loli.net/2021/06/10/JhKvNQfsUXx87aB.png"><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3></li><li>基本介绍<br><img src="https://i.loli.net/2021/06/11/T4ehmuHfWPRBNoE.png"></li><li>基本语法<br><img src="https://i.loli.net/2021/06/11/wE5zNAlfOUpkC78.png"></li><li>代码块的好处和案例演示<br><img src="https://i.loli.net/2021/06/11/pq2K5E9ZuMBzPLA.png"></li><li>代码块使用注意事项和细节讨论 CodeBlockDetail01.java<br><img src="https://i.loli.net/2021/06/11/yLUlEGNt6qrw9ns.png"><br><img src="https://i.loli.net/2021/06/11/9DgsNmbVW5cCfAS.png"><br><img src="https://i.loli.net/2021/06/11/JCOPdfq5KRbDeZg.png"><br><img src="https://i.loli.net/2021/06/11/bZjw9hKB8gTiJV3.png"></li><li>课堂练习题 CodeBlockExercise01.java<h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3></li><li>什么是设计模式<br><img src="https://i.loli.net/2021/06/12/rXutePoQ5f39Sas.png"></li><li>什么是单例模式<br><img src="https://i.loli.net/2021/06/12/rifPByX9jnMKzpm.png"></li><li>单例模式应用实例<br><img src="https://i.loli.net/2021/06/12/Te4Ph8VDa1xvXmn.png"></li><li>饿汉式 VS 懒汉式<br><img src="https://i.loli.net/2021/06/12/87Yt1KswzUTIdhy.png"><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3></li><li>基本介绍<br><img src="https://i.loli.net/2021/06/12/e2Nj6CcZ8TMvIpO.png"></li><li>final 使用注意事项和细节讨论<br><img src="https://i.loli.net/2021/06/12/UiMr8WPOwoQEs59.png"><br><img src="https://i.loli.net/2021/06/12/T1EuHor4fxlyi9R.png"></li><li>应用实例（练习）</li></ul><ol><li>FinalExercise.java<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3></li></ol><ul><li>先看一个问题 Abstract01.java<br><img src="https://i.loli.net/2021/06/13/FgpxlZHP5vi4LD1.png"></li><li>解决之道-抽象类快速入门<br><img src="https://i.loli.net/2021/06/13/KGotyMapWSTwOhz.png"></li><li>抽象类的介绍<br><img src="https://i.loli.net/2021/06/13/uRQpg2UoS5nLYMq.png"></li><li>抽象类使用的注意事项和细节讨论 AbstractDetail01.java<br><img src="https://i.loli.net/2021/06/13/kyI2oSZGAwdOMnx.png"><br><img src="https://i.loli.net/2021/06/13/7ekaMHF6OnN8VgS.png"></li></ul><ol start="8"><li>抽象方法不能用private，final，和static来修饰，因为这些关键字和重写是相违背的</li></ol><ul><li>课堂练习题 AbstractExercise01.java 5min 练习<br><img src="https://i.loli.net/2021/06/13/f1rMg32uLUABmCy.png"><h3 id="抽象类最佳实践-模板设计模式"><a href="#抽象类最佳实践-模板设计模式" class="headerlink" title="抽象类最佳实践-模板设计模式"></a>抽象类最佳实践-模板设计模式</h3></li><li><img src="https://i.loli.net/2021/06/13/XlribWK6EC1U8cQ.png"><br><img src="https://i.loli.net/2021/06/13/5ZeKA1HjEo7BhLI.png"><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3></li><li>为什么有接口<br><img src="https://i.loli.net/2021/06/15/ougwPQqGC5RFtxn.png"></li><li>快速入门（模拟上一个）</li></ul><ol><li>package com.hspedu.interface_;</li></ol><ul><li>基本介绍<br><img src="https://i.loli.net/2021/06/15/XJQ1aoPuU4v5RdZ.png"></li><li>深入探讨<br><img src="https://i.loli.net/2021/06/15/ZbauGB2AmFgQKMh.png"><br><img src="https://i.loli.net/2021/06/15/VsZP4LUjIcObf6t.png"></li><li>注意事项和细节<br><img src="https://i.loli.net/2021/06/15/N9H7lsCtnZDzLpS.png"><br><img src="https://i.loli.net/2021/06/15/3NJXK8lzVroY2me.png"></li><li>课堂练习<br><img src="https://i.loli.net/2021/06/15/ZgVOmUorns8RhEC.png"></li><li>实现接口 vs 继承类<br><img src="https://i.loli.net/2021/06/15/L2ufzp75RMTgCOa.png"></li></ul><ol><li>package com.hspedu.interface_; public class ExtendsVsInterface<br><img src="https://i.loli.net/2021/06/15/Pv6a9KuOZcdowiD.png"></li></ol><ul><li>接口的多态特性<br><img src="https://i.loli.net/2021/07/22/PODJSVjpAa3rvUQ.png"></li><li>课堂练习 InterfaceExercise02.java<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3></li></ul><ol><li>如果定义类在局部位置(方法中/代码块) :(1) 局部内部类 (2) 匿名内部类（！！！） </li><li>定义在成员位置 (1) 成员内部类 (2) 静态内部类</li></ol><ul><li>基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/06/adfd1d5cb966e7f4.png"></li><li>基本语法<br><img src="https://ftp.bmp.ovh/imgs/2021/06/8ce04c4692d056bb.png"></li><li>内部类的分类<br><img src="https://ftp.bmp.ovh/imgs/2021/06/b4b4ebf588b4edd1.png"></li><li>局部内部类的使用 LocalInnerClass.java<br><img src="https://ftp.bmp.ovh/imgs/2021/06/52b68e5704a80e97.png"></li><li>匿名内部类（！！！！）<br><img src="https://ftp.bmp.ovh/imgs/2021/06/9fe23f6e5948469b.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/181cdc443a5db539.png"></li><li>匿名内部类的最佳实践</li></ul><ol><li>当做实参直接传递，简洁高效。 InnerClassExercise01.java</li></ol><ul><li>匿名内部类练习</li></ul><ol><li>InnerClassExercise02</li></ol><ul><li>成员内部类的使用<br><img src="https://ftp.bmp.ovh/imgs/2021/06/da0439f17b0e05f9.png"></li><li>静态内部类的使用<br><img src="https://ftp.bmp.ovh/imgs/2021/06/bacff912037ae1ad.png"><h3 id="本章作业（在十一章后面）"><a href="#本章作业（在十一章后面）" class="headerlink" title="本章作业（在十一章后面）"></a>本章作业（在十一章后面）</h3><h2 id="第十一章-枚举和注解"><a href="#第十一章-枚举和注解" class="headerlink" title="第十一章 枚举和注解"></a>第十一章 枚举和注解</h2><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3></li><li>先看一个需求</li></ul><ol><li>要求创建季节(Season) 对象，请设计并完成。Enumeration01.java</li></ol><ul><li>创建 Season 对象有如下特点 </li></ul><ol><li>季节的值是有限的几个值(spring, summer, autumn, winter) </li><li>只读，不需要修改。 </li></ol><ul><li>解决方案-枚举 </li></ul><ol><li>枚举对应英文(enumeration, 简写 enum) </li><li>枚举是一组常量的集合。 </li><li>可以这里理解：枚举属于一种特殊的类，里面只包含一组有限的特定的对象。 </li></ol><ul><li>枚举的二种实现方式 </li></ul><ol><li>自定义类实现枚举 </li><li>使用 enum 关键字实现枚举 <h3 id="自定义实现枚举"><a href="#自定义实现枚举" class="headerlink" title="自定义实现枚举"></a>自定义实现枚举</h3></li></ol><ul><li>自定义类实现枚举-应用案例<br><img src="https://ftp.bmp.ovh/imgs/2021/06/bee7ede2940cb842.png"></li><li>自定义类实现枚举-小结</li></ul><ol><li>构造器私有化 </li><li>本类内部创建一组对象[四个 春夏秋冬] </li><li>对外暴露对象（通过为对象添加 public final static 修饰符） </li><li>可以提供 get 方法，但是不要提供 set<h3 id="enum-关键字实现枚举-快速入门"><a href="#enum-关键字实现枚举-快速入门" class="headerlink" title="enum 关键字实现枚举-快速入门"></a>enum 关键字实现枚举-快速入门</h3></li></ol><ul><li>说明</li></ul><ol><li>使用 enum 来实现前面的枚举案例，看老师演示，主要体会和自定义类实现枚举不同的地方。Enumeration03.java 代码</li></ol><ul><li>enum 关键字实现枚举注意事项 </li></ul><ol><li>当我们使用 enum 关键字开发一个枚举类时，默认会继承 Enum 类, 而且是一个 final 类[如何证明],老师使用 javap 工 具来演示 </li><li>传统的 public static final Season2 SPRING = new Season2(“春天”, “温暖”); 简化成 SPRING(“春天”, “温暖”)， 这里必 须知道，它调用的是哪个构造器. </li><li>如果使用无参构造器 创建 枚举对象，则实参列表和小括号都可以省略</li><li>当有多个枚举对象时，使用,间隔，最后有一个分号结尾 </li><li>枚举对象必须放在枚举类的行首<br><img src="https://ftp.bmp.ovh/imgs/2021/06/ae77cf61da3483dd.png"></li></ol><ul><li>enum 关键字实现枚举-课堂练习</li></ul><ol><li>EnumExercise01.java</li></ol><ul><li>enum 常 2 用方法说明<br>说明：使用关键字 enum 时，会隐式继承 Enum 类, 这样我们就可以使用 Enum 类相关的方法。[看下源码定义.]</li></ul><p>public abstract class Enum&lt;E extends Enum<E>&gt; implements Comparable<E>, Serializable {</E></E></p><p> }</p><ol><li><img src="https://ftp.bmp.ovh/imgs/2021/06/5c392c7648b64370.png"></li></ol><ul><li>enum 常用方法应用实例 EnumMethod.java </li></ul><ol><li>toString:Enum 类已经重写过了，返回的是当前对象 名,子类可以重写该方法，用于返回对象的属性信息 </li><li>name：返回当前对象名（常量名），子类中不能重写 </li><li>ordinal：返回当前对象的位置号，默认从 0 开始 </li><li>values：返回当前枚举类中所有的常量 </li><li>valueOf：将字符串转换成枚举对象，要求字符串必须 为已有的常量名，否则报异常！ </li><li>compareTo：比较两个枚举常量，比较的就是编号！</li></ol><ul><li>课堂练习2 </li></ul><ol><li>EnumExercise02.java</li></ol><ul><li>实现接口 EnumDetail.java </li></ul><ol><li>使用 enum 关键字后，就不能再继承其它类了，因为 enum 会隐式继承 Enum，而 Java 是单继承机制。 </li><li>枚举类和普通类一样，可以实现接口，如下形式。 enum 类名 implements 接口 1，接口 2{}<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3></li></ol><ul><li>注解的理解 </li></ul><ol><li>注解(Annotation)也被称为元数据(Metadata)，用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息。 </li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。 </li><li>在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE 中注解占据了更重要的角 色，例如用来配置应用程序的任何切面，代替 java EE 旧版中所遗留的繁冗代码和 XML 配置等。 </li></ol><ul><li>基本的 Annotation 介绍 使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元 素 三个基本的 Annotation: </li></ul><ol><li>@Override: 限定某个方法，是重写父类方法, 该注解只能用于方法 </li><li>@Deprecated: 用于表示某个程序元素(类, 方法等)已过时 </li><li>@SuppressWarnings: 抑制编译器警告</li></ol><ul><li>基本的 Annotation 应用案例</li></ul><ol><li>@Override 注解的案例 Override_.java<br><img src="https://ftp.bmp.ovh/imgs/2021/06/e888366f3047db3a.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/905b3af002afd81b.png"></li></ol><ul><li>@Deprecated 注解的案例 Deprecated_.java  用于表示某个程序元素(类, 方法等)已过时<br><img src="https://ftp.bmp.ovh/imgs/2021/06/c01cc4d41155f5ab.png"></li><li>@SuppressWarnings 注解的案例 SuppressWarnings_.java  抑制编译器警告<br><img src="https://ftp.bmp.ovh/imgs/2021/06/e9fb3dd5e49ff5fd.png"><h3 id="JDK-的元-Annotation-元注解，-了解"><a href="#JDK-的元-Annotation-元注解，-了解" class="headerlink" title="JDK 的元 Annotation(元注解， 了解)"></a>JDK 的元 Annotation(元注解， 了解)</h3><img src="https://ftp.bmp.ovh/imgs/2021/06/85ec85aa67b6b285.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/1f2cbc6bbe525917.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/6b800910ec2a33cc.png"><h3 id="本章作业（第九章和第十章）"><a href="#本章作业（第九章和第十章）" class="headerlink" title="本章作业（第九章和第十章）"></a>本章作业（第九章和第十章）</h3></li><li>Homework01</li></ul><ol><li>9.0 red  100.0 red</li></ol><ul><li>Homework02</li><li>Homework03</li><li>Homework04</li><li>Homework05</li><li>Homework06</li><li>Homework07</li><li>Homework08<h2 id="第十二章-异常-Exception"><a href="#第十二章-异常-Exception" class="headerlink" title="第十二章 异常-Exception"></a>第十二章 异常-Exception</h2><h3 id="异常介绍"><a href="#异常介绍" class="headerlink" title="异常介绍"></a>异常介绍</h3><img src="https://ftp.bmp.ovh/imgs/2021/06/bdcf902de5f8c087.png"><h3 id="异常体系图一览（！！！）"><a href="#异常体系图一览（！！！）" class="headerlink" title="异常体系图一览（！！！）"></a>异常体系图一览（！！！）</h3></li><li>异常体系图<br><img src="https://ftp.bmp.ovh/imgs/2021/06/6e0432c1f5131b0c.png"></li><li>异常体系图的小结<br><img src="https://ftp.bmp.ovh/imgs/2021/06/19e099ed27a59091.png"><h3 id="常见的运行时异常"><a href="#常见的运行时异常" class="headerlink" title="常见的运行时异常"></a>常见的运行时异常</h3></li><li>常见的运行时异常包括 </li></ul><ol><li>NullPointerException 空指针异常 </li><li>ArithmeticException 数学运算异常 </li><li>ArrayIndexOutOfBoundsException 数组下标越界异常 </li><li>ClassCastException 类型转换异常 </li><li>NumberFormatException 数字格式不正确异常[] </li></ol><ul><li>常见的运行时异常举例</li></ul><ol><li>NullPointerException 空指针异常  当应用程序试图在需要对象的地方使用 null 时，抛出该异常,看案例演(NullPointerException_.java)。</li><li>ArithmeticException 数学运算异常 (ArithmeticException_.java) 当出现异常的运算条件时，抛出此异常。例如，一个整数“除以零”时，抛出此类的一个实例, 案例演示</li><li>ArrayIndexOutOfBoundsException 数组下标越界异常(ArrayIndexOutOfBoundsException.java) 用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引</li><li>ClassCastException 类型转换异常 当试图将对象强制转换为不是实例的子类时，抛出该异常(ClassCastException.java)</li><li>NumberFormatException 数字格式不正确异常 当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常 =&gt; 使用异常我们 可以确保输入是满足条件数字(NumberFormatException.java).<h3 id="编译异常"><a href="#编译异常" class="headerlink" title="编译异常"></a>编译异常</h3></li></ol><ul><li>介绍</li></ul><ol><li>编译异常是指在编译期间，就必须处理的异常，否则代码不通过编译</li></ol><ul><li>常见的编译异常<br><img src="https://ftp.bmp.ovh/imgs/2021/06/ba4c93bf339e9464.png"><h3 id="异常课堂练习"><a href="#异常课堂练习" class="headerlink" title="异常课堂练习"></a>异常课堂练习</h3><img src="https://ftp.bmp.ovh/imgs/2021/06/d777364ee96fef24.png"><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3></li><li>基本介绍</li></ul><ol><li>异常处理就是当异常发生的时，对异常处理的方式</li></ol><ul><li>异常处理的方式<br><img src="https://ftp.bmp.ovh/imgs/2021/06/7f20f8b8c98df06c.png"></li><li>示意图<br><img src="https://ftp.bmp.ovh/imgs/2021/06/ba4d7d7ffd6195db.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/a154ded5dc95e429.png"><h3 id="try-catch-异常处理"><a href="#try-catch-异常处理" class="headerlink" title="try-catch 异常处理"></a>try-catch 异常处理</h3></li><li>try-catch 方式处理异常说明 TryCatch01.java<br><img src="https://ftp.bmp.ovh/imgs/2021/06/07f05c943404dc5f.png"></li><li>try-catch 方式处理异常-注意事项 TryCatchDetail.java<br><img src="https://ftp.bmp.ovh/imgs/2021/06/788a18a354a82907.png"><br><img src="https://i.loli.net/2021/06/20/7SW8dXgDycPJrq9.png"><br><img src="https://i.loli.net/2021/06/20/dMJRP5xvguhXFab.png"></li><li>异常处理课堂练习<br><img src="https://i.loli.net/2021/06/20/B3R6IyMJ7ajPrQp.png"><br><img src="https://i.loli.net/2021/06/20/1SbLprfRI6twQYE.png"><br><img src="https://i.loli.net/2021/06/20/ojLZxtDmRfev9Wq.png"></li><li>try-catch-finally 执行顺序小结<br><img src="https://i.loli.net/2021/06/20/SrRJHCALhvi8jWY.png"></li><li>课后练习题: TryCatchExercise04.java</li></ul><ol><li>如果用户输入的不是一个整数，就提示他反复输入，直到输入一个整数为止(try)<h3 id="throws-异常处理"><a href="#throws-异常处理" class="headerlink" title="throws 异常处理"></a>throws 异常处理</h3></li></ol><ul><li>基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/06/e8a59d5616db3fcc.png"></li><li>快速入门案例<br><img src="https://ftp.bmp.ovh/imgs/2021/06/586fc6231f1eb5b2.png"></li><li>注意事项和使用细节 ThrowsDetail.java<br><img src="https://ftp.bmp.ovh/imgs/2021/06/7cfb0f94fc38d173.png"><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><img src="https://ftp.bmp.ovh/imgs/2021/06/1b983fbbc58de72f.png"></li><li>自定义异常的应用实例 CustomException.java</li></ul><ol><li>当我们接收Person对象年龄时，要求范围在18-20之间，否则抛出一个自定义异常（要求 继承RuntimeException），并给出提示信息<h3 id="throw-和-throws-的区别"><a href="#throw-和-throws-的区别" class="headerlink" title="throw 和 throws 的区别"></a>throw 和 throws 的区别</h3></li></ol><ul><li>一览表<br><img src="https://ftp.bmp.ovh/imgs/2021/06/3b3d51f1c2c4afe7.png"><h3 id="本章作业-7"><a href="#本章作业-7" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>Homework01</li><li>Homework02</li><li>Homework03</li><li>Homework04<h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3></li><li>包装类的分类 WrapperType.java</li></ul><ol><li>针对八种基本数据类型相应的引用类型—包装类 </li><li>有了类的特点，就可以调用类中的方法。 </li><li>如图:<br><img src="https://ftp.bmp.ovh/imgs/2021/06/82d1d016aab781e7.png"></li></ol><ul><li>包装类和基本数据类型的转换<br><img src="https://ftp.bmp.ovh/imgs/2021/06/7318bb12c6341721.png"></li><li>案例演示</li></ul><ol><li>案例演示 Integer01.java</li></ol><ul><li>课堂测试题 WrapperExercise01.java 2min<br><img src="https://ftp.bmp.ovh/imgs/2021/06/99be0768496367cf.png"></li><li>包装类型和 String 类型的相互转换 WrapperVSString.java</li><li>Integer 类和 Character 类的常用方法 WrapperMethod.java</li></ul><ol><li>System.out.println(Integer.MIN_VALUE); //返回最小值 </li><li>System.out.println(Integer.MAX_VALUE);//返回最大值 </li><li>System.out.println(Character.isDigit(‘a’));//判断是不是数字 </li><li>System.out.println(Character.isLetter(‘a’));//判断是不是字母 </li><li>System.out.println(Character.isUpperCase(‘a’));//判断是不是大写 </li><li>System.out.println(Character.isLowerCase(‘a’));//判断是不是小写 </li><li>System.out.println(Character.isWhitespace(‘a’));//判断是不是空格 </li><li>System.out.println(Character.toUpperCase(‘a’));//转成大写 </li><li>System.out.println(Character.toLowerCase(‘A’));//转成小写</li></ol><ul><li>Integer 类面试题 1 WrapperExercise02.java</li><li>Intege 类面试题总结WrapperExercise03.java<h3 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h3></li><li>String 类的理解和创建对象<br><img src="https://ftp.bmp.ovh/imgs/2021/06/39b7c357c67bd133.png"></li><li>创建String对象的两种形式</li></ul><ol><li>直接赋值String s = “hspedu”;</li><li>调用构造器String s = new String(“hspedu”);</li></ol><ul><li>两种创建String对象的区别<br><img src="https://ftp.bmp.ovh/imgs/2021/06/b056ec47d1257766.png"></li><li>课堂测试题 StringExercise01.java<br><img src="https://ftp.bmp.ovh/imgs/2021/06/c0fea06a526fce97.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/ac6ceb62794941ed.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/bc5bba72f6c54e4e.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/8852f761cfb60c81.png"><h3 id="字符串的特性"><a href="#字符串的特性" class="headerlink" title="字符串的特性"></a>字符串的特性</h3></li><li>说明 StringExercise06.java<br><img src="https://ftp.bmp.ovh/imgs/2021/06/420eb2ceadf24ce8.png"></li><li>面试题<br><img src="https://ftp.bmp.ovh/imgs/2021/06/47997249b2a6b22d.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/d4a825a898a2e1b2.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/380ea9fa65abe399.png"><h3 id="String-类的常见方法-详情见另一篇博文"><a href="#String-类的常见方法-详情见另一篇博文" class="headerlink" title="String 类的常见方法(详情见另一篇博文)"></a>String 类的常见方法(详情见另一篇博文)</h3></li><li>说明<br><img src="https://i.loli.net/2021/06/22/fM8JNazEX3RLkAO.png"></li><li>String 类的常见方法一览(不用背，用的多了自然熟了)<br><img src="https://i.loli.net/2021/06/22/B2wbJVZnFWQagmK.png"><br><img src="https://i.loli.net/2021/06/22/87R3AnEp5QNhL2y.png"><h3 id="StringBuffer-类"><a href="#StringBuffer-类" class="headerlink" title="StringBuffer 类"></a>StringBuffer 类</h3></li><li>基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/06/c1e0fb5aae5073ca.png"></li><li>String VS StringBuffer<br><img src="https://ftp.bmp.ovh/imgs/2021/06/301ed81f92a9ff89.png"></li><li>String和StringBuffer相互转换<br>String str = “hello tom”; </li></ul><p> //方式 1 使用构造器 //注意： 返回的才是 StringBuffer 对象，对 str 本身没有影响 StringBuffer stringBuffer = new StringBuffer(str); </p><p>//方式 2 使用的是 append 方法 StringBuffer stringBuffer1 = new StringBuffer(); stringBuffer1 = stringBuffer1.append(str); </p><p>//看看 StringBuffer -&gt;String StringBuffer stringBuffer3 = new StringBuffer(“韩顺平教育”); </p><p>//方式 1 使用 StringBuffer 提供的 toString 方法 String s = stringBuffer3.toString(); </p><p>//方式 2: 使用构造器来搞定 String s1 = new String(stringBuffer3);</p><h3 id="StringBuffer-类常见方法（详情见另一篇博文）"><a href="#StringBuffer-类常见方法（详情见另一篇博文）" class="headerlink" title="StringBuffer 类常见方法（详情见另一篇博文）"></a>StringBuffer 类常见方法（详情见另一篇博文）</h3><ol><li>StringBufferMethod.java</li></ol><ul><li>StringBuffer 类课堂测试题 1 StringBufferExercise01.java</li><li>StringBuffer 类课后练习 2<br><img src="https://ftp.bmp.ovh/imgs/2021/06/a68811441d5cc723.png"><h3 id="StringBuilder-类"><a href="#StringBuilder-类" class="headerlink" title="StringBuilder 类"></a>StringBuilder 类</h3></li><li>基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/06/a295a3ec80b6040e.png"></li><li>StringBuilder 常用方法<br><img src="https://ftp.bmp.ovh/imgs/2021/06/6b29334d743d9b93.png"><h3 id="String、StringBuffer-和-StringBuilder-的比较"><a href="#String、StringBuffer-和-StringBuilder-的比较" class="headerlink" title="String、StringBuffer 和 StringBuilder 的比较"></a>String、StringBuffer 和 StringBuilder 的比较</h3><img src="https://ftp.bmp.ovh/imgs/2021/06/2a4a79542e695f60.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/06/b5804370c946e991.png"><h3 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h3></li><li>基本介绍</li></ul><ol><li>Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数</li></ol><ul><li>方法一览(均为静态方法)<br><img src="https://ftp.bmp.ovh/imgs/2021/06/915726b175111103.png"></li><li>Math 类常见方法应用案例(也可看另一篇博文)</li></ul><ol><li>MathMethod.java<h3 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h3></li></ol><ul><li>Arrays 类常见方法应用案例<br><img src="https://ftp.bmp.ovh/imgs/2021/06/cbf567e08394a98c.png"></li><li>Arrays 类课堂练习</li></ul><ol><li>ArrayExercise<h3 id="System-类"><a href="#System-类" class="headerlink" title="System 类"></a>System 类</h3></li></ol><ul><li>System 类常见方法和案例<br><img src="https://ftp.bmp.ovh/imgs/2021/06/bfbf107c4eef4d0b.png"><h3 id="BigInteger-和-BigDecimal-类"><a href="#BigInteger-和-BigDecimal-类" class="headerlink" title="BigInteger 和 BigDecimal 类"></a>BigInteger 和 BigDecimal 类</h3></li><li>BigInteger 和 BigDecimal 介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/06/320c090ab95a5cb3.png"><h3 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h3></li><li>第一代日期类<br><img src="https://ftp.bmp.ovh/imgs/2021/06/fd1e210eebc07ab1.png"></li><li>第二代日期类<br><img src="https://ftp.bmp.ovh/imgs/2021/06/7691db070b057b7f.png"></li><li>第三代日期类<br><img src="https://ftp.bmp.ovh/imgs/2021/06/aef3998ae6fe89dd.png"></li><li>DateTimeFormatter 格式日期类<br><img src="https://ftp.bmp.ovh/imgs/2021/06/32fd439bc72ff0c0.png"></li><li>Instant 时间戳<br><img src="https://ftp.bmp.ovh/imgs/2021/06/3d3cc472f77aedaa.png"></li><li>第三代日期类更多方法<br><img src="https://ftp.bmp.ovh/imgs/2021/06/4049f914bb739aff.png"><h3 id="本章作业-8"><a href="#本章作业-8" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>homework01</li><li>homework02</li><li>homework03</li><li>homework04</li><li>homework05<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合的理解和好处"><a href="#集合的理解和好处" class="headerlink" title="集合的理解和好处"></a>集合的理解和好处</h3></li></ul><ol><li>前面我们保存多个数据使用的是数组，那么数组有不足的地方，我们分析一下</li></ol><ul><li>数组vs集合</li></ul><ol><li><p><img src="https://i.loli.net/2021/07/22/8aqzR7Gf6NkPlmx.png"></p></li><li><p><img src="https://i.loli.net/2021/07/22/NZa5ltA6PgSWYrs.png"></p><h3 id="集合的框架体系"><a href="#集合的框架体系" class="headerlink" title="集合的框架体系"></a>集合的框架体系</h3></li><li><p>Java 的集合类很多，主要分为两大类，如图 ：[背下来] Collection_.java</p></li></ol><p><img src="https://i.loli.net/2021/07/22/kjazor4BbAKDv9y.png"></p><h3 id="Collection-接口和常用方法"><a href="#Collection-接口和常用方法" class="headerlink" title="Collection 接口和常用方法"></a>Collection 接口和常用方法</h3><ul><li>Collection 接口实现类的特点<br><img src="https://i.loli.net/2021/07/22/ysDQpNGVzLJuA14.png"></li><li>Collection 接口常用方法,以实现子类 ArrayList 来演示. CollectionMethod.java<br><img src="https://i.loli.net/2021/07/22/XnIY4Nq39L8a6mc.png"><br><img src="https://i.loli.net/2021/07/22/pWlJGQF7TfwuDLB.png"></li><li>Collection 接口遍历元素方式 1-使用 Iterator(迭代器)<br><img src="https://i.loli.net/2021/07/22/tWmDiI3dZyxEouw.png"><br><img src="https://i.loli.net/2021/07/22/3PJ4N5jcdfysKOW.png"></li><li>Collection 接口遍历对象方式 2-for 循环增强<br><img src="https://i.loli.net/2021/07/22/Za4AFqwyiuN6Ugz.png"></li><li>课堂练习<br>CollectionExercise.java<h3 id="List-接口和常用方法"><a href="#List-接口和常用方法" class="headerlink" title="List 接口和常用方法"></a>List 接口和常用方法</h3></li><li>List 接口基本介绍<br><img src="https://p.qlogo.cn/zc_icon/0/b014de22edc550c083b939fa8c50d4e816269231992714/0.png"></li><li>List 接口的常用方法<br><img src="https://mapp.alicdn.com/1626923466133hZvDUZWJWlrq746.png"><br><img src="https://mapp.alicdn.com/16269235526441Y1Nrmq5mKdpZU4.png"></li><li>List 接口课堂练习</li></ul><ol><li>ListExercise.java</li></ol><ul><li>List 的三种遍历方式<br><img src="https://ftp.bmp.ovh/imgs/2021/06/14560561378ea681.png"></li><li>实现类的课堂练习 ListExercise02.java<br><img src="https://ftp.bmp.ovh/imgs/2021/06/b240cd2c9d251def.png"><h3 id="ArrayList-底层结构和源码分析"><a href="#ArrayList-底层结构和源码分析" class="headerlink" title="ArrayList 底层结构和源码分析"></a>ArrayList 底层结构和源码分析</h3></li><li>ArrayList 的注意事项<br><img src="https://ftp.bmp.ovh/imgs/2021/07/3ce036f1230ece15.png"></li><li>ArrayList 的底层操作机制源码分析(重点，难点.)<br><img src="https://ftp.bmp.ovh/imgs/2021/07/706b3b1a21cf1d77.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/ff6226935f6dc3e4.png"><h3 id="Vector-底层结构和源码剖析"><a href="#Vector-底层结构和源码剖析" class="headerlink" title="Vector 底层结构和源码剖析"></a>Vector 底层结构和源码剖析</h3></li><li>Vector 的基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/c5b529721c28ca39.png"></li><li>Vector 和 ArrayList 的比较<br><img src="https://ftp.bmp.ovh/imgs/2021/07/76e58660f732aa24.png"><h3 id="LinkedList-底层结构"><a href="#LinkedList-底层结构" class="headerlink" title="LinkedList 底层结构"></a>LinkedList 底层结构</h3></li><li>LinkedList 的全面说明<br><img src="https://ftp.bmp.ovh/imgs/2021/07/73e34fd6ce48b4ab.png"></li><li>LinkedList 的底层操作机制<br><img src="https://ftp.bmp.ovh/imgs/2021/07/ed34ab9c622a69df.png"></li><li>LinkedList 的增删改查案例</li></ul><ol><li>LinkedListCRUD.java</li></ol><ul><li>ArrayList 和 LinkedList 比较<br><img src="https://ftp.bmp.ovh/imgs/2021/07/1d03a67e725a2730.png"><h3 id="Set-接口和常用方法"><a href="#Set-接口和常用方法" class="headerlink" title="Set 接口和常用方法"></a>Set 接口和常用方法</h3></li><li>Set 接口基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/06/9dea532779f334fe.png"></li><li>Set 接口的常用方法</li></ul><ol><li>和 List 接口一样, Set 接口也是 Collection 的子接口，因此，常用方法和 Collection 接口一样</li></ol><ul><li> Set 接口的遍历方式<br><img src="https://ftp.bmp.ovh/imgs/2021/07/59ad17ba7b703bd9.png"></li><li>Set 接口的常用方法举例SetMethod.java</li></ul><ol><li>以 Set 接口的实现类 HashSet 来讲解 Set 接口的方法 /</li><li>set 接口的实现类的对象(Set 接口对象), 不能存放重复的元素, 可以添加一个 null </li><li>set 接口对象存放数据是无序(即添加的顺序和取出的顺序不一致) </li><li>注意：取出的顺序的顺序虽然不是添加的顺序，但是他的固定<h3 id="Set-接口实现类-HashSet"><a href="#Set-接口实现类-HashSet" class="headerlink" title="Set 接口实现类-HashSet"></a>Set 接口实现类-HashSet</h3></li></ol><ul><li>HashSet 的全面说明<br><img src="https://ftp.bmp.ovh/imgs/2021/07/44ff1913ae38d5ce.png"></li></ul><ol><li>HashSet02.java</li></ol><ul><li>HashSet 底层机制说明<br><img src="https://ftp.bmp.ovh/imgs/2021/07/1de49cd8f934fa2b.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/90fc05951ddc01db.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/a977b6e9e78f8cf2.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/9aabaa42d10bed35.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/2362fd2b4b997b9b.png"></li><li>HashSet 课堂练习 </li></ul><ol><li>HashSetExercise.java</li><li>HashSetExercise02.java<h3 id="Set-接口实现-LinkedHashSet"><a href="#Set-接口实现-LinkedHashSet" class="headerlink" title="Set 接口实现-LinkedHashSet"></a>Set 接口实现-LinkedHashSet</h3></li></ol><ul><li>LinkedHashSet 的全面说明<br><img src="https://ftp.bmp.ovh/imgs/2021/07/86f47e804d9ccc52.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/ad2881633397c1e6.png"></li><li>LinkedHashSet 课后练习题 LinkedHashSetExercise.java<h3 id="Map-接口和常用方法"><a href="#Map-接口和常用方法" class="headerlink" title="Map 接口和常用方法"></a>Map 接口和常用方法</h3></li><li>Map 接口实现类的特点 [很实用]<br><img src="https://ftp.bmp.ovh/imgs/2021/07/ea85423e09f93b65.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/7509d63afeae3bf4.png"></li><li>Map 接口常用方法<br><img src="https://ftp.bmp.ovh/imgs/2021/07/eb88ef8af3df8241.png"></li><li>Map 遍历方法<br><img src="https://ftp.bmp.ovh/imgs/2021/07/08f7899807712bf4.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/fa2805142f93dc28.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/9beda5072f79ad5e.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/61c895e932ce9a7f.png"></li><li>Map 遍历方法练习<br><img src="https://ftp.bmp.ovh/imgs/2021/07/68e9e61ab905eb4b.png"><h3 id="Map-接口实现类-HashMap"><a href="#Map-接口实现类-HashMap" class="headerlink" title="Map 接口实现类-HashMap"></a>Map 接口实现类-HashMap</h3></li><li>HashMap 小结<br><img src="https://ftp.bmp.ovh/imgs/2021/07/925d774f453b8689.png"></li><li>HashMap 底层机制及源码剖析(和HashSet底层代码一样)<br><img src="https://ftp.bmp.ovh/imgs/2021/07/8370779c82105e55.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/0ca0253c61d0e1e2.png"><h3 id="Map-接口实现类-Hashtable"><a href="#Map-接口实现类-Hashtable" class="headerlink" title="Map 接口实现类-Hashtable"></a>Map 接口实现类-Hashtable</h3></li><li>HashTable 的基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/ab5a0174286c4f4b.png"></li><li>Hashtable 和 HashMap 对比<br><img src="https://ftp.bmp.ovh/imgs/2021/07/01c9c2ea5221b506.png"><h3 id="Map-接口实现类-Properties"><a href="#Map-接口实现类-Properties" class="headerlink" title="Map 接口实现类-Properties"></a>Map 接口实现类-Properties</h3></li><li>基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/38ddbcf8d3e6dec0.png"></li><li>基本使用<br><img src="https://ftp.bmp.ovh/imgs/2021/07/38ddbcf8d3e6dec0.png"><h3 id="总结-开发中如何选择集合实现类-记住"><a href="#总结-开发中如何选择集合实现类-记住" class="headerlink" title="总结-开发中如何选择集合实现类(记住)"></a>总结-开发中如何选择集合实现类(记住)</h3><img src="https://ftp.bmp.ovh/imgs/2021/07/022356e7d93c7c58.png"><h3 id="TreeSet和TreeMap"><a href="#TreeSet和TreeMap" class="headerlink" title="TreeSet和TreeMap"></a>TreeSet和TreeMap</h3><img src="https://ftp.bmp.ovh/imgs/2021/07/70213cb224186204.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/a4b55b711e642365.png"><br><img src="https://i.loli.net/2021/07/06/FEyGJodSDf62h1Q.png"><br><img src="https://i.loli.net/2021/07/06/e6Z4rQSyP85kvYs.png"><br><img src="https://i.loli.net/2021/07/06/6o9kjtVAWLZN1wd.png"><br><img src="https://i.loli.net/2021/07/06/5uj72mcXG3zklPW.png"><h3 id="本章作业-9"><a href="#本章作业-9" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>Homework01</li><li>Homework02</li><li>Homework03</li><li>Homework04</li><li>Homework05</li><li>Homework06<h2 id="第十五章-泛型"><a href="#第十五章-泛型" class="headerlink" title="第十五章 泛型"></a>第十五章 泛型</h2><h3 id="泛型好处"><a href="#泛型好处" class="headerlink" title="泛型好处"></a>泛型好处</h3><img src="https://ftp.bmp.ovh/imgs/2021/07/3527e89a3412b67a.png"><h3 id="泛型的语法"><a href="#泛型的语法" class="headerlink" title="泛型的语法"></a>泛型的语法</h3><img src="https://ftp.bmp.ovh/imgs/2021/07/de54cc655425902d.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/332a304a3e0e5d2e.png"><h3 id="泛型的细节"><a href="#泛型的细节" class="headerlink" title="泛型的细节"></a>泛型的细节</h3><img src="https://ftp.bmp.ovh/imgs/2021/07/a6f6181436c16152.png"><h3 id="泛型练习"><a href="#泛型练习" class="headerlink" title="泛型练习"></a>泛型练习</h3><img src="https://ftp.bmp.ovh/imgs/2021/07/277ca14f8f151c6d.png"><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3></li><li>自定义泛型类<br><img src="https://ftp.bmp.ovh/imgs/2021/07/c842c0d86c6b3844.png"></li><li>自定义泛型接口<br><img src="https://ftp.bmp.ovh/imgs/2021/07/fd23ee9b48dc1e02.png"></li><li>自定义泛型方法<br><img src="https://ftp.bmp.ovh/imgs/2021/07/c7e94812fc544804.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/3a5eb3b02d050cfe.png"><h3 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h3></li><li>泛型的继承和通配符说明 GenericExtends.java<br><img src="https://ftp.bmp.ovh/imgs/2021/07/e5ed5fce9a444cd1.png"><h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3></li><li>基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/bf6f2780117ad3f1.png"><h3 id="本章作业-10"><a href="#本章作业-10" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>homework01<h2 id="第十六章-坦克大战【1】"><a href="#第十六章-坦克大战【1】" class="headerlink" title="第十六章 坦克大战【1】"></a>第十六章 坦克大战【1】</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3></li><li>为什么写这个</li></ul><p><img src="https://ftp.bmp.ovh/imgs/2021/07/be04f8a4ad234b66.png"></p><h3 id="java-绘图坐标体系"><a href="#java-绘图坐标体系" class="headerlink" title="java 绘图坐标体系"></a>java 绘图坐标体系</h3><ul><li>坐标体系-介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/27ff0aba76b1307f.png"></li><li>坐标体系-像素<br><img src="https://ftp.bmp.ovh/imgs/2021/07/da44388563a1f821.png"></li><li>介绍-快速入门<br><img src="https://ftp.bmp.ovh/imgs/2021/07/7d90433672a245a7.png"></li><li>绘图原理<br><img src="https://ftp.bmp.ovh/imgs/2021/07/11fd031ee7e4c065.png"></li><li>Graphics 类<br><img src="https://ftp.bmp.ovh/imgs/2021/07/1fd7d9ae16ce3a00.png"></li><li>绘出坦克(简单，不谈)</li><li>绘图练习<h3 id="java-事件处理机制"><a href="#java-事件处理机制" class="headerlink" title="java 事件处理机制"></a>java 事件处理机制</h3></li><li>事件处理机制-看个问题<br><img src="https://ftp.bmp.ovh/imgs/2021/07/ad8f07e938674c85.png"></li><li>事件机制说明和机制分析<br><img src="https://ftp.bmp.ovh/imgs/2021/07/c4693ef28dea28e4.png"></li><li>深入理解<br><img src="https://ftp.bmp.ovh/imgs/2021/07/7b53824df2638155.png"><h3 id="让坦克动起来（写在项目里了）"><a href="#让坦克动起来（写在项目里了）" class="headerlink" title="让坦克动起来（写在项目里了）"></a>让坦克动起来（写在项目里了）</h3><h3 id="本章作业（写在项目里了）"><a href="#本章作业（写在项目里了）" class="headerlink" title="本章作业（写在项目里了）"></a>本章作业（写在项目里了）</h3><h3 id="本章内容小结"><a href="#本章内容小结" class="headerlink" title="本章内容小结"></a>本章内容小结</h3><img src="https://ftp.bmp.ovh/imgs/2021/07/65044a218b15f46c.png"><h2 id="第十七章-多线程基础"><a href="#第十七章-多线程基础" class="headerlink" title="第十七章 多线程基础"></a>第十七章 多线程基础</h2><h3 id="线程相关概念"><a href="#线程相关概念" class="headerlink" title="线程相关概念"></a>线程相关概念</h3></li><li>程序(program)<br><img src="https://ftp.bmp.ovh/imgs/2021/07/0352c3263cdc1891.png"></li><li>进程<br><img src="https://ftp.bmp.ovh/imgs/2021/07/0ae0a8ee8647e49f.png"></li><li>什么是线程<br><img src="https://ftp.bmp.ovh/imgs/2021/07/c8d503b948eff4e8.png"></li><li>其他相关概念<br><img src="https://ftp.bmp.ovh/imgs/2021/07/67be79c096212a67.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/8f34e9692f982bb1.png"><h3 id="线程基本使用"><a href="#线程基本使用" class="headerlink" title="线程基本使用"></a>线程基本使用</h3></li><li>创建线程的两种方式<br><img src="https://ftp.bmp.ovh/imgs/2021/07/957a03d9b2bea0ac.png"></li><li>线程应用案例 1-继承 Thread 类<br><img src="https://i.loli.net/2021/07/12/vRTtBq4cO3WyeMx.png"><br><img src="https://i.loli.net/2021/07/12/DA1ZrcHFxJ2TaKX.png"></li><li>线程应用案例 2-实现 Runnable 接口<br><img src="https://ftp.bmp.ovh/imgs/2021/07/334dc1e658c49186.png"></li><li>线程使用应用案例-多线程执行<br>Thread03.java</li><li>线程如何理解<br><img src="https://ftp.bmp.ovh/imgs/2021/07/032178b6f7c87fb2.png"><h3 id="继承-Thread-vs-实现-Runnable-的区别"><a href="#继承-Thread-vs-实现-Runnable-的区别" class="headerlink" title="继承 Thread vs 实现 Runnable 的区别"></a>继承 Thread vs 实现 Runnable 的区别</h3><img src="https://ftp.bmp.ovh/imgs/2021/07/56750696986f41d1.png"><h3 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h3></li><li>基本说明</li></ul><ol><li>使用变量的方式控制run方法退出，来终止线程</li></ol><ul><li>应用案例 ThreadExit_.java com.hspedu.exit_<br><img src="https://ftp.bmp.ovh/imgs/2021/07/cdccb137021c32ed.png"><h3 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h3></li><li>常用方法第一组<br><img src="https://ftp.bmp.ovh/imgs/2021/07/c8ccea766f198165.png"></li><li>注意事项和细节<br><img src="https://ftp.bmp.ovh/imgs/2021/07/00eeef6e499e7a4e.png"></li><li>应用案例 ThreadMethod01.java<br><img src="https://ftp.bmp.ovh/imgs/2021/07/be3970a0b99f5901.png"></li><li>常用方法第二组<br><img src="https://ftp.bmp.ovh/imgs/2021/07/879e9edd02e1f32e.png"><h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><img src="https://ftp.bmp.ovh/imgs/2021/07/eddca5e0aa0ad010.png"></li><li>应用案例 ThreadMethod03.java<br><img src="https://ftp.bmp.ovh/imgs/2021/07/bb978009e69ac6d3.png"><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3></li><li>JDK 中用 Thread.State 枚举表示了线程的几种状态<br><img src="https://ftp.bmp.ovh/imgs/2021/07/5b3d538bfd665980.png"></li><li>线程状态转换图<br><img src="https://ftp.bmp.ovh/imgs/2021/07/a9ed7340cf3a0f4f.png"><h3 id="线程的同步-Synchronized"><a href="#线程的同步-Synchronized" class="headerlink" title="线程的同步 Synchronized"></a>线程的同步 Synchronized</h3></li><li>线程同步机制<br><img src="https://ftp.bmp.ovh/imgs/2021/07/04a7f3a8d81e7962.png"></li><li>同步具体方法-Synchronized<br><img src="https://ftp.bmp.ovh/imgs/2021/07/ab2e8a576f84a499.png"></li><li>分析同步原理<br><img src="https://ftp.bmp.ovh/imgs/2021/07/2a8826c119a2cc3a.png"><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3></li><li>基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/c5efeb47b5ae9013.png"></li><li>使用互斥锁来解决售票问题-SellTicket</li><li>注意事项和细节<br><img src="https://ftp.bmp.ovh/imgs/2021/07/2c10797900090640.png"><h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3></li><li>基本介绍</li></ul><ol><li>多个线程占用对方的资源锁不肯相让，导致死锁，编程中一定要避开这种情况发生。<h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3></li></ol><ul><li>下面操作会释放锁<br><img src="https://i.loli.net/2021/07/14/cVvZ87xg2dHYwQq.png"></li><li>下面操作不会释放锁<br><img src="https://i.loli.net/2021/07/14/Gasc7WokLZjKQAF.png"><h3 id="本章作业-11"><a href="#本章作业-11" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>homework01</li><li>homework02<h2 id="第-18-章坦克大战【2】"><a href="#第-18-章坦克大战【2】" class="headerlink" title="第 18 章坦克大战【2】"></a>第 18 章坦克大战【2】</h2><h3 id="线程-应用到坦克大战"><a href="#线程-应用到坦克大战" class="headerlink" title="线程-应用到坦克大战"></a>线程-应用到坦克大战</h3></li><li>第一步<br><img src="https://ftp.bmp.ovh/imgs/2021/07/9214ebddda4ed1ae.png"></li><li>第二步<br><img src="https://ftp.bmp.ovh/imgs/2021/07/f44e440bd2b09ff6.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/18ccc230ff07387b.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/7b03caca2f990e62.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/181d2efede54aeed.png"><h2 id="第-19-章-IO流"><a href="#第-19-章-IO流" class="headerlink" title="第 19 章 IO流"></a>第 19 章 IO流</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3></li><li>什么是文件<br><img src="https://i.loli.net/2021/07/24/41yUxO3hPQsBFZa.png"></li><li>文件流<br><img src="https://i.loli.net/2021/07/24/oIRWh9D1NtQm6rE.png"><h3 id="常用的文件操作"><a href="#常用的文件操作" class="headerlink" title="常用的文件操作"></a>常用的文件操作</h3></li><li>创建文件对象相关构造器和方法<br><img src="https://i.loli.net/2021/07/24/Us6yxDFZvY2ulcA.png"></li><li>获取文件的相关信息（方法）<br><img src="https://i.loli.net/2021/07/24/HPEjOhTvbcJCLy7.png"></li><li>应用案例演示 FileInformation.java(目录本质也是文件，特殊的文件)</li><li>目录的操作和文件删除<br><img src="https://i.loli.net/2021/07/24/Am6ZR5q3STzNBUr.png"></li><li>应用案例演示<br><img src="https://i.loli.net/2021/07/24/F38umaZqCn97MkS.png"><h3 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h3></li><li>Java IO 流原理<br><img src="https://ftp.bmp.ovh/imgs/2021/07/0ffdb8f3357a3d03.png"></li><li>流的分类<br><img src="https://ftp.bmp.ovh/imgs/2021/07/c30411d746b969b3.png"><h3 id="IO-流体系图-常用的类"><a href="#IO-流体系图-常用的类" class="headerlink" title="IO 流体系图-常用的类"></a>IO 流体系图-常用的类</h3></li><li>IO流体系图<br><img src="https://ftp.bmp.ovh/imgs/2021/07/e9a6ea8d71987f2a.png"></li><li>文件vs流<br><img src="https://ftp.bmp.ovh/imgs/2021/07/9f2fa8b2c9491173.png"><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3></li><li>应用实例 FileInputStream_.java<h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3></li><li>FileOutputStream 介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/aaa34a8bce3bc15a.png"></li><li>应用实例 1 FileOutputStream01.java</li><li>应用实例 2 FileCopy.java<h3 id="FileReader-和-FileWriter"><a href="#FileReader-和-FileWriter" class="headerlink" title="FileReader 和 FileWriter"></a>FileReader 和 FileWriter</h3></li><li><img src="https://ftp.bmp.ovh/imgs/2021/07/af550a901c3030ce.png"></li><li>FileReader 相关方法：<br><img src="https://ftp.bmp.ovh/imgs/2021/07/5a92a765f17ee4fe.png"></li><li>FileWriter 常用方法:<br><img src="https://ftp.bmp.ovh/imgs/2021/07/27a38d6b92017854.png"></li><li>FileReader 和 FileWriter 应用案例 （看作品那篇博文）<h3 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h3></li><li>基本介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/043f5d31356a23a9.png"></li><li>节点流和处理流一览图<br><img src="https://ftp.bmp.ovh/imgs/2021/07/1f4cb69009f0dcda.png"></li><li>节点流和处理流的区别和联系<br><img src="https://ftp.bmp.ovh/imgs/2021/07/cd8298104da18164.png"></li><li>处理流的功能主要体现在以下两个方面:<br><img src="https://ftp.bmp.ovh/imgs/2021/07/01215bd8b2b21506.png"><h3 id="处理流-BufferedReader-和-BufferedWriter"><a href="#处理流-BufferedReader-和-BufferedWriter" class="headerlink" title="处理流-BufferedReader 和 BufferedWriter"></a>处理流-BufferedReader 和 BufferedWriter</h3></li></ul><ol><li> BufferedReader_(看自学作品，下同理)</li><li>BufferedWriter_</li><li>BufferedCopy_<h3 id="处理流-BufferedInputStream-和-BufferedOutputStream"><a href="#处理流-BufferedInputStream-和-BufferedOutputStream" class="headerlink" title="处理流-BufferedInputStream 和 BufferedOutputStream"></a>处理流-BufferedInputStream 和 BufferedOutputStream</h3></li></ol><ul><li>介绍 BufferedInputStream<br><img src="https://ftp.bmp.ovh/imgs/2021/07/a230a73570de4774.png"></li><li>介绍 BufferedOutputStream<br><img src="https://ftp.bmp.ovh/imgs/2021/07/863a79fd35c5364d.png"></li><li>应用案例</li></ul><ol><li>BufferedCopy02<h3 id="对象流-ObjectInputStream-和-ObjectOutputStream"><a href="#对象流-ObjectInputStream-和-ObjectOutputStream" class="headerlink" title="对象流-ObjectInputStream 和 ObjectOutputStream"></a>对象流-ObjectInputStream 和 ObjectOutputStream</h3></li></ol><ul><li>介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/b11ada3b75065bd2.png"><br><img src="https://ftp.bmp.ovh/imgs/2021/07/e2b523314253bef6.png"></li><li>对象流介绍<br><img src="https://ftp.bmp.ovh/imgs/2021/07/54a167141c77e07f.png"></li><li>反序列化</li></ul><ol><li>ObjectInputStream</li><li>细节<br><img src="https://ftp.bmp.ovh/imgs/2021/07/91b6d2437e52421c.png"><h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3><img src="https://i.loli.net/2021/08/01/j2BXMOqEwGecps8.png"><h3 id="转换流-InputStreamReader-和-OutputStreamWriter"><a href="#转换流-InputStreamReader-和-OutputStreamWriter" class="headerlink" title="转换流-InputStreamReader 和 OutputStreamWriter"></a>转换流-InputStreamReader 和 OutputStreamWriter</h3><img src="https://i.loli.net/2021/08/01/6Na3eYtApw8LVPl.png"><br><img src="https://i.loli.net/2021/08/01/1ZrEPkdf2tm4KxW.png"><h3 id="打印流-PrintStream-和-PrintWriter"><a href="#打印流-PrintStream-和-PrintWriter" class="headerlink" title="打印流-PrintStream 和 PrintWriter"></a>打印流-PrintStream 和 PrintWriter</h3><img src="https://i.loli.net/2021/08/01/yTzHPgVfwjk4qGB.png"><h3 id="Properties-类"><a href="#Properties-类" class="headerlink" title="Properties 类"></a>Properties 类</h3></li></ol><ul><li>需求<br><img src="https://i.loli.net/2021/08/01/mGXknZbtcJfeNuT.png"></li><li>基本介绍<br><img src="https://i.loli.net/2021/08/01/kthjLR4PG2KfN96.png"></li><li>应用案例<br><img src="https://i.loli.net/2021/08/01/zm5YoucaWbe3vN8.png"><h3 id="本章作业-12"><a href="#本章作业-12" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>homework01</li><li>homework02</li><li>homework03<h2 id="第二十章，坦克大战3"><a href="#第二十章，坦克大战3" class="headerlink" title="第二十章，坦克大战3"></a>第二十章，坦克大战3</h2><h3 id="IO-流-应用到坦克大战"><a href="#IO-流-应用到坦克大战" class="headerlink" title="IO 流-应用到坦克大战"></a>IO 流-应用到坦克大战</h3><img src="https://i.loli.net/2021/08/04/dCDlUkrNZQWTcRq.png"><br><img src="https://i.loli.net/2021/08/04/eOJUuHpt2W9Bkcs.png"><br><img src="https://i.loli.net/2021/08/04/k6rdT9plHsGRjfV.png"><h2 id="第二十一章-网络编程"><a href="#第二十一章-网络编程" class="headerlink" title="第二十一章 网络编程"></a>第二十一章 网络编程</h2><h3 id="网络的相关概念"><a href="#网络的相关概念" class="headerlink" title="网络的相关概念"></a>网络的相关概念</h3></li><li>网络通信<br><img src="https://i.loli.net/2021/08/09/SWl5fxPjRsqa1uD.png"></li><li>网络<br><img src="https://i.loli.net/2021/08/09/7j4BwOsZ5mF1Wdh.png"></li><li>ip 地址<br><img src="https://i.loli.net/2021/08/09/cG6xFWPZdtizaCM.png"></li><li>IPv4地址分类<br><img src="https://i.loli.net/2021/08/09/hUO8Ic62VGkTDH1.png"></li><li>域名<br><img src="https://i.loli.net/2021/08/09/EVfjapb51klKI7W.png"></li><li>网络通信协议<br><img src="https://i.loli.net/2021/08/09/4bShiaZMkE8QFx2.png"><br><img src="https://i.loli.net/2021/08/09/3I5nKjYyU84XLtr.png"><br><img src="https://i.loli.net/2021/08/09/FkDP4j7erWmaGlB.png"></li><li>TCP 和 UDP<br><img src="https://i.loli.net/2021/08/09/ZsT4uPMQ1GF3o6b.png"><h3 id="InetAddress-类"><a href="#InetAddress-类" class="headerlink" title="InetAddress 类"></a>InetAddress 类</h3></li><li>相关方法<br><img src="https://i.loli.net/2021/08/09/tI1TzXmCD6Y9WsJ.png"></li><li>应用案例 com.hspedu.api API_.java<h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3></li><li>基本介绍<br><img src="https://i.loli.net/2021/08/09/W36OCvL1P98Txma.png"><h3 id="TCP-网络通信编程"><a href="#TCP-网络通信编程" class="headerlink" title="TCP 网络通信编程"></a>TCP 网络通信编程</h3></li><li>基本介绍<br><img src="https://i.loli.net/2021/08/09/4bFvz2fUYxHc1iS.png"></li><li>应用案例 1(使用字节流)  com.hspedu.socket SocketTCP01Server.java SocketTCP01Client.java</li><li>应用案例 2(使用字节流) SocketTCP02.java</li><li>应用案例 3(使用字符流) SocketTCP03Server</li><li>应用案例 4 TCPFileUploadServer.java TCPFileUploadClient.java<h3 id="netstat-指令"><a href="#netstat-指令" class="headerlink" title="netstat 指令"></a>netstat 指令</h3><img src="https://i.loli.net/2021/08/11/wcdgyCIYWQzfqeA.png"><h3 id="TCP-网络通讯不为人知的秘密"><a href="#TCP-网络通讯不为人知的秘密" class="headerlink" title="TCP 网络通讯不为人知的秘密"></a>TCP 网络通讯不为人知的秘密</h3><img src="https://i.loli.net/2021/08/12/b1lxCIanq7TBD6L.png"><h3 id="UDP-网络通信编程-了解"><a href="#UDP-网络通信编程-了解" class="headerlink" title="UDP 网络通信编程[了解]"></a>UDP 网络通信编程[了解]</h3></li><li>基本介绍<br><img src="https://i.loli.net/2021/08/12/RnqwpMGeJu9kEDr.png"></li><li>应用案例<br><img src="https://i.loli.net/2021/08/12/NKF3AWPltT2nMEb.png"><h3 id="本章作业-13"><a href="#本章作业-13" class="headerlink" title="本章作业"></a>本章作业</h3></li><li>homework01</li><li>homework02</li></ul><hr><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>建博参考：<a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.0">https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.0</a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=434902428&auto=1&height=66"></iframe>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java自学笔记&quot;&gt;&lt;a href=&quot;#Java自学笔记&quot; class=&quot;headerlink&quot; title=&quot;Java自学笔记&quot;&gt;&lt;/a&gt;Java自学笔记&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
